{"version":3,"file":"data-filter.bf997cc2.js","sources":["../../node_modules/@deck.gl/extensions/dist/esm/data-filter/shader-module.js","../../node_modules/@deck.gl/extensions/dist/esm/data-filter/aggregator.js","../../node_modules/@deck.gl/extensions/dist/esm/data-filter/data-filter.js"],"sourcesContent":["const vs = \"\\nuniform DATAFILTER_TYPE filter_min;\\nuniform DATAFILTER_TYPE filter_softMin;\\nuniform DATAFILTER_TYPE filter_softMax;\\nuniform DATAFILTER_TYPE filter_max;\\nuniform bool filter_useSoftMargin;\\nuniform bool filter_enabled;\\nuniform bool filter_transformSize;\\n\\n#ifdef NON_INSTANCED_MODEL\\n  #define DATAFILTER_ATTRIB filterValues\\n  #define DATAFILTER_ATTRIB_64LOW filterValues64Low\\n#else\\n  #define DATAFILTER_ATTRIB instanceFilterValues\\n  #define DATAFILTER_ATTRIB_64LOW instanceFilterValues64Low\\n#endif\\n\\nattribute DATAFILTER_TYPE DATAFILTER_ATTRIB;\\n#ifdef DATAFILTER_DOUBLE\\n  attribute DATAFILTER_TYPE DATAFILTER_ATTRIB_64LOW;\\n\\n  uniform DATAFILTER_TYPE filter_min64High;\\n  uniform DATAFILTER_TYPE filter_max64High;\\n#endif\\n\\nvarying float dataFilter_value;\\n\\nfloat dataFilter_reduceValue(float value) {\\n  return value;\\n}\\nfloat dataFilter_reduceValue(vec2 value) {\\n  return min(value.x, value.y);\\n}\\nfloat dataFilter_reduceValue(vec3 value) {\\n  return min(min(value.x, value.y), value.z);\\n}\\nfloat dataFilter_reduceValue(vec4 value) {\\n  return min(min(value.x, value.y), min(value.z, value.w));\\n}\\nvoid dataFilter_setValue(DATAFILTER_TYPE valueFromMin, DATAFILTER_TYPE valueFromMax) {\\n  if (filter_enabled) {\\n    if (filter_useSoftMargin) {\\n      dataFilter_value = dataFilter_reduceValue(\\n        smoothstep(filter_min, filter_softMin, valueFromMin) *\\n        (1.0 - smoothstep(filter_softMax, filter_max, valueFromMax))\\n      );\\n    } else {\\n      dataFilter_value = dataFilter_reduceValue(\\n        step(filter_min, valueFromMin) * step(valueFromMax, filter_max)\\n      );\\n    }\\n  } else {\\n    dataFilter_value = 1.0;\\n  }\\n}\\n\";\nconst fs = \"\\nuniform bool filter_transformColor;\\nvarying float dataFilter_value;\\n\";\n\nfunction getUniforms(opts) {\n  if (!opts || !('extensions' in opts)) {\n    return {};\n  }\n\n  const {\n    filterRange = [-1, 1],\n    filterEnabled = true,\n    filterTransformSize = true,\n    filterTransformColor = true\n  } = opts;\n  const filterSoftRange = opts.filterSoftRange || filterRange;\n  return { ...(Number.isFinite(filterRange[0]) ? {\n      filter_min: filterRange[0],\n      filter_softMin: filterSoftRange[0],\n      filter_softMax: filterSoftRange[1],\n      filter_max: filterRange[1]\n    } : {\n      filter_min: filterRange.map(r => r[0]),\n      filter_softMin: filterSoftRange.map(r => r[0]),\n      filter_softMax: filterSoftRange.map(r => r[1]),\n      filter_max: filterRange.map(r => r[1])\n    }),\n    filter_enabled: filterEnabled,\n    filter_useSoftMargin: Boolean(opts.filterSoftRange),\n    filter_transformSize: filterEnabled && filterTransformSize,\n    filter_transformColor: filterEnabled && filterTransformColor\n  };\n}\n\nfunction getUniforms64(opts) {\n  if (!opts || !('extensions' in opts)) {\n    return {};\n  }\n\n  const uniforms = getUniforms(opts);\n\n  if (Number.isFinite(uniforms.filter_min)) {\n    const min64High = Math.fround(uniforms.filter_min);\n    uniforms.filter_min -= min64High;\n    uniforms.filter_softMin -= min64High;\n    uniforms.filter_min64High = min64High;\n    const max64High = Math.fround(uniforms.filter_max);\n    uniforms.filter_max -= max64High;\n    uniforms.filter_softMax -= max64High;\n    uniforms.filter_max64High = max64High;\n  } else {\n    const min64High = uniforms.filter_min.map(Math.fround);\n    uniforms.filter_min = uniforms.filter_min.map((x, i) => x - min64High[i]);\n    uniforms.filter_softMin = uniforms.filter_softMin.map((x, i) => x - min64High[i]);\n    uniforms.filter_min64High = min64High;\n    const max64High = uniforms.filter_max.map(Math.fround);\n    uniforms.filter_max = uniforms.filter_max.map((x, i) => x - max64High[i]);\n    uniforms.filter_softMax = uniforms.filter_softMax.map((x, i) => x - max64High[i]);\n    uniforms.filter_max64High = max64High;\n  }\n\n  return uniforms;\n}\n\nconst inject = {\n  'vs:#main-start': \"\\n    #ifdef DATAFILTER_DOUBLE\\n      dataFilter_setValue(\\n        DATAFILTER_ATTRIB - filter_min64High + DATAFILTER_ATTRIB_64LOW,\\n        DATAFILTER_ATTRIB - filter_max64High + DATAFILTER_ATTRIB_64LOW\\n      );\\n    #else\\n      dataFilter_setValue(DATAFILTER_ATTRIB, DATAFILTER_ATTRIB);\\n    #endif\\n  \",\n  'vs:#main-end': \"\\n    if (dataFilter_value == 0.0) {\\n      gl_Position = vec4(0.);\\n    }\\n  \",\n  'vs:DECKGL_FILTER_SIZE': \"\\n    if (filter_transformSize) {\\n      size = size * dataFilter_value;\\n    }\\n  \",\n  'fs:DECKGL_FILTER_COLOR': \"\\n    if (dataFilter_value == 0.0) discard;\\n    if (filter_transformColor) {\\n      color.a *= dataFilter_value;\\n    }\\n  \"\n};\nexport const shaderModule = {\n  name: 'data-filter',\n  vs,\n  fs,\n  inject,\n  getUniforms\n};\nexport const shaderModule64 = {\n  name: 'data-filter-fp64',\n  vs,\n  fs,\n  inject,\n  getUniforms: getUniforms64\n};\n//# sourceMappingURL=shader-module.js.map","import { Model, Texture2D, Framebuffer, isWebGL2 } from '@luma.gl/core';\nconst AGGREGATE_VS = \"#define SHADER_NAME data-filter-vertex-shader\\n\\n#ifdef FLOAT_TARGET\\n  attribute float filterIndices;\\n  attribute float filterPrevIndices;\\n#else\\n  attribute vec2 filterIndices;\\n  attribute vec2 filterPrevIndices;\\n#endif\\n\\nvarying vec4 vColor;\\nconst float component = 1.0 / 255.0;\\n\\nvoid main() {\\n  #ifdef FLOAT_TARGET\\n    dataFilter_value *= float(filterIndices != filterPrevIndices);\\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\\n    vColor = vec4(0.0, 0.0, 0.0, 1.0);\\n  #else\\n    // Float texture is not supported: pack result into 4 channels x 256 px x 64px\\n    dataFilter_value *= float(filterIndices.x != filterPrevIndices.x);\\n    float col = filterIndices.x;\\n    float row = filterIndices.y * 4.0;\\n    float channel = floor(row);\\n    row = fract(row);\\n    vColor = component * vec4(bvec4(channel == 0.0, channel == 1.0, channel == 2.0, channel == 3.0));\\n    gl_Position = vec4(col * 2.0 - 1.0, row * 2.0 - 1.0, 0.0, 1.0);\\n  #endif\\n  gl_PointSize = 1.0;\\n}\\n\";\nconst AGGREGATE_FS = \"#define SHADER_NAME data-filter-fragment-shader\\nprecision highp float;\\n\\nvarying vec4 vColor;\\n\\nvoid main() {\\n  if (dataFilter_value < 0.5) {\\n    discard;\\n  }\\n  gl_FragColor = vColor;\\n}\\n\";\nexport function supportsFloatTarget(gl) {\n  return Boolean(gl.getExtension('EXT_float_blend') && (gl.getExtension('EXT_color_buffer_float') || gl.getExtension('WEBGL_color_buffer_float')));\n}\nexport function getFramebuffer(gl, useFloatTarget) {\n  if (useFloatTarget) {\n    return new Framebuffer(gl, {\n      width: 1,\n      height: 1,\n      attachments: {\n        [36064]: new Texture2D(gl, {\n          format: isWebGL2(gl) ? 34836 : 6408,\n          type: 5126,\n          mipmaps: false\n        })\n      }\n    });\n  }\n\n  return new Framebuffer(gl, {\n    width: 256,\n    height: 64,\n    depth: false\n  });\n}\nexport function getModel(gl, shaderOptions, useFloatTarget) {\n  shaderOptions.defines.NON_INSTANCED_MODEL = 1;\n\n  if (useFloatTarget) {\n    shaderOptions.defines.FLOAT_TARGET = 1;\n  }\n\n  return new Model(gl, {\n    id: 'data-filter-aggregation-model',\n    vertexCount: 1,\n    isInstanced: false,\n    drawMode: 0,\n    vs: AGGREGATE_VS,\n    fs: AGGREGATE_FS,\n    ...shaderOptions\n  });\n}\nexport const parameters = {\n  blend: true,\n  blendFunc: [1, 1, 1, 1],\n  blendEquation: [32774, 32774],\n  depthTest: false\n};\n//# sourceMappingURL=aggregator.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LayerExtension } from '@deck.gl/core';\nimport { shaderModule, shaderModule64 } from './shader-module';\nimport * as aggregator from './aggregator';\nimport { readPixelsToArray, clear } from '@luma.gl/core';\nconst defaultProps = {\n  getFilterValue: {\n    type: 'accessor',\n    value: 0\n  },\n  onFilteredItemsChange: {\n    type: 'function',\n    value: null,\n    compare: false\n  },\n  filterEnabled: true,\n  filterRange: [-1, 1],\n  filterSoftRange: null,\n  filterTransformSize: true,\n  filterTransformColor: true\n};\nconst DATA_TYPE_FROM_SIZE = {\n  1: 'float',\n  2: 'vec2',\n  3: 'vec3',\n  4: 'vec4'\n};\nexport default class DataFilterExtension extends LayerExtension {\n  constructor({\n    filterSize = 1,\n    fp64 = false,\n    countItems = false\n  } = {}) {\n    if (!DATA_TYPE_FROM_SIZE[filterSize]) {\n      throw new Error('filterSize out of range');\n    }\n\n    super({\n      filterSize,\n      fp64,\n      countItems\n    });\n  }\n\n  getShaders(extension) {\n    const {\n      filterSize,\n      fp64\n    } = extension.opts;\n    return {\n      modules: [fp64 ? shaderModule64 : shaderModule],\n      defines: {\n        DATAFILTER_TYPE: DATA_TYPE_FROM_SIZE[filterSize],\n        DATAFILTER_DOUBLE: Boolean(fp64)\n      }\n    };\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n\n    if (attributeManager) {\n      attributeManager.add({\n        filterValues: {\n          size: extension.opts.filterSize,\n          type: extension.opts.fp64 ? 5130 : 5126,\n          accessor: 'getFilterValue',\n          shaderAttributes: {\n            filterValues: {\n              divisor: 0\n            },\n            instanceFilterValues: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    const {\n      gl\n    } = this.context;\n\n    if (attributeManager && extension.opts.countItems) {\n      const useFloatTarget = aggregator.supportsFloatTarget(gl);\n      attributeManager.add({\n        filterIndices: {\n          size: useFloatTarget ? 1 : 2,\n          vertexOffset: 1,\n          type: 5121,\n          normalized: true,\n          accessor: (object, {\n            index\n          }) => {\n            const i = object && object.__source ? object.__source.index : index;\n            return useFloatTarget ? (i + 1) % 255 : [(i + 1) % 255, Math.floor(i / 255) % 255];\n          },\n          shaderAttributes: {\n            filterPrevIndices: {\n              vertexOffset: 0\n            },\n            filterIndices: {\n              vertexOffset: 1\n            }\n          }\n        }\n      });\n      const filterFBO = aggregator.getFramebuffer(gl, useFloatTarget);\n      const filterModel = aggregator.getModel(gl, extension.getShaders.call(this, extension), useFloatTarget);\n      this.setState({\n        filterFBO,\n        filterModel\n      });\n    }\n  }\n\n  updateState({\n    props,\n    oldProps\n  }) {\n    if (this.state.filterModel) {\n      const attributeManager = this.getAttributeManager();\n      const filterNeedsUpdate = attributeManager.attributes.filterValues.needsUpdate() || props.filterEnabled !== oldProps.filterEnabled || props.filterRange !== oldProps.filterRange || props.filterSoftRange !== oldProps.filterSoftRange;\n\n      if (filterNeedsUpdate) {\n        this.setState({\n          filterNeedsUpdate\n        });\n      }\n    }\n  }\n\n  draw(params, extension) {\n    const {\n      filterFBO,\n      filterModel,\n      filterNeedsUpdate\n    } = this.state;\n    const {\n      onFilteredItemsChange\n    } = this.props;\n\n    if (filterNeedsUpdate && onFilteredItemsChange && filterModel) {\n      const {\n        attributes: {\n          filterValues,\n          filterIndices\n        }\n      } = this.getAttributeManager();\n      filterModel.setVertexCount(this.getNumInstances());\n      const {\n        gl\n      } = this.context;\n      clear(gl, {\n        framebuffer: filterFBO,\n        color: [0, 0, 0, 0]\n      });\n      filterModel.updateModuleSettings(params.moduleParameters).setAttributes({ ...filterValues.getShaderAttributes(),\n        ...(filterIndices && filterIndices.getShaderAttributes())\n      }).draw({\n        framebuffer: filterFBO,\n        parameters: { ...aggregator.parameters,\n          viewport: [0, 0, filterFBO.width, filterFBO.height]\n        }\n      });\n      const color = readPixelsToArray(filterFBO);\n      let count = 0;\n\n      for (let i = 0; i < color.length; i++) {\n        count += color[i];\n      }\n\n      onFilteredItemsChange({\n        id: this.id,\n        count\n      });\n      this.state.filterNeedsUpdate = false;\n    }\n  }\n\n  finalizeState() {\n    const {\n      filterFBO,\n      filterModel\n    } = this.state;\n\n    if (filterFBO) {\n      filterFBO.color.delete();\n      filterFBO.delete();\n      filterModel.delete();\n    }\n  }\n\n}\n\n_defineProperty(DataFilterExtension, \"defaultProps\", defaultProps);\n\n_defineProperty(DataFilterExtension, \"extensionName\", 'DataFilterExtension');\n//# sourceMappingURL=data-filter.js.map"],"names":["vs","fs","getUniforms","opts","filterRange","filterEnabled","filterTransformSize","filterTransformColor","filterSoftRange","__spreadProps","__spreadValues","Number","isFinite","filter_min","filter_softMin","filter_softMax","filter_max","map","r","filter_enabled","filter_useSoftMargin","Boolean","filter_transformSize","filter_transformColor","inject","shaderModule","name","shaderModule64","uniforms","min64High","Math","fround","filter_min64High","max64High","filter_max64High","x","i","parameters","blend","blendFunc","blendEquation","depthTest","DATA_TYPE_FROM_SIZE","DataFilterExtension","LayerExtension","constructor","filterSize","fp64","countItems","Error","super","getShaders","extension","modules","defines","DATAFILTER_TYPE","DATAFILTER_DOUBLE","initializeState","context","attributeManager","this","getAttributeManager","add","filterValues","size","type","accessor","shaderAttributes","divisor","instanceFilterValues","gl","useFloatTarget","getExtension","aggregator.supportsFloatTarget","filterIndices","vertexOffset","normalized","object","index","__source","floor","filterPrevIndices","filterFBO","Framebuffer","width","height","attachments","Texture2D","format","isWebGL2","mipmaps","depth","aggregator.getFramebuffer","filterModel","shaderOptions","NON_INSTANCED_MODEL","FLOAT_TARGET","Model","id","vertexCount","isInstanced","drawMode","aggregator.getModel","call","setState","updateState","props","oldProps","state","filterNeedsUpdate","attributes","needsUpdate","draw","params","onFilteredItemsChange","setVertexCount","getNumInstances","clear","framebuffer","color","updateModuleSettings","moduleParameters","setAttributes","getShaderAttributes","aggregator.parameters","viewport","readPixelsToArray","count","length","finalizeState","delete","_defineProperty","getFilterValue","value","compare"],"mappings":"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"}