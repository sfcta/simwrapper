{"version":3,"file":"Coords.6c17f2a7.js","sources":["../../node_modules/proj4/lib/constants/values.js","../../node_modules/proj4/lib/constants/PrimeMeridian.js","../../node_modules/proj4/lib/constants/units.js","../../node_modules/proj4/lib/match.js","../../node_modules/proj4/lib/projString.js","../../node_modules/wkt-parser/parser.js","../../node_modules/wkt-parser/process.js","../../node_modules/wkt-parser/index.js","../../node_modules/proj4/lib/global.js","../../node_modules/proj4/lib/defs.js","../../node_modules/proj4/lib/parseCode.js","../../node_modules/proj4/lib/extend.js","../../node_modules/proj4/lib/common/msfnz.js","../../node_modules/proj4/lib/common/sign.js","../../node_modules/proj4/lib/common/adjust_lon.js","../../node_modules/proj4/lib/common/tsfnz.js","../../node_modules/proj4/lib/common/phi2z.js","../../node_modules/proj4/lib/projections/longlat.js","../../node_modules/proj4/lib/projections.js","../../node_modules/proj4/lib/projections/merc.js","../../node_modules/proj4/lib/constants/Ellipsoid.js","../../node_modules/proj4/lib/constants/Datum.js","../../node_modules/proj4/lib/nadgrid.js","../../node_modules/proj4/lib/Proj.js","../../node_modules/proj4/lib/deriveConstants.js","../../node_modules/proj4/lib/datum.js","../../node_modules/proj4/lib/datumUtils.js","../../node_modules/proj4/lib/datum_transform.js","../../node_modules/proj4/lib/adjust_axis.js","../../node_modules/proj4/lib/common/toPoint.js","../../node_modules/proj4/lib/checkSanity.js","../../node_modules/proj4/lib/transform.js","../../node_modules/proj4/lib/core.js","../../node_modules/mgrs/mgrs.js","../../node_modules/proj4/lib/Point.js","../../node_modules/proj4/lib/common/pj_enfn.js","../../node_modules/proj4/lib/common/pj_mlfn.js","../../node_modules/proj4/lib/common/pj_inv_mlfn.js","../../node_modules/proj4/lib/projections/tmerc.js","../../node_modules/proj4/lib/common/sinh.js","../../node_modules/proj4/lib/common/hypot.js","../../node_modules/proj4/lib/common/asinhy.js","../../node_modules/proj4/lib/common/log1py.js","../../node_modules/proj4/lib/common/gatg.js","../../node_modules/proj4/lib/common/clens_cmplx.js","../../node_modules/proj4/lib/common/cosh.js","../../node_modules/proj4/lib/projections/etmerc.js","../../node_modules/proj4/lib/common/clens.js","../../node_modules/proj4/lib/projections/utm.js","../../node_modules/proj4/lib/common/adjust_zone.js","../../node_modules/proj4/lib/common/srat.js","../../node_modules/proj4/lib/projections/gauss.js","../../node_modules/proj4/lib/projections/sterea.js","../../node_modules/proj4/lib/projections/stere.js","../../node_modules/proj4/lib/projections/somerc.js","../../node_modules/proj4/lib/projections/omerc.js","../../node_modules/proj4/lib/projections/lcc.js","../../node_modules/proj4/lib/projections/krovak.js","../../node_modules/proj4/lib/common/mlfn.js","../../node_modules/proj4/lib/common/e0fn.js","../../node_modules/proj4/lib/common/e1fn.js","../../node_modules/proj4/lib/common/e2fn.js","../../node_modules/proj4/lib/common/e3fn.js","../../node_modules/proj4/lib/common/gN.js","../../node_modules/proj4/lib/common/adjust_lat.js","../../node_modules/proj4/lib/common/imlfn.js","../../node_modules/proj4/lib/projections/cass.js","../../node_modules/proj4/lib/common/qsfnz.js","../../node_modules/proj4/lib/projections/laea.js","../../node_modules/proj4/lib/common/asinz.js","../../node_modules/proj4/lib/projections/aea.js","../../node_modules/proj4/lib/projections/gnom.js","../../node_modules/proj4/lib/projections/cea.js","../../node_modules/proj4/lib/common/iqsfnz.js","../../node_modules/proj4/lib/projections/eqc.js","../../node_modules/proj4/lib/projections/poly.js","../../node_modules/proj4/lib/projections/nzmg.js","../../node_modules/proj4/lib/projections/mill.js","../../node_modules/proj4/lib/projections/sinu.js","../../node_modules/proj4/lib/projections/moll.js","../../node_modules/proj4/lib/projections/eqdc.js","../../node_modules/proj4/lib/projections/vandg.js","../../node_modules/proj4/lib/projections/aeqd.js","../../node_modules/proj4/lib/projections/ortho.js","../../node_modules/proj4/lib/projections/qsc.js","../../node_modules/proj4/lib/projections/robin.js","../../node_modules/proj4/lib/projections/geocent.js","../../node_modules/proj4/lib/projections/tpers.js","../../node_modules/proj4/lib/projections/geos.js","../../node_modules/proj4/projs.js","../../node_modules/proj4/lib/index.js","../../src/js/Coords.ts"],"sourcesContent":["export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_GRIDSHIFT = 3;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SRS_WGS84_SEMIMAJOR = 6378137.0;  // only used in grid shift transforms\nexport var SRS_WGS84_SEMIMINOR = 6356752.314;  // only used in grid shift transforms\nexport var SRS_WGS84_ESQUARED = 0.0066943799901413165; // only used in grid shift transforms\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n","var exports = {};\nexport {exports as default};\n\nexports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n","export default {\n  ft: {to_meter: 0.3048},\n  'us-ft': {to_meter: 1200 / 3937}\n};\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    gamma: function(v) {\n      self.rectified_grid_angle = parseFloat(v);\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    },\n    approx: function() {\n      self.approx = true;\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n","export default parseString;\n\nvar NEUTRAL = 1;\nvar KEYWORD = 2;\nvar NUMBER = 3;\nvar QUOTED = 4;\nvar AFTERQUOTE = 5;\nvar ENDED = -1;\nvar whitespace = /\\s/;\nvar latin = /[A-Za-z]/;\nvar keyword = /[A-Za-z84_]/;\nvar endThings = /[,\\]]/;\nvar digets = /[\\d\\.E\\-\\+]/;\n// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nfunction Parser(text) {\n  if (typeof text !== 'string') {\n    throw new Error('not a string');\n  }\n  this.text = text.trim();\n  this.level = 0;\n  this.place = 0;\n  this.root = null;\n  this.stack = [];\n  this.currentObject = null;\n  this.state = NEUTRAL;\n}\nParser.prototype.readCharicter = function() {\n  var char = this.text[this.place++];\n  if (this.state !== QUOTED) {\n    while (whitespace.test(char)) {\n      if (this.place >= this.text.length) {\n        return;\n      }\n      char = this.text[this.place++];\n    }\n  }\n  switch (this.state) {\n    case NEUTRAL:\n      return this.neutral(char);\n    case KEYWORD:\n      return this.keyword(char)\n    case QUOTED:\n      return this.quoted(char);\n    case AFTERQUOTE:\n      return this.afterquote(char);\n    case NUMBER:\n      return this.number(char);\n    case ENDED:\n      return;\n  }\n};\nParser.prototype.afterquote = function(char) {\n  if (char === '\"') {\n    this.word += '\"';\n    this.state = QUOTED;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = this.word.trim();\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n};\nParser.prototype.afterItem = function(char) {\n  if (char === ',') {\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n    }\n    this.word = null;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (char === ']') {\n    this.level--;\n    if (this.word !== null) {\n      this.currentObject.push(this.word);\n      this.word = null;\n    }\n    this.state = NEUTRAL;\n    this.currentObject = this.stack.pop();\n    if (!this.currentObject) {\n      this.state = ENDED;\n    }\n\n    return;\n  }\n};\nParser.prototype.number = function(char) {\n  if (digets.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.word = parseFloat(this.word);\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n};\nParser.prototype.quoted = function(char) {\n  if (char === '\"') {\n    this.state = AFTERQUOTE;\n    return;\n  }\n  this.word += char;\n  return;\n};\nParser.prototype.keyword = function(char) {\n  if (keyword.test(char)) {\n    this.word += char;\n    return;\n  }\n  if (char === '[') {\n    var newObjects = [];\n    newObjects.push(this.word);\n    this.level++;\n    if (this.root === null) {\n      this.root = newObjects;\n    } else {\n      this.currentObject.push(newObjects);\n    }\n    this.stack.push(this.currentObject);\n    this.currentObject = newObjects;\n    this.state = NEUTRAL;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n};\nParser.prototype.neutral = function(char) {\n  if (latin.test(char)) {\n    this.word = char;\n    this.state = KEYWORD;\n    return;\n  }\n  if (char === '\"') {\n    this.word = '';\n    this.state = QUOTED;\n    return;\n  }\n  if (digets.test(char)) {\n    this.word = char;\n    this.state = NUMBER;\n    return;\n  }\n  if (endThings.test(char)) {\n    this.afterItem(char);\n    return;\n  }\n  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n};\nParser.prototype.output = function() {\n  while (this.place < this.text.length) {\n    this.readCharicter();\n  }\n  if (this.state === ENDED) {\n    return this.root;\n  }\n  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n};\n\nfunction parseString(txt) {\n  var parser = new Parser(txt);\n  return parser.output();\n}\n","\n\nfunction mapit(obj, key, value) {\n  if (Array.isArray(key)) {\n    value.unshift(key);\n    key = null;\n  }\n  var thing = key ? {} : obj;\n\n  var out = value.reduce(function(newObj, item) {\n    sExpr(item, newObj);\n    return newObj\n  }, thing);\n  if (key) {\n    obj[key] = out;\n  }\n}\n\nexport function sExpr(v, obj) {\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  var key = v.shift();\n  if (key === 'PARAMETER') {\n    key = v.shift();\n  }\n  if (v.length === 1) {\n    if (Array.isArray(v[0])) {\n      obj[key] = {};\n      sExpr(v[0], obj[key]);\n      return;\n    }\n    obj[key] = v[0];\n    return;\n  }\n  if (!v.length) {\n    obj[key] = true;\n    return;\n  }\n  if (key === 'TOWGS84') {\n    obj[key] = v;\n    return;\n  }\n  if (key === 'AXIS') {\n    if (!(key in obj)) {\n      obj[key] = [];\n    }\n    obj[key].push(v);\n    return;\n  }\n  if (!Array.isArray(key)) {\n    obj[key] = {};\n  }\n\n  var i;\n  switch (key) {\n    case 'UNIT':\n    case 'PRIMEM':\n    case 'VERT_DATUM':\n      obj[key] = {\n        name: v[0].toLowerCase(),\n        convert: v[1]\n      };\n      if (v.length === 3) {\n        sExpr(v[2], obj[key]);\n      }\n      return;\n    case 'SPHEROID':\n    case 'ELLIPSOID':\n      obj[key] = {\n        name: v[0],\n        a: v[1],\n        rf: v[2]\n      };\n      if (v.length === 4) {\n        sExpr(v[3], obj[key]);\n      }\n      return;\n    case 'PROJECTEDCRS':\n    case 'PROJCRS':\n    case 'GEOGCS':\n    case 'GEOCCS':\n    case 'PROJCS':\n    case 'LOCAL_CS':\n    case 'GEODCRS':\n    case 'GEODETICCRS':\n    case 'GEODETICDATUM':\n    case 'EDATUM':\n    case 'ENGINEERINGDATUM':\n    case 'VERT_CS':\n    case 'VERTCRS':\n    case 'VERTICALCRS':\n    case 'COMPD_CS':\n    case 'COMPOUNDCRS':\n    case 'ENGINEERINGCRS':\n    case 'ENGCRS':\n    case 'FITTED_CS':\n    case 'LOCAL_DATUM':\n    case 'DATUM':\n      v[0] = ['name', v[0]];\n      mapit(obj, key, v);\n      return;\n    default:\n      i = -1;\n      while (++i < v.length) {\n        if (!Array.isArray(v[i])) {\n          return sExpr(v, obj[key]);\n        }\n      }\n      return mapit(obj, key, v);\n  }\n}\n","var D2R = 0.01745329251994329577;\nimport parser from './parser';\nimport {sExpr} from './process';\n\n\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  } else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  } else {\n    if (typeof wkt.PROJECTION === 'object') {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    } else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.AXIS) {\n    var axisOrder = '';\n    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {\n      var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];\n      if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {\n        axisOrder += 'n';\n      } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {\n        axisOrder += 's';\n      } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {\n        axisOrder += 'e';\n      } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {\n        axisOrder += 'w';\n      }\n    }\n    if (axisOrder.length === 2) {\n      axisOrder += 'u';\n    }\n    if (axisOrder.length === 3) {\n      wkt.axis = axisOrder;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = wkt.UNIT.convert;\n      }\n    }\n  }\n  var geogcs = wkt.GEOGCS;\n  if (wkt.type === 'GEOGCS') {\n    geogcs = wkt;\n  }\n  if (geogcs) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (geogcs.DATUM) {\n      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n    } else {\n      wkt.datumCode = geogcs.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = 'rnb72';\n    }\n    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = geogcs.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n    }\n\n    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {\n      wkt.datum_params = geogcs.DATUM.TOWGS84;\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = 'osgb36';\n    }\n    if (~wkt.datumCode.indexOf('osni_1952')) {\n      wkt.datumCode = 'osni52';\n    }\n    if (~wkt.datumCode.indexOf('tm65')\n      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n      wkt.datumCode = 'ire65';\n    }\n    if (wkt.datumCode === 'ch1903+') {\n      wkt.datumCode = 'ch1903';\n    }\n    if (~wkt.datumCode.indexOf('israel')) {\n      wkt.datumCode = 'isr93';\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return input * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_1', 'Latitude of 1st standard parallel'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['standard_parallel_2', 'Latitude of 2nd standard parallel'],\n    ['false_easting', 'False_Easting'],\n    ['false_easting', 'False easting'],\n    ['false-easting', 'Easting at false origin'],\n    ['false_northing', 'False_Northing'],\n    ['false_northing', 'False northing'],\n    ['false_northing', 'Northing at false origin'],\n    ['central_meridian', 'Central_Meridian'],\n    ['central_meridian', 'Longitude of natural origin'],\n    ['central_meridian', 'Longitude of false origin'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['latitude_of_origin', 'Latitude of natural origin'],\n    ['latitude_of_origin', 'Latitude of false origin'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_Of_Center'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longitude_of_center', 'Longitude_of_center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['azimuth', 'Azimuth'],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  }\n}\nexport default function(wkt) {\n  var lisp = parser(wkt);\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj);\n  return obj;\n}\n","export default function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n}\n","import globals from './global';\nimport parseProj from './projString';\nimport wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nexport default defs;\n","import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\nvar codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}","export default function(x) {\n  return x<0 ? -1 : 1;\n}","\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n","export function init() {\n  //no-op for longlat\n}\n\nfunction identity(pt) {\n  return pt;\n}\nexport {identity as forward};\nexport {identity as inverse};\nexport var names = [\"longlat\", \"identity\"];\nexport default {\n  init: init,\n  forward: identity,\n  inverse: identity,\n  names: names\n};\n","import merc from \"./projections/merc\";\nimport longlat from \"./projections/longlat\";\nvar projs = [merc, longlat];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexport {add};\n\nexport function get(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n}\n\nexport function start() {\n  projs.forEach(add);\n}\nexport default {\n  start: start,\n  add: add,\n  get: get\n};\n","import msfnz from '../common/msfnz';\n\nimport adjust_lon from '../common/adjust_lon';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\nexport function init() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n}\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n}\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexport function inverse(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","var exports = {};\nexport {exports as default};\nexports.wgs84 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"WGS84\",\n  datumName: \"WGS84\"\n};\n\nexports.ch1903 = {\n  towgs84: \"674.374,15.056,405.346\",\n  ellipse: \"bessel\",\n  datumName: \"swiss\"\n};\n\nexports.ggrs87 = {\n  towgs84: \"-199.87,74.79,246.62\",\n  ellipse: \"GRS80\",\n  datumName: \"Greek_Geodetic_Reference_System_1987\"\n};\n\nexports.nad83 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"GRS80\",\n  datumName: \"North_American_Datum_1983\"\n};\n\nexports.nad27 = {\n  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n  ellipse: \"clrk66\",\n  datumName: \"North_American_Datum_1927\"\n};\n\nexports.potsdam = {\n  towgs84: \"598.1,73.7,418.2,0.202,0.045,-2.455,6.7\",\n  ellipse: \"bessel\",\n  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n};\n\nexports.carthage = {\n  towgs84: \"-263.0,6.0,431.0\",\n  ellipse: \"clark80\",\n  datumName: \"Carthage 1934 Tunisia\"\n};\n\nexports.hermannskogel = {\n  towgs84: \"577.326,90.129,463.919,5.137,1.474,5.297,2.4232\",\n  ellipse: \"bessel\",\n  datumName: \"Hermannskogel\"\n};\n\nexports.osni52 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"airy\",\n  datumName: \"Irish National\"\n};\n\nexports.ire65 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"mod_airy\",\n  datumName: \"Ireland 1965\"\n};\n\nexports.rassadiran = {\n  towgs84: \"-133.63,-157.5,-158.62\",\n  ellipse: \"intl\",\n  datumName: \"Rassadiran\"\n};\n\nexports.nzgd49 = {\n  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n  ellipse: \"intl\",\n  datumName: \"New Zealand Geodetic Datum 1949\"\n};\n\nexports.osgb36 = {\n  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n  ellipse: \"airy\",\n  datumName: \"Airy 1830\"\n};\n\nexports.s_jtsk = {\n  towgs84: \"589,76,480\",\n  ellipse: 'bessel',\n  datumName: 'S-JTSK (Ferro)'\n};\n\nexports.beduaram = {\n  towgs84: '-106,-87,188',\n  ellipse: 'clrk80',\n  datumName: 'Beduaram'\n};\n\nexports.gunung_segara = {\n  towgs84: '-403,684,41',\n  ellipse: 'bessel',\n  datumName: 'Gunung Segara Jakarta'\n};\n\nexports.rnb72 = {\n  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n  ellipse: \"intl\",\n  datumName: \"Reseau National Belge 1972\"\n};\n","/**\n * Resources for details of NTv2 file formats:\n * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf\n * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm\n */\n\nvar loadedNadgrids = {};\n\n/**\n * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file\n * as an ArrayBuffer.\n */\nexport default function nadgrid(key, data) {\n  var view = new DataView(data);\n  var isLittleEndian = detectLittleEndian(view);\n  var header = readHeader(view, isLittleEndian);\n  if (header.nSubgrids > 1) {\n    console.log('Only single NTv2 subgrids are currently supported, subsequent sub grids are ignored');\n  }\n  var subgrids = readSubgrids(view, header, isLittleEndian);\n  var nadgrid = {header: header, subgrids: subgrids};\n  loadedNadgrids[key] = nadgrid;\n  return nadgrid;\n}\n\n/**\n * Given a proj4 value for nadgrids, return an array of loaded grids\n */\nexport function getNadgrids(nadgrids) {\n  // Format details: http://proj.maptools.org/gen_parms.html\n  if (nadgrids === undefined) { return null; }\n  var grids = nadgrids.split(',');\n  return grids.map(parseNadgridString);\n}\n\nfunction parseNadgridString(value) {\n  if (value.length === 0) {\n    return null;\n  }\n  var optional = value[0] === '@';\n  if (optional) {\n    value = value.slice(1);\n  }\n  if (value === 'null') {\n    return {name: 'null', mandatory: !optional, grid: null, isNull: true};\n  }\n  return {\n    name: value,\n    mandatory: !optional,\n    grid: loadedNadgrids[value] || null,\n    isNull: false\n  };\n}\n\nfunction secondsToRadians(seconds) {\n  return (seconds / 3600) * Math.PI / 180;\n}\n\nfunction detectLittleEndian(view) {\n  var nFields = view.getInt32(8, false);\n  if (nFields === 11) {\n    return false;\n  }\n  nFields = view.getInt32(8, true);\n  if (nFields !== 11) {\n    console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');\n  }\n  return true;\n}\n\nfunction readHeader(view, isLittleEndian) {\n  return {\n    nFields: view.getInt32(8, isLittleEndian),\n    nSubgridFields: view.getInt32(24, isLittleEndian),\n    nSubgrids: view.getInt32(40, isLittleEndian),\n    shiftType: decodeString(view, 56, 56 + 8).trim(),\n    fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),\n    fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),\n    toSemiMajorAxis: view.getFloat64(152, isLittleEndian),\n    toSemiMinorAxis: view.getFloat64(168, isLittleEndian),\n  };\n}\n\nfunction decodeString(view, start, end) {\n  return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));\n}\n\nfunction readSubgrids(view, header, isLittleEndian) {\n  var gridOffset = 176;\n  var grids = [];\n  for (var i = 0; i < header.nSubgrids; i++) {\n    var subHeader = readGridHeader(view, gridOffset, isLittleEndian);\n    var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);\n    var lngColumnCount = Math.round(\n      1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);\n    var latColumnCount = Math.round(\n      1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);\n    // Proj4 operates on radians whereas the coordinates are in seconds in the grid\n    grids.push({\n      ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],\n      del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],\n      lim: [lngColumnCount, latColumnCount],\n      count: subHeader.gridNodeCount,\n      cvs: mapNodes(nodes)\n    });\n  }\n  return grids;\n}\n\nfunction mapNodes(nodes) {\n  return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});\n}\n\nfunction readGridHeader(view, offset, isLittleEndian) {\n  return {\n    name: decodeString(view, offset + 8, offset + 16).trim(),\n    parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),\n    lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),\n    upperLatitude: view.getFloat64(offset + 88, isLittleEndian),\n    lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),\n    upperLongitude: view.getFloat64(offset + 120, isLittleEndian),\n    latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),\n    longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),\n    gridNodeCount: view.getInt32(offset + 168, isLittleEndian)\n  };\n}\n\nfunction readGridNodes(view, offset, gridHeader, isLittleEndian) {\n  var nodesOffset = offset + 176;\n  var gridRecordLength = 16;\n  var gridShiftRecords = [];\n  for (var i = 0; i < gridHeader.gridNodeCount; i++) {\n    var record = {\n      latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),\n      longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),\n      latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),\n      longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),\n    };\n    gridShiftRecords.push(record);\n  }\n  return gridShiftRecords;\n}\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\nimport {getNadgrids} from \"./nadgrid\";\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this\n\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var nadgrids = getNadgrids(json.nadgrids);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,\n    nadgrids);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calculated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","import {PJD_3PARAM, PJD_7PARAM, PJD_GRIDSHIFT, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  if (nadgrids) {\n    out.datum_type = PJD_GRIDSHIFT;\n    out.grids = nadgrids;\n  }\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","import {\n  PJD_3PARAM,\n  PJD_7PARAM,\n  PJD_GRIDSHIFT,\n  PJD_NODATUM,\n  R2D,\n  SRS_WGS84_ESQUARED,\n  SRS_WGS84_SEMIMAJOR, SRS_WGS84_SEMIMINOR\n} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nimport adjust_lon from \"./common/adjust_lon\";\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n  var source_a = source.a;\n  var source_es = source.es;\n  if (source.datum_type === PJD_GRIDSHIFT) {\n    var gridShiftCode = applyGridShift(source, false, point);\n    if (gridShiftCode !== 0) {\n      return undefined;\n    }\n    source_a = SRS_WGS84_SEMIMAJOR;\n    source_es = SRS_WGS84_ESQUARED;\n  }\n\n  var dest_a = dest.a;\n  var dest_b = dest.b;\n  var dest_es = dest.es;\n  if (dest.datum_type === PJD_GRIDSHIFT) {\n    dest_a = SRS_WGS84_SEMIMAJOR;\n    dest_b = SRS_WGS84_SEMIMINOR;\n    dest_es = SRS_WGS84_ESQUARED;\n  }\n\n  // Do we need to go through geocentric coordinates?\n  if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source_es, source_a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  point = geocentricToGeodetic(point, dest_es, dest_a, dest_b);\n\n  if (dest.datum_type === PJD_GRIDSHIFT) {\n    var destGridShiftResult = applyGridShift(dest, true, point);\n    if (destGridShiftResult !== 0) {\n      return undefined;\n    }\n  }\n\n  return point;\n}\n\nexport function applyGridShift(source, inverse, point) {\n  if (source.grids === null || source.grids.length === 0) {\n    console.log('Grid shift grids not found');\n    return -1;\n  }\n  var input = {x: -point.x, y: point.y};\n  var output = {x: Number.NaN, y: Number.NaN};\n  var onlyMandatoryGrids = false;\n  var attemptedGrids = [];\n  for (var i = 0; i < source.grids.length; i++) {\n    var grid = source.grids[i];\n    attemptedGrids.push(grid.name);\n    if (grid.isNull) {\n      output = input;\n      break;\n    }\n    onlyMandatoryGrids = grid.mandatory;\n    if (grid.grid === null) {\n      if (grid.mandatory) {\n        console.log(\"Unable to find mandatory grid '\" + grid.name + \"'\");\n        return -1;\n      }\n      continue;\n    }\n    var subgrid = grid.grid.subgrids[0];\n    // skip tables that don't match our point at all\n    var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 10000.0;\n    var minX = subgrid.ll[0] - epsilon;\n    var minY = subgrid.ll[1] - epsilon;\n    var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;\n    var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;\n    if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x ) {\n      continue;\n    }\n    output = applySubgridShift(input, inverse, subgrid);\n    if (!isNaN(output.x)) {\n      break;\n    }\n  }\n  if (isNaN(output.x)) {\n    console.log(\"Failed to find a grid shift table for location '\"+\n      -input.x * R2D + \" \" + input.y * R2D + \" tried: '\" + attemptedGrids + \"'\");\n    return -1;\n  }\n  point.x = -output.x;\n  point.y = output.y;\n  return 0;\n}\n\nfunction applySubgridShift(pin, inverse, ct) {\n  var val = {x: Number.NaN, y: Number.NaN};\n  if (isNaN(pin.x)) { return val; }\n  var tb = {x: pin.x, y: pin.y};\n  tb.x -= ct.ll[0];\n  tb.y -= ct.ll[1];\n  tb.x = adjust_lon(tb.x - Math.PI) + Math.PI;\n  var t = nadInterpolate(tb, ct);\n  if (inverse) {\n    if (isNaN(t.x)) {\n      return val;\n    }\n    t.x = tb.x - t.x;\n    t.y = tb.y - t.y;\n    var i = 9, tol = 1e-12;\n    var dif, del;\n    do {\n      del = nadInterpolate(t, ct);\n      if (isNaN(del.x)) {\n        console.log(\"Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.\");\n        break;\n      }\n      dif = {x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y)};\n      t.x += dif.x;\n      t.y += dif.y;\n    } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);\n    if (i < 0) {\n      console.log(\"Inverse grid shift iterator failed to converge.\");\n      return val;\n    }\n    val.x = adjust_lon(t.x + ct.ll[0]);\n    val.y = t.y + ct.ll[1];\n  } else {\n    if (!isNaN(t.x)) {\n      val.x = pin.x + t.x;\n      val.y = pin.y + t.y;\n    }\n  }\n  return val;\n}\n\nfunction nadInterpolate(pin, ct) {\n  var t = {x: pin.x / ct.del[0], y: pin.y / ct.del[1]};\n  var indx = {x: Math.floor(t.x), y: Math.floor(t.y)};\n  var frct = {x: t.x - 1.0 * indx.x, y: t.y - 1.0 * indx.y};\n  var val= {x: Number.NaN, y: Number.NaN};\n  var inx;\n  if (indx.x < 0 || indx.x >= ct.lim[0]) {\n    return val;\n  }\n  if (indx.y < 0 || indx.y >= ct.lim[1]) {\n    return val;\n  }\n  inx = (indx.y * ct.lim[0]) + indx.x;\n  var f00 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx++;\n  var f10= {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx += ct.lim[0];\n  var f11 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  inx--;\n  var f01 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};\n  var m11 = frct.x * frct.y, m10 = frct.x * (1.0 - frct.y),\n    m00 = (1.0 - frct.x) * (1.0 - frct.y), m01 = (1.0 - frct.x) * frct.y;\n  val.x = (m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x);\n  val.y = (m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y);\n  return val;\n}\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      if (\"ew\".indexOf(crs.axis[i]) !== -1) {\n        t = 'x';\n      } else {\n        t = 'y';\n      }\n\n    }\n    else if (i === 1) {\n      v = yin;\n      if (\"ns\".indexOf(crs.axis[i]) !== -1) {\n        t = 'y';\n      } else {\n        t = 'x';\n      }\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point, enforceAxis) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  }\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point, enforceAxis);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (enforceAxis && source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R,\n      z: point.z || 0\n    };\n  } else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter,\n        z: point.z || 0\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n    if (!point) {\n      return;\n    }\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n  if (!point) {\n    return;\n  }\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y,\n      z: point.z || 0\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D,\n      z: point.z || 0\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter,\n        z: point.z || 0\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (enforceAxis && dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  return point;\n}\n","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords, enforceAxis) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords, enforceAxis) || {x: NaN, y: NaN};\n    if (coords.length > 2) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (typeof transformedArray.z === 'number') {\n          return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.splice(3));\n        } else {\n          return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.splice(3));\n        }\n      } else {\n        return [transformedArray.x, transformedArray.y].concat(coords.splice(2));\n      }\n    } else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  } else {\n    out = transform(from, to, coords, enforceAxis);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {\n        if (key === 'x' || key === 'y' || key === 'z') {\n          return;\n        }\n      } else {\n        if (key === 'x' || key === 'y') {\n          return;\n        }\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\n\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  } else {\n    obj = {\n      forward: function (coords, enforceAxis) {\n        return transformer(fromProj, toProj, coords, enforceAxis);\n      },\n      inverse: function (coords, enforceAxis) {\n        return transformer(toProj, fromProj, coords, enforceAxis);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;","\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n","import {toPoint, forward} from 'mgrs';\n\nfunction Point(x, y, z) {\n  if (!(this instanceof Point)) {\n    return new Point(x, y, z);\n  }\n  if (Array.isArray(x)) {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2] || 0.0;\n  } else if(typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z || 0.0;\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\n    var coords = x.split(',');\n    this.x = parseFloat(coords[0], 10);\n    this.y = parseFloat(coords[1], 10);\n    this.z = parseFloat(coords[2], 10) || 0.0;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z || 0.0;\n  }\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n}\n\nPoint.fromMGRS = function(mgrsStr) {\n  return new Point(toPoint(mgrsStr));\n};\nPoint.prototype.toMGRS = function(accuracy) {\n  return forward([this.x, this.y], accuracy);\n};\nexport default Point;\n","var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}","export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}","import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n","// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Fast_Transverse_Mercator\", \"Fast Transverse Mercator\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}","export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n","import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n","export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n","export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n","import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}","// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport tmerc from '../projections/tmerc';\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (!this.approx && (isNaN(this.es) || this.es <= 0)) {\n    throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION[\"Fast_Transverse_Mercator\"] in the WKT.');\n  }\n  if (this.approx) {\n    // When '+approx' is set, use tmerc instead\n    tmerc.init.apply(this);\n    this.forward = tmerc.forward;\n    this.inverse = tmerc.inverse;\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\", \"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n","import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n","import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n","export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}","import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n","/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport { D2R, EPSLN, HALF_PI, TWO_PI, FORTPI } from '../constants/values';\n\nvar TOL = 1e-7;\n\nfunction isTypeA(P) {\n  var typeAProjections = ['Hotine_Oblique_Mercator','Hotine_Oblique_Mercator_Azimuth_Natural_Origin'];\n  var projectionName = typeof P.PROJECTION === \"object\" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;\n  \n  return 'no_uoff' in P || 'no_off' in P || typeAProjections.indexOf(projectionName) !== -1;\n}\n\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {  \n  var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0,\n    gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0, AB;\n  \n  // only Type A uses the no_off or no_uoff property\n  // https://github.com/OSGeo/proj.4/issues/104\n  this.no_off = isTypeA(this);\n  this.no_rot = 'no_rot' in this;\n  \n  var alp = false;\n  if (\"alpha\" in this) {\n    alp = true;\n  }\n\n  var gam = false;\n  if (\"rectified_grid_angle\" in this) {\n    gam = true;\n  }\n\n  if (alp) {\n    alpha_c = this.alpha;\n  }\n  \n  if (gam) {\n    gamma = (this.rectified_grid_angle * D2R);\n  }\n  \n  if (alp || gam) {\n    lamc = this.longc;\n  } else {\n    lam1 = this.long1;\n    phi1 = this.lat1;\n    lam2 = this.long2;\n    phi2 = this.lat2;\n    \n    if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL ||\n        Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL ||\n        Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {\n      throw new Error();\n    }\n  }\n  \n  var one_es = 1.0 - this.es;\n  com = Math.sqrt(one_es);\n  \n  if (Math.abs(this.lat0) > EPSLN) {\n    sinph0 = Math.sin(this.lat0);\n    cosph0 = Math.cos(this.lat0);\n    con = 1 - this.es * sinph0 * sinph0;\n    this.B = cosph0 * cosph0;\n    this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);\n    this.A = this.B * this.k0 * com / con;\n    D = this.B * com / (cosph0 * Math.sqrt(con));\n    F = D * D -1;\n    \n    if (F <= 0) {\n      F = 0;\n    } else {\n      F = Math.sqrt(F);\n      if (this.lat0 < 0) {\n        F = -F;\n      }\n    }\n    \n    this.E = F += D;\n    this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);\n  } else {\n    this.B = 1 / com;\n    this.A = this.k0;\n    this.E = D = F = 1;\n  }\n  \n  if (alp || gam) {\n    if (alp) {\n      gamma0 = Math.asin(Math.sin(alpha_c) / D);\n      if (!gam) {\n        gamma = alpha_c;\n      }\n    } else {\n      gamma0 = gamma;\n      alpha_c = Math.asin(D * Math.sin(gamma0));\n    }\n    this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;\n  } else {\n    H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);\n    L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);\n    F = this.E / H;\n    p = (L - H) / (L + H);\n    J = this.E * this.E;\n    J = (J - L * H) / (J + L * H);\n    con = lam1 - lam2;\n    \n    if (con < -Math.pi) {\n      lam2 -=TWO_PI;\n    } else if (con > Math.pi) {\n      lam2 += TWO_PI;\n    }\n    \n    this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);\n    gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));\n    gamma = alpha_c = Math.asin(D * Math.sin(gamma0));\n  }\n  \n  this.singam = Math.sin(gamma0);\n  this.cosgam = Math.cos(gamma0);\n  this.sinrot = Math.sin(gamma);\n  this.cosrot = Math.cos(gamma);\n  \n  this.rB = 1 / this.B;\n  this.ArB = this.A * this.rB;\n  this.BrA = 1 / this.ArB;\n  AB = this.A * this.B;\n  \n  if (this.no_off) {\n    this.u_0 = 0;\n  } else {\n    this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));\n    \n    if (this.lat0 < 0) {\n      this.u_0 = - this.u_0;\n    }  \n  }\n    \n  F = 0.5 * gamma0;\n  this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));\n  this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));\n}\n\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var coords = {};\n  var S, T, U, V, W, temp, u, v;\n  p.x = p.x - this.lam0;\n  \n  if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {\n    W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);\n    \n    temp = 1 / W;\n    S = 0.5 * (W - temp);\n    T = 0.5 * (W + temp);\n    V = Math.sin(this.B * p.x);\n    U = (S * this.singam - V * this.cosgam) / T;\n        \n    if (Math.abs(Math.abs(U) - 1.0) < EPSLN) {\n      throw new Error();\n    }\n    \n    v = 0.5 * this.ArB * Math.log((1 - U)/(1 + U));\n    temp = Math.cos(this.B * p.x);\n    \n    if (Math.abs(temp) < TOL) {\n      u = this.A * p.x;\n    } else {\n      u = this.ArB * Math.atan2((S * this.cosgam + V * this.singam), temp);\n    }    \n  } else {\n    v = p.y > 0 ? this.v_pole_n : this.v_pole_s;\n    u = this.ArB * p.y;\n  }\n     \n  if (this.no_rot) {\n    coords.x = u;\n    coords.y = v;\n  } else {\n    u -= this.u_0;\n    coords.x = v * this.cosrot + u * this.sinrot;\n    coords.y = u * this.cosrot - v * this.sinrot;\n  }\n  \n  coords.x = (this.a * coords.x + this.x0);\n  coords.y = (this.a * coords.y + this.y0);\n  \n  return coords;\n}\n\nexport function inverse(p) {\n  var u, v, Qp, Sp, Tp, Vp, Up;\n  var coords = {};\n  \n  p.x = (p.x - this.x0) * (1.0 / this.a);\n  p.y = (p.y - this.y0) * (1.0 / this.a);\n\n  if (this.no_rot) {\n    v = p.y;\n    u = p.x;\n  } else {\n    v = p.x * this.cosrot - p.y * this.sinrot;\n    u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;\n  }\n  \n  Qp = Math.exp(-this.BrA * v);\n  Sp = 0.5 * (Qp - 1 / Qp);\n  Tp = 0.5 * (Qp + 1 / Qp);\n  Vp = Math.sin(this.BrA * u);\n  Up = (Vp * this.cosgam + Sp * this.singam) / Tp;\n  \n  if (Math.abs(Math.abs(Up) - 1) < EPSLN) {\n    coords.x = 0;\n    coords.y = Up < 0 ? -HALF_PI : HALF_PI;\n  } else {\n    coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));\n    coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));\n    \n    if (coords.y === Infinity) {\n      throw new Error();\n    }\n        \n    coords.x = -this.rB * Math.atan2((Sp * this.cosgam - Vp * this.singam), Math.cos(this.BrA * u));\n  }\n  \n  coords.x += this.lam0;\n  \n  return coords;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"Oblique_Mercator\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n  \n  //double lat0;                    /* the reference latitude               */\n  //double long0;                   /* the reference longitude              */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n  \n  //the above value can be set with proj4.defs\n  //example: proj4.defs(\"EPSG:2154\",\"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\");\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\n  \"Lambert Tangential Conformal Conic Projection\",\n  \"Lambert_Conformal_Conic\",\n  \"Lambert_Conformal_Conic_1SP\",\n  \"Lambert_Conformal_Conic_2SP\",\n  \"lcc\",\n  \"Lambert Conic Conformal (1SP)\",\n  \"Lambert Conic Conformal (2SP)\"\n];\n\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}","export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}","export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}","export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}","export default function(x) {\n  return (x * x * x * (35 / 3072));\n}","export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}","import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n","export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}","import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}","\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.lat0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = this.long0;\n        p.y = this.lat0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n","export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}","import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c ? c / Math.sin(c) : 1;\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      sinpsi = Math.sin(psi);\n      lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n","// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {\n    geodeticToGeocentric,\n    geocentricToGeodetic\n} from '../datumUtils';\n\nexport function init() {\n    this.name = 'geocent';\n\n}\n\nexport function forward(p) {\n    var point = geodeticToGeocentric(p, this.es, this.a);\n    return point;\n}\n\nexport function inverse(p) {\n    var point = geocentricToGeodetic(p, this.es, this.a, this.b);\n    return point;\n}\n\nexport var names = [\"Geocentric\", 'geocentric', \"geocent\", \"Geocent\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names\n};","\nvar mode = {\n  N_POLE: 0,\n  S_POLE: 1,\n  EQUIT: 2,\n  OBLIQ: 3\n};\n\nimport { D2R, HALF_PI, EPSLN } from \"../constants/values\";\nimport hypot from \"../common/hypot\";\n\nvar params = {\n  h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7\n  azi:   { def: 0, num: true, degrees: true }, // default is North\n  tilt:  { def: 0, num: true, degrees: true }, // default is Nadir\n  long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic\n  lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic\n};\n\nexport function init() {\n  Object.keys(params).forEach(function (p) {\n    if (typeof this[p] === \"undefined\") {\n      this[p] = params[p].def;\n    } else if (params[p].num && isNaN(this[p])) {\n      throw new Error(\"Invalid parameter value, must be numeric \" + p + \" = \" + this[p]);\n    } else if (params[p].num) {\n      this[p] = parseFloat(this[p]);\n    }\n    if (params[p].degrees) {\n      this[p] = this[p] * D2R;\n    }\n  }.bind(this));\n\n  if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {\n    this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;\n  } else if (Math.abs(this.lat0) < EPSLN) {\n    this.mode = mode.EQUIT;\n  } else {\n    this.mode = mode.OBLIQ;\n    this.sinph0 = Math.sin(this.lat0);\n    this.cosph0 = Math.cos(this.lat0);\n  }\n\n  this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius\n\n  if (this.pn1 <= 0 || this.pn1 > 1e10) {\n    throw new Error(\"Invalid height\");\n  }\n  \n  this.p = 1 + this.pn1;\n  this.rp = 1 / this.p;\n  this.h1 = 1 / this.pn1;\n  this.pfact = (this.p + 1) * this.h1;\n  this.es = 0;\n\n  var omega = this.tilt;\n  var gamma = this.azi;\n  this.cg = Math.cos(gamma);\n  this.sg = Math.sin(gamma);\n  this.cw = Math.cos(omega);\n  this.sw = Math.sin(omega);\n}\n\nexport function forward(p) {\n  p.x -= this.long0;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var coslam = Math.cos(p.x);\n  var x, y;\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y = cosphi * coslam;\n      break;\n    case mode.S_POLE:\n      y = -sinphi;\n      break;\n    case mode.N_POLE:\n      y = sinphi;\n      break;\n  }\n  y = this.pn1 / (this.p - y);\n  x = y * cosphi * Math.sin(p.x);\n\n  switch (this.mode) {\n    case mode.OBLIQ:\n      y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n      break;\n    case mode.EQUIT:\n      y *= sinphi;\n      break;\n    case mode.N_POLE:\n      y *= -(cosphi * coslam);\n      break;\n    case mode.S_POLE:\n      y *= cosphi * coslam;\n      break;\n  }\n\n  // Tilt \n  var yt, ba;\n  yt = y * this.cg + x * this.sg;\n  ba = 1 / (yt * this.sw * this.h1 + this.cw);\n  x = (x * this.cg - y * this.sg) * this.cw * ba;\n  y = yt * ba;\n\n  p.x = x * this.a;\n  p.y = y * this.a;\n  return p;\n}\n\nexport function inverse(p) {\n  p.x /= this.a;\n  p.y /= this.a;\n  var r = { x: p.x, y: p.y };\n\n  // Un-Tilt\n  var bm, bq, yt;\n  yt = 1 / (this.pn1 - p.y * this.sw);\n  bm = this.pn1 * p.x * yt;\n  bq = this.pn1 * p.y * this.cw * yt;\n  p.x = bm * this.cg + bq * this.sg;\n  p.y = bq * this.cg - bm * this.sg;\n\n  var rh = hypot(p.x, p.y);\n  if (Math.abs(rh) < EPSLN) {\n    r.x = 0;\n    r.y = p.y;\n  } else {\n    var cosz, sinz;\n    sinz = 1 - rh * rh * this.pfact;\n    sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);\n    cosz = Math.sqrt(1 - sinz * sinz);\n    switch (this.mode) {\n      case mode.OBLIQ:\n        r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);\n        p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;\n        p.x *= sinz * this.cosph0;\n        break;\n      case mode.EQUIT:\n        r.y = Math.asin(p.y * sinz / rh);\n        p.y = cosz * rh;\n        p.x *= sinz;\n        break;\n      case mode.N_POLE:\n        r.y = Math.asin(cosz);\n        p.y = -p.y;\n        break;\n      case mode.S_POLE:\n        r.y = -Math.asin(cosz);\n        break;\n    }\n    r.x = Math.atan2(p.x, p.y);\n  }\n\n  p.x = r.x + this.long0;\n  p.y = r.y;\n  return p;\n}\n\nexport var names = [\"Tilted_Perspective\", \"tpers\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import hypot from '../common/hypot';\n\nexport function init() {\n    this.flip_axis = (this.sweep === 'x' ? 1 : 0);\n    this.h = Number(this.h);\n    this.radius_g_1 = this.h / this.a;\n\n    if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {\n        throw new Error();\n    }\n\n    this.radius_g = 1.0 + this.radius_g_1;\n    this.C = this.radius_g * this.radius_g - 1.0;\n\n    if (this.es !== 0.0) {\n        var one_es = 1.0 - this.es;\n        var rone_es = 1 / one_es;\n\n        this.radius_p = Math.sqrt(one_es);\n        this.radius_p2 = one_es;\n        this.radius_p_inv2 = rone_es;\n\n        this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.\n    } else {\n        this.radius_p = 1.0;\n        this.radius_p2 = 1.0;\n        this.radius_p_inv2 = 1.0;\n\n        this.shape = 'sphere';  // Use as a condition in the forward and inverse functions.\n    }\n\n    if (!this.title) {\n        this.title = \"Geostationary Satellite View\";\n    }\n}\n\nfunction forward(p) {\n    var lon = p.x;\n    var lat = p.y;\n    var tmp, v_x, v_y, v_z;\n    lon = lon - this.long0;\n\n    if (this.shape === 'ellipse') {\n        lat = Math.atan(this.radius_p2 * Math.tan(lat));\n        var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));\n\n        v_x = r * Math.cos(lon) * Math.cos(lat);\n        v_y = r * Math.sin(lon) * Math.cos(lat);\n        v_z = r * Math.sin(lat);\n\n        if (((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2) < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        tmp = this.radius_g - v_x;\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    } else if (this.shape === 'sphere') {\n        tmp = Math.cos(lat);\n        v_x = Math.cos(lon) * tmp;\n        v_y = Math.sin(lon) * tmp;\n        v_z = Math.sin(lat);\n        tmp = this.radius_g - v_x;\n\n        if (this.flip_axis) {\n            p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));\n            p.y = this.radius_g_1 * Math.atan(v_z / tmp);\n        } else {\n            p.x = this.radius_g_1 * Math.atan(v_y / tmp);\n            p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));\n        }\n    }\n    p.x = p.x * this.a;\n    p.y = p.y * this.a;\n    return p;\n}\n\nfunction inverse(p) {\n    var v_x = -1.0;\n    var v_y = 0.0;\n    var v_z = 0.0;\n    var a, b, det, k;\n\n    p.x = p.x / this.a;\n    p.y = p.y / this.a;\n\n    if (this.shape === 'ellipse') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);\n        }\n\n        var v_zp = v_z / this.radius_p;\n        a = v_y * v_y + v_zp * v_zp + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n        p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));\n    } else if (this.shape === 'sphere') {\n        if (this.flip_axis) {\n            v_z = Math.tan(p.y / this.radius_g_1);\n            v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);\n        } else {\n            v_y = Math.tan(p.x / this.radius_g_1);\n            v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);\n        }\n\n        a = v_y * v_y + v_z * v_z + v_x * v_x;\n        b = 2 * this.radius_g * v_x;\n        det = (b * b) - 4 * a * this.C;\n        if (det < 0.0) {\n            p.x = Number.NaN;\n            p.y = Number.NaN;\n            return p;\n        }\n\n        k = (-b - Math.sqrt(det)) / (2.0 * a);\n        v_x = this.radius_g + k * v_x;\n        v_y *= k;\n        v_z *= k;\n\n        p.x = Math.atan2(v_y, v_x);\n        p.y = Math.atan(v_z * Math.cos(p.x) / v_x);\n    }\n    p.x = p.x + this.long0;\n    return p;\n}\n\nexport var names = [\"Geostationary Satellite View\", \"Geostationary_Satellite\", \"geos\"];\nexport default {\n    init: init,\n    forward: forward,\n    inverse: inverse,\n    names: names,\n};\n\n","import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nimport geocent from './lib/projections/geocent';\nimport tpers from './lib/projections/tpers';\nimport geos from './lib/projections/geos';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n  proj4.Proj.projections.add(geocent);\n  proj4.Proj.projections.add(tpers);\n  proj4.Proj.projections.add(geos);\n}","import proj4 from './core';\nimport Proj from \"./Proj\";\nimport Point from \"./Point\";\nimport common from \"./common/toPoint\";\nimport defs from \"./defs\";\nimport nadgrid from \"./nadgrid\";\nimport transform from \"./transform\";\nimport mgrs from \"mgrs\";\nimport includedProjections from \"../projs\";\n\nproj4.defaultDatum = 'WGS84'; //default datum\nproj4.Proj = Proj;\nproj4.WGS84 = new proj4.Proj('WGS84');\nproj4.Point = Point;\nproj4.toPoint = common;\nproj4.defs = defs;\nproj4.nadgrid = nadgrid;\nproj4.transform = transform;\nproj4.mgrs = mgrs;\nproj4.version = '__VERSION__';\nincludedProjections(proj4);\nexport default proj4;\n","import proj4 from 'proj4'\r\nimport EPSG from 'epsg-index/all.json'\r\n\r\n// These strings in a shapefile .PRJ will trigger the following EPSG codes.\r\n// Add your own to this list!\r\n\r\nconst lookups = {\r\n  NAD_1983_StatePlane_California_III_FIPS_0403_Feet: 'EPSG:2227',\r\n  NAD_1983_UTM_Zone_10N: 'EPSG:26910',\r\n  D_North_American_1983: 'EPSG:4326',\r\n  DHDN_3_degree_Gauss_Kruger_zone_4: 'EPSG:31468',\r\n  ETRS89_UTM_zone_32N: 'EPSG:25832',\r\n  ETRS89_UTM_zone_33N: 'EPSG:25833',\r\n  Hartebeesthoek94: 'EPSG:2048',\r\n  UTM_Zone_32N: 'EPSG:25832',\r\n}\r\n\r\n// Set up ALL coordinate systems in 'epsg' repository\r\nconst allEPSGs = Object.entries(EPSG).map(epsg => [`EPSG:${epsg[0]}`, epsg[1].proj4]) as any[]\r\nproj4.defs(allEPSGs)\r\n\r\n// // Add all standard MATSim projects from TransformationFactory to proj4\r\nproj4.defs([\r\n  [\r\n    // south africa\r\n    'EPSG:2048',\r\n    '+proj=tmerc +lat_0=0 +lon_0=19 +k=1 +x_0=0 +y_0=0 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs',\r\n  ],\r\n  [\r\n    // berlin\r\n    'EPSG:31468',\r\n    '+proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +datum=potsdam +units=m +no_defs',\r\n  ],\r\n  [\r\n    // cottbus\r\n    'EPSG:25833',\r\n    '+proj=utm +zone=33 +ellps=GRS80 +units=m +no_defs',\r\n  ],\r\n  [\r\n    // ruhr\r\n    'EPSG:25832',\r\n    '+proj=utm +zone=32 +ellps=GRS80 +units=m +no_defs',\r\n  ],\r\n])\r\n\r\n// aliases for existing definitions here\r\nproj4.defs('DK4', proj4.defs('EPSG:31468'))\r\nproj4.defs('GK4', proj4.defs('EPSG:31468'))\r\n\r\n// aliases for common cities\r\nproj4.defs('Cottbus', proj4.defs('EPSG:25833'))\r\nproj4.defs('Berlin', proj4.defs('EPSG:31468'))\r\nproj4.defs('South Africa', proj4.defs('EPSG:2048'))\r\n\r\nfunction toLngLat(projection: string, p: any) {\r\n  return proj4(projection, 'WGS84', p) as any\r\n}\r\n\r\n/**\r\n *\r\n * @param def Whatever random string you have for your projection\r\n * @returns EPSG code in \"EPSG:1234\" format\r\n */\r\nfunction guessProjection(definition: string) {\r\n  const favoriteEPSG = ['31468', '25832', '25833', '2048', '26910', '4326']\r\n\r\n  // Simple EPSG:xxxx code? Just return it\r\n  const epsg = /^EPSG:\\d+$/\r\n  if (epsg.test(definition.trim())) return definition.trim()\r\n\r\n  // maybe a DHDN GK4 or another known string is in there\r\n  for (const [key, epsg] of Object.entries(lookups)) {\r\n    if (definition.indexOf(key) > -1) return epsg\r\n  }\r\n\r\n  // Authority mentioned? Use it\r\n  const authority = /AUTHORITY\\[\"EPSG\",\"\\d+\"\\]/g\r\n  let matches = ''\r\n  definition\r\n    .match(authority)\r\n    ?.reverse()\r\n    .map(m => (matches += m))\r\n\r\n  if (matches) {\r\n    for (const fave of favoriteEPSG) {\r\n      if (matches.indexOf(`\"${fave}\"`) > -1) return `EPSG:${fave}`\r\n    }\r\n  }\r\n\r\n  // all else fails: return nothing\r\n  return ''\r\n}\r\n\r\nexport default { toLngLat, guessProjection, allEPSGs }\r\n"],"names":["SEC_TO_RAD","HALF_PI","Math","PI","D2R","R2D","FORTPI","TWO_PI","SPI","exports","units","ft","to_meter","ignoredChar","match","obj","key","testkey","keys","Object","lkey","toLowerCase","replace","i","length","projStr","defData","paramName","paramVal","paramOutname","self","paramObj","split","map","v","trim","filter","a","reduce","p","push","params2","proj","datum","rf","parseFloat","lat_0","lat0","lat_1","lat1","lat_2","lat2","lat_ts","lon_0","long0","lon_1","long1","lon_2","long2","alpha","gamma","rectified_grid_angle","lonc","longc","x_0","x0","y_0","y0","k_0","k0","k","b","r_a","R_A","zone","parseInt","south","utmSouth","towgs84","datum_params","unit","from_greenwich","pm","PrimeMeridian","nadgrids","datumCode","axis","legalAxis","indexOf","substr","approx","whitespace","latin","keyword","endThings","digets","Parser","text","Error","this","level","place","root","stack","currentObject","state","mapit","value","Array","isArray","unshift","thing","out","newObj","item","sExpr","shift","name","convert","prototype","readCharicter","char","test","neutral","quoted","afterquote","number","word","afterItem","pop","newObjects","output","defs2","d2r","input","wkt","wkt2","lisp","type","projName","local","PROJECTION","AXIS","axisOrder","ii","UNIT","DATUM","SPHEROID","geogcs","GEOGCS","toMeter","slice","sphere","ellps","TOWGS84","isFinite","forEach","outName","inName","cleanWKT","defs","that","arguments","def","charAt","parseProj","apply","EPSG","ESRI","IAU2000","console","log","WGS84","GOOGLE","codeWords","codes","parse","code","testObj","testDef","some","testWKT","auth","checkMercator","maybeProjStr","ext","checkProjStr","testProj","extend","destination","source","property","msfnz","eccent","sinphi","cosphi","con","sqrt","sign","x","adjust_lon","abs","tsfnz","phi","com","pow","tan","phi2z","ts","dphi","eccnth","atan","sin","identity","pt","projs","init","es","e","cos","forward","y","lon","lat","inverse","exp","names","projStore","add","len","n","projections","start","get","ellipseName","wgs84","ellipse","datumName","ch1903","ggrs87","nad83","nad27","potsdam","carthage","hermannskogel","osni52","ire65","rassadiran","nzgd49","osgb36","s_jtsk","beduaram","gunung_segara","rnb72","loadedNadgrids","parseNadgridString","optional","mandatory","grid","isNull","secondsToRadians","seconds","decodeString","view","start2","end","String","fromCharCode","Uint8Array","buffer","mapNodes","nodes","r","longitudeShift","latitudeShift","readGridHeader","offset","isLittleEndian","parent","lowerLatitude","getFloat64","upperLatitude","lowerLongitude","upperLongitude","latitudeInterval","longitudeInterval","gridNodeCount","getInt32","readGridNodes","gridHeader","nodesOffset","gridShiftRecords","record","getFloat32","latitudeAccuracy","longitudeAccuracy","Projection","srsCode","callback","error","json","parseCode","ourProj","datumDef","Datum","a2","b2","sphere_","sphere2","Ellipsoid","dc_sphere","ecc","ep2","getNadgrids","datumObj","datum_type","grids","geodeticToGeocentric","Rn","Sin_Lat","Sin2_Lat","Cos_Lat","Longitude","Latitude","Height","z","Infinity","geocentricToGeodetic","P","RR","CT","ST","RX","RK","RN","CPHI0","SPHI0","CPHI","SPHI","SDPHI","iter","genau","X","Y","Z2","atan2","checkParams","datum_transform","dest","point","compareDatums","source_a","source_es","applyGridShift","dest_a","dest_b","dest_es","Dx_BF","Dy_BF","Dz_BF","Rx_BF","Ry_BF","Rz_BF","M_BF","geocentricToWgs84","x_tmp","y_tmp","z_tmp","geocentricFromWgs84","inverse2","Number","NaN","attemptedGrids","subgrid","subgrids","epsilon","del","minX","ll","minY","maxX","lim","maxY","applySubgridShift","isNaN","pin","ct","val","tb","t","nadInterpolate","dif","inx","indx","floor","frct","f00","cvs","f10","f11","f01","m11","m10","m00","m01","adjust_axis","crs","denorm","xin","yin","zin","common","array","m","checkCoord","num","TypeError","transform","enforceAxis","wgs842","toPoint","checkSanity","checkNotWGS","transformer","from","to","coords","transformedArray","concat","splice","checkProj","oProj","proj4","fromProj","toProj","coord","single","A","I","O","V","Z","mgrs","mgrs2","bbox","UTMtoLL","decode","toUpperCase","left","bottom","right","top","forward$t","accuracy","utm2","seasting","easting","snorthing","northing","zoneNumber","zoneLetter","setParm","get100kSetForZone","setColumn","setRow","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","encode","eccPrimeSquared","N","T","C","A2","M","LongOriginRad","ZoneNumber","Lat","Long","eccSquared","LatRad","degToRad","LongRad","UTMEasting","UTMNorthing","round","getLetterDesignator","LLtoUTM","deg","radToDeg","rad","N1","T1","C12","R1","D","LongOrigin","mu","phi1Rad","e1","result","topRight","LetterDesignator","mgrsString","testChar","hunK","sb","substring","set","east100k","curCol","eastingValue","rewindMarker","getEastingFromChar","north100k","curRow","northingValue","getNorthingFromChar","getMinNorthing","remainder","accuracyBonus","sepEastingString","sepNorthingString","sep","sepEasting","sepNorthing","Point","warn","fromMGRS","mgrsStr","toMGRS","C08","pj_enfn","en","pj_mlfn","sphi","cphi","pj_inv_mlfn","arg","s","tmerc","ml0","delta_lon","sin_phi","cos_phi","al","als","c","cs","tq","ml","acos","tan_phi","d","ds","f","g","temp","h","asin","sinh","hypot","max","min","asinhy","log1py","gatg","pp","B","cos_2B","h1","h2","clens_cmplx","arg_r","arg_i","hr2","hi2","sin_arg_r","cos_arg_r","sinh_arg_i","cosh_arg_i","cosh","j","hr","hi1","hr1","hi","etmerc","cgb","cbg","utg","gtu","np","Qn","Zb","clens","Ce","Cn","sin_Cn","cos_Cn","sin_Ce","cos_Ce","tmp","utm","adjust_zone","dependsOn","srat","esinp","gauss","rc","phic0","ratexp","K","sterea","sinc0","cosc0","R2","title","sinc","cosc","cosl","rho","stere","coslat0","sinlat0","cons","ms1","X0","ssfn_","cosX0","sinX0","sinX","cosX","rh","sinlat","coslat","dlon","ce","Chi","phit","eccen","somerc","phy0","lambda0","sinPhy0","semiMajorAxis","flattening","e2","R","b0","k1","k2","k3","Sa1","Sa2","S","I2","rotI","rotB","lambda","phy","prevPhy","iteration","omerc","cosph0","F","H","L","sinph0","J","gamma0","projectionName","lamc","lam1","lam2","phi1","phi2","alpha_c","no_off","no_rot","alp","gam","one_es","E","lam0","pi","singam","cosgam","sinrot","cosrot","rB","ArB","BrA","u_0","v_pole_n","v_pole_s","U","V2","W","u","Qp","Sp","Tp","Vp","Up","lcc","sin1","cos1","ts1","sin2","cos2","ms2","ts2","ts0","ns","f0","rh1","theta","krovak","s45","s90","fi0","alfa","uq","u0","n0","s0","ro0","ad","gfi","deltav","eps","ro","czech","fi1","ok","mlfn","e0","e3","e0fn","e1fn","e2fn","e3fn","gN","adjust_lat","imlfn","cass","lam","nl","tl","asq","cl","dd","nl1","rl1","tl1","dl","dsq","qsfnz","P00","P01","P02","P10","P11","P20","laea","mode","S_POLE","N_POLE","EQUIT","OBLIQ","qp","mmf","apa","APA","authset","rq","xmf","ymf","sinb1","cosb1","coslam","sinlam","q","sinb","cosb","cCe","sCe","ab","beta","cosz","sinz","asinz","aea","sin_po","cos_po","t1","qs1","t2","qs2","t3","qs0","ns0","qs","phi1z","eccnts","gnom","sin_p14","cos_p14","infinity_dist","coslon","cea","iqsfnz","eqc","dlat","poly","el","bl","tanphi","mln","mlnp","ma","nzmg","B_re","B_im","C_re","C_im","delta_lat","d_phi","d_lambda","d_phi_n","d_psi","th_n_im1","th_re","th_im","th_n_re","th_n_im","z_re","z_im","z_n_im1","delta_x","z_n_re","z_n_im","iterations","num_re","num_im","den_re","den_im","den2","d_psi_n","mill","sinu","C_y","C_x","moll","delta_theta","eqdc","ml1","ml2","vandg","sinth","costh","gsq","msq","xx","yy","xys","c1","c2","c3","a1","m1","th1","aeqd","sin_p12","cos_p12","Mlp","Ml","Nl1","Nl","psi","Az","G","GH","Hs","kp","cos_c","s2","s3","s4","cosAz","Ee","sinpsi","ortho","FACE_ENUM","AREA_ENUM","qsc_fwd_equat_face_theta","area","qsc_shift_lon_origin","slon","qsc","face","one_minus_f","one_minus_f_squared","xy","sinlon","nu","cosmu","tannu","tantheta","invert_sign","xa","lp","COEFS_X","COEFS_Y","C1","poly3_val","coefs","robin","NODES","f_df","max_err","iters","upd","newton_rapshon","poly3_der","geocent","params","azi","degrees","tilt","tpers","bind","pn1","rp","pfact","omega","cg","sg","cw","sw","yt","ba","bm","bq","proj42","geos","flip_axis","sweep","radius_g_1","radius_g","rone_es","radius_p","radius_p2","radius_p_inv2","shape","v_x","v_y","v_z","det","v_zp","defaultDatum","Proj","nadgrid","data","DataView","nFields","detectLittleEndian","header","nSubgridFields","nSubgrids","shiftType","fromSemiMajorAxis","fromSemiMinorAxis","toSemiMajorAxis","toSemiMinorAxis","readHeader","nadgrid2","gridOffset","subHeader","lngColumnCount","latColumnCount","count","readSubgrids","version","lookups","NAD_1983_StatePlane_California_III_FIPS_0403_Feet","NAD_1983_UTM_Zone_10N","D_North_American_1983","DHDN_3_degree_Gauss_Kruger_zone_4","ETRS89_UTM_zone_32N","ETRS89_UTM_zone_33N","Hartebeesthoek94","UTM_Zone_32N","allEPSGs","entries","epsg","Coords","toLngLat","projection","guessProjection","definition","_a","favoriteEPSG","epsg2","matches","reverse","fave"],"mappings":"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"}