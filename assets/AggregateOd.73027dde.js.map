{"version":3,"file":"AggregateOd.73027dde.js","sources":["../../src/plugins/aggregate-od/LegendBoxOD.vue","../../src/plugins/aggregate-od/LegendBoxOD.vue?vue&type=template&lang.js","../../src/plugins/aggregate-od/LineFilterSlider.vue","../../src/plugins/aggregate-od/LineFilterSlider.vue?vue&type=template&lang.js","../../src/plugins/aggregate-od/ScaleBoxOD.vue","../../src/plugins/aggregate-od/ScaleBoxOD.vue?vue&type=template&lang.js","../../src/plugins/aggregate-od/TimeSlider.vue","../../src/plugins/aggregate-od/TimeSlider.vue?vue&type=template&lang.js","../../src/components/ScaleSlider.vue","../../src/components/ScaleSlider.vue?vue&type=template&lang.js","../../src/plugins/aggregate-od/AggregateOd.vue","../../src/plugins/aggregate-od/AggregateOd.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\n#legend-container\r\n  p.title {{$t('legend')}}\r\n  .legend-item(v-for=\"item in rows\")\r\n    .legend-col(v-if =\"typeof item === 'string' && item.includes('#')\" :style=\"{'background-color': item}\")\r\n    .legend-element1(v-if =\"typeof item === 'string' && !item.includes('#') && item == ('↓')\") {{item}}\r\n    .legend-element2(v-if =\"typeof item === 'string' && !item.includes('#') && item != ('↓')\") {{item}}\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: { linewidth: 'Line widths:', legend: 'Legend:' },\r\n    de: { linewidth: 'Linienbreite:', legend: 'Legende:' },\r\n  },\r\n}\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'LegendBoxOD',\r\n  i18n,\r\n  props: {\r\n    rows: { type: Array, required: true },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n#legend-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  color: var(--text);\r\n  background-color: var(--bgPanel);\r\n  padding: 0rem 0.5rem;\r\n  border: solid 1px rgba(161, 160, 160, 0.781);\r\n  border-radius: 2px;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.legend-col {\r\n  width: 1rem;\r\n  margin-top: 0.6rem;\r\n  height: 2rem;\r\n}\r\n\r\np.title {\r\n  color: var(--text);\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  margin-bottom: 1rem;\r\n  margin-top: 1.1rem;\r\n  margin-right: 2rem;\r\n  font-weight: normal;\r\n}\r\n.legend-element1 {\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  margin-right: 0.8rem;\r\n  margin-left: -1.75rem;\r\n  margin-top: 0.6rem;\r\n}\r\n\r\n.legend-element2 {\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  margin-right: 0.8rem;\r\n  margin-left: -0.8rem;\r\n  margin-top: 0.6rem;\r\n}\r\n</style>\r\n","\r\n#legend-container\r\n  p.title {{$t('legend')}}\r\n  .legend-item(v-for=\"item in rows\")\r\n    .legend-col(v-if =\"typeof item === 'string' && item.includes('#')\" :style=\"{'background-color': item}\")\r\n    .legend-element1(v-if =\"typeof item === 'string' && !item.includes('#') && item == ('↓')\") {{item}}\r\n    .legend-element2(v-if =\"typeof item === 'string' && !item.includes('#') && item != ('↓')\") {{item}}\r\n","<template lang=\"pug\">\r\nb-slider.time-slider(\r\n  v-bind=\"options\"\r\n  v-model=\"sliderValue\"\r\n  tooltip-always\r\n)\r\n  b-slider-tick(v-for=\"tick,i in options.data\" :key=\"i\" :value=\"i\")\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'LineFilterSlider',\r\n  props: {\r\n    initialValue: { type: Number, required: true },\r\n  },\r\n  data: () => {\r\n    return {\r\n      sliderValue: 0,\r\n      options: {\r\n        size: 'is-small',\r\n        indicator: true,\r\n        min: 0,\r\n        max: 100,\r\n        'tooltip-always': true,\r\n        tooltip: true,\r\n        data: [\r\n          0,\r\n          1,\r\n          2,\r\n          5,\r\n          10,\r\n          15,\r\n          20,\r\n          25,\r\n          30,\r\n          35,\r\n          40,\r\n          45,\r\n          50,\r\n          55,\r\n          60,\r\n          65,\r\n          70,\r\n          75,\r\n          80,\r\n          85,\r\n          90,\r\n          95,\r\n          100,\r\n          'Alle',\r\n        ],\r\n      } as any,\r\n    }\r\n  },\r\n  // VUE LIFECYCLE HOOKS\r\n  mounted() {\r\n    this.options['custom-formatter'] = (val: any) => '' + this.options.data[val]\r\n    this.sliderValue = this.initialValue\r\n    this.sliderValue = this.options.data.includes(this.initialValue)\r\n      ? this.options.data.indexOf(this.initialValue)\r\n      : 0\r\n    this.options.max = this.options.data.length - 1\r\n  },\r\n  watch: {\r\n    sliderValue(result: any) {\r\n      this.$emit('change', this.options.data[result])\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.time-slider {\r\n  max-width: 100%;\r\n  padding: 0 1rem;\r\n}\r\n</style>\r\n","\r\nb-slider.time-slider(\r\n  v-bind=\"options\"\r\n  v-model=\"sliderValue\"\r\n  tooltip-always\r\n)\r\n  b-slider-tick(v-for=\"tick,i in options.data\" :key=\"i\" :value=\"i\")\r\n\r\n","<template lang=\"pug\">\r\n#scale-container\r\n  p.title {{$t('linewidth')}}\r\n    .scale-element {{ \"|↔︎|\" }}\r\n    .scale-scale {{ `~ ${this.rows[0]} ` + $t('trips') }}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: { linewidth: 'Line widths:', legend: 'Legend:', trips: 'trips' },\r\n    de: { linewidth: 'Linienbreite:', legend: 'Legende:', trips: 'Fahrten' },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'LineFilterSlider',\r\n  i18n,\r\n  props: {\r\n    rows: { type: Array, required: true },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n#scale-container {\r\n  display: flex;\r\n  flex-direction: row;\r\n  color: var(--text);\r\n  background-color: var(--bgPanel);\r\n  padding: 0rem 0.5rem;\r\n  border: solid 1px rgba(161, 160, 160, 0.7);\r\n  border-radius: 4px;\r\n}\r\n\r\n.scale-item {\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\np.title {\r\n  color: var(--text);\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  margin-bottom: 1rem;\r\n  margin-top: 1.1rem;\r\n  margin-right: 1rem;\r\n  font-weight: normal;\r\n}\r\n\r\n.scale-element {\r\n  position: relative;\r\n  font-weight: normal;\r\n  margin-right: 1rem;\r\n  margin-top: 0.7rem;\r\n}\r\n\r\n.scale-scale {\r\n  position: relative;\r\n  font-variant: small-caps;\r\n  font-weight: normal;\r\n  margin-right: 0.2rem;\r\n  margin-top: 0.7rem;\r\n}\r\n</style>\r\n","\r\n#scale-container\r\n  p.title {{$t('linewidth')}}\r\n    .scale-element {{ \"|↔︎|\" }}\r\n    .scale-scale {{ `~ ${this.rows[0]} ` + $t('trips') }}\r\n\r\n","<template lang=\"pug\">\r\n.time-slider\r\n  b-slider(:min=\"0\" :max=\"stops.length\" v-model=\"sliderValue\" :tooltip=\"false\")\r\n    b-slider-tick(v-for=\"stop,i of allStops\" :key=\"stop\" :value=\"i\")\r\n  p: b {{ stopLabel }}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'TimeSliderX',\r\n  components: {},\r\n  props: {\r\n    useRange: Boolean,\r\n    all: String,\r\n    stops: { type: Array, required: true },\r\n  },\r\n  data: () => {\r\n    return {\r\n      sliderValue: 0 as any,\r\n    }\r\n  },\r\n  computed: {\r\n    allStops() {\r\n      const initial = this.all ? [this.all] : []\r\n      return [...initial, ...this.stops]\r\n    },\r\n\r\n    stopLabel() {\r\n      if (Array.isArray(this.sliderValue))\r\n        return `${this.allStops[this.sliderValue[0]]} : ${this.allStops[this.sliderValue[1]]}`\r\n      else return this.allStops[this.sliderValue]\r\n    },\r\n  },\r\n  watch: {\r\n    useRange(useIt: boolean) {\r\n      if (useIt) {\r\n        this.sliderValue = [1, this.allStops.length - 1]\r\n      } else {\r\n        this.sliderValue = this.sliderValue[0]\r\n      }\r\n    },\r\n\r\n    sliderValue() {\r\n      const timePeriod = Array.isArray(this.sliderValue)\r\n        ? [this.allStops[this.sliderValue[0]], this.allStops[this.sliderValue[1]]]\r\n        : this.allStops[this.sliderValue]\r\n      this.$emit('change', timePeriod)\r\n    },\r\n  },\r\n  mounted() {\r\n    // console.log(777, this.stops)\r\n  },\r\n  methods: {},\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '~/vue-slider-component/theme/default.css';\r\n@import '@/styles.scss';\r\n\r\n.time-slider {\r\n  margin: 0.5rem;\r\n  margin-top: -0.75rem;\r\n}\r\n\r\np {\r\n  font-size: 1rem;\r\n  margin: 0;\r\n  margin-left: -0.4rem;\r\n  padding: 0;\r\n  line-height: 0.5rem;\r\n}\r\n</style>\r\n","\r\n.time-slider\r\n  b-slider(:min=\"0\" :max=\"stops.length\" v-model=\"sliderValue\" :tooltip=\"false\")\r\n    b-slider-tick(v-for=\"stop,i of allStops\" :key=\"stop\" :value=\"i\")\r\n  p: b {{ stopLabel }}\r\n\r\n","<template lang=\"pug\">\r\nb-slider.time-slider(v-if=\"options.data.length\"\r\n  v-bind=\"options\"\r\n  v-model=\"sliderValue\"\r\n)\r\n  b-slider-tick(v-for=\"tick,i in options.data\" :key=\"i\" :value=\"i\")\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'ScaleSlider',\r\n  props: {\r\n    stops: { type: Array, required: true },\r\n    initialValue: { type: Number, required: true },\r\n  },\r\n  data: () => {\r\n    return {\r\n      sliderValue: 1,\r\n      options: {\r\n        // tooltip: false,\r\n        'tooltip-always': true,\r\n        min: 0,\r\n        size: 'is-small',\r\n        max: 100,\r\n        indicator: true,\r\n        data: [] as any[], //this.stops,\r\n        'custom-formatter': {},\r\n      },\r\n    }\r\n  },\r\n  mounted() {\r\n    this.options['custom-formatter'] = (val: any) => '' + this.options.data[val]\r\n    this.options.max = this.stops.length - 1\r\n    this.options.data = this.stops\r\n    this.sliderValue = this.stops.includes(this.initialValue)\r\n      ? this.stops.indexOf(this.initialValue)\r\n      : 0\r\n  },\r\n  watch: {\r\n    sliderValue() {\r\n      this.sliderChangedEvent()\r\n    },\r\n  },\r\n  methods: {\r\n    sliderChangedEvent() {\r\n      // console.log(result)\r\n      this.$emit('change', this.options.data[this.sliderValue])\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.time-slider {\r\n  max-width: 100%;\r\n  padding: 0 1rem;\r\n}\r\n</style>\r\n","\r\nb-slider.time-slider(v-if=\"options.data.length\"\r\n  v-bind=\"options\"\r\n  v-model=\"sliderValue\"\r\n)\r\n  b-slider-tick(v-for=\"tick,i in options.data\" :key=\"i\" :value=\"i\")\r\n","<template lang=\"pug\">\r\n.mycomponent(:id=\"containerId\")\r\n\r\n  zoom-buttons.zoom-buttons(v-if=\"!thumbnail\")\r\n\r\n  .map-container\r\n    .mymap(:id=\"mapId\")\r\n\r\n    .status-blob(v-show=\"!thumbnail && loadingText\")\r\n      p {{ loadingText }}\r\n\r\n    .lower-left(v-if=\"!thumbnail && !loadingText\")\r\n      .subheading {{ $t('lineWidths')}}\r\n      scale-slider.scale-slider(:stops='scaleValues' :initialValue='currentScale' @change='bounceScaleSlider')\r\n\r\n      .subheading {{ $t('hide')}}\r\n      line-filter-slider.scale-slider(\r\n        :initialValue=\"lineFilter\"\r\n        @change='bounceLineFilter')\r\n\r\n    .lower-right(v-if=\"!thumbnail && !isMobile\")\r\n      legend-box.complication(:rows=\"legendRows\")\r\n      scale-box.complication(:rows=\"scaleRows\")\r\n\r\n  .widgets(v-if=\"!thumbnail\" :style=\"{'padding': yamlConfig ? '0 0.5rem 0.5rem 0.5rem' : '0 0'}\")\r\n\r\n    //- TIME SLIDER ----\r\n    .widget-column(v-if=\"this.headers.length > 2\" style=\"min-width: 8rem\")\r\n      h4.heading {{ $t('time')}}\r\n      b-checkbox.checkbox(v-model=\"showTimeRange\") {{ $t('duration') }}\r\n      time-slider.xtime-slider(\r\n        :useRange=\"showTimeRange\"\r\n        :stops=\"headers\"\r\n        :all=\"allTimeBinsLabel\"\r\n        @change=\"bounceTimeSlider\")\r\n\r\n    //- CENTROID CONTROLS\r\n    .widget-column\r\n      h4.heading {{ $t('circle')}}\r\n      b-checkbox.checkbox(v-model=\"showCentroids\")\r\n        | &nbsp;{{ $t('showCentroids')}}\r\n      b-checkbox.checkbox(v-model=\"showCentroidLabels\")\r\n        | &nbsp;{{$t('showNumbers')}}\r\n\r\n    //- ORIG/DEST BUTTONS\r\n    .widget-column(style=\"margin: 0 0 0 auto\")\r\n      h4.heading {{$t('total')}}\r\n      b-button.is-small(@click='clickedOrigins' :class='{\"is-link\": isOrigin ,\"is-active\": isOrigin}') {{$t('origins')}}\r\n      b-button.is-small(@click='clickedDestinations' hint=\"Hide\" :class='{\"is-link\": !isOrigin,\"is-active\": !isOrigin}') {{$t('dest')}}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {\r\n      legend: 'Legend:',\r\n      lineWidth: 'Line width:',\r\n      lineWidths: 'Line widths',\r\n      hide: 'Hide smaller than',\r\n      time: 'Time of Day',\r\n      duration: 'Duration',\r\n      circle: 'Centroids',\r\n      showCentroids: 'Show centroids',\r\n      showNumbers: 'Show totals',\r\n      total: 'Totals for',\r\n      origins: 'Origins',\r\n      dest: 'Destinations',\r\n    },\r\n    de: {},\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\nimport * as shapefile from 'shapefile'\r\nimport * as turf from '@turf/turf'\r\nimport { debounce } from 'debounce'\r\nimport { FeatureCollection, Feature } from 'geojson'\r\nimport maplibregl, { MapMouseEvent, PositionOptions } from 'maplibre-gl'\r\nimport nprogress from 'nprogress'\r\nimport proj4 from 'proj4'\r\nimport readBlob from 'read-blob'\r\nimport VueSlider from 'vue-slider-component'\r\nimport YAML from 'yaml'\r\n\r\nimport { findMatchingGlobInFiles } from '@/js/util'\r\nimport Coords from '@/js/Coords'\r\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\r\nimport LegendBox from './LegendBoxOD.vue'\r\nimport LineFilterSlider from './LineFilterSlider.vue'\r\nimport ScaleBox from './ScaleBoxOD.vue'\r\nimport TimeSlider from './TimeSlider.vue'\r\nimport ScaleSlider from '@/components/ScaleSlider.vue'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\n\r\nimport { ColorScheme, FileSystem, FileSystemConfig, Status, VisualizationPlugin } from '@/Globals'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\n\r\nimport CSVWorker from './AggregateDatasetStreamer.worker.ts?worker'\r\n\r\nimport globalStore from '@/store'\r\n\r\ninterface AggOdYaml {\r\n  shpFile: string\r\n  dbfFile: string\r\n  csvFile: string\r\n  projection: string\r\n  scaleFactor: number\r\n  title?: string\r\n  description?: string\r\n  idColumn?: string\r\n  lineWidth?: number\r\n  lineWidths?: number\r\n  hideSmallerThan?: number\r\n  mapIsIndependent?: boolean\r\n}\r\n\r\nconst TOTAL_MSG = 'Alle >>'\r\nconst FADED = 0.0 // 0.15\r\n\r\nconst SCALE_WIDTH = [1, 3, 5, 10, 25, 50, 100, 150, 200, 300, 400, 450, 500, 1000, 5000]\r\n\r\nconst INPUTS = {\r\n  OD_FLOWS: 'O/D Flows (.csv)',\r\n  SHP_FILE: 'Shapefile .SHP',\r\n  DBF_FILE: 'Shapefile .DBF',\r\n}\r\n\r\nconst Component = defineComponent({\r\n  name: 'AggregateOD',\r\n  i18n,\r\n  components: {\r\n    CollapsiblePanel,\r\n    LegendBox,\r\n    LineFilterSlider,\r\n    ScaleBox,\r\n    ScaleSlider,\r\n    TimeSlider,\r\n    ZoomButtons,\r\n    VueSlider,\r\n  },\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    yamlConfig: String,\r\n    config: Object,\r\n    thumbnail: Boolean,\r\n  },\r\n  data: () => {\r\n    return {\r\n      globalState: globalStore.state,\r\n      isFinishedLoading: false,\r\n\r\n      myState: {\r\n        subfolder: '',\r\n        yamlConfig: '',\r\n        thumbnail: false,\r\n      },\r\n\r\n      vizDetails: {\r\n        csvFile: '',\r\n        shpFile: '',\r\n        dbfFile: '',\r\n        projection: '',\r\n        scaleFactor: 1,\r\n        title: '',\r\n        description: '',\r\n        mapIsIndependent: false,\r\n      } as AggOdYaml,\r\n\r\n      standaloneYAMLconfig: {\r\n        csvFile: '',\r\n        shpFile: '',\r\n        dbfFile: '',\r\n        projection: '',\r\n        scaleFactor: 1,\r\n        title: '',\r\n        description: '',\r\n        mapIsIndependent: false,\r\n      },\r\n\r\n      YAMLrequirementsOD: {\r\n        shpFile: '',\r\n        dbfFile: '',\r\n        csvFile: '',\r\n        projection: '',\r\n        scaleFactor: 1,\r\n      },\r\n\r\n      containerId: `c${Math.floor(1e12 * Math.random())}`,\r\n      mapId: `map-c${Math.floor(1e12 * Math.random())}`,\r\n\r\n      centroids: {} as any,\r\n      centroidSource: {} as any,\r\n      linkData: {} as any,\r\n      spiderLinkFeatureCollection: {} as any,\r\n\r\n      zoneData: {} as any, // [i][j][timePeriod] where [-1] of each is totals\r\n      dailyData: {} as any, // [i][j]\r\n      marginals: {} as any,\r\n      hoveredStateId: 0 as any,\r\n\r\n      rowName: '',\r\n      colName: '',\r\n      headers: [] as string[],\r\n\r\n      geojson: {} as any,\r\n      idColumn: '',\r\n\r\n      mapIsIndependent: false,\r\n\r\n      showTimeRange: false,\r\n      showCentroids: true,\r\n      showCentroidLabels: true,\r\n\r\n      isOrigin: true,\r\n      selectedCentroid: 0,\r\n      maxZonalTotal: 0,\r\n\r\n      loadingText: 'Aggregierte Quell-Ziel Muster',\r\n      mymap: {} as maplibregl.Map,\r\n      project: {} as any,\r\n\r\n      scaleFactor: 1,\r\n      scaleValues: SCALE_WIDTH,\r\n      currentScale: SCALE_WIDTH[0],\r\n      currentTimeBin: TOTAL_MSG,\r\n      allTimeBinsLabel: TOTAL_MSG,\r\n\r\n      lineFilter: 0,\r\n\r\n      projection: '',\r\n      hoverId: null as any,\r\n\r\n      _mapExtentXYXY: null as any,\r\n      _maximum: null as any,\r\n\r\n      bounceTimeSlider: {} as any,\r\n      bounceScaleSlider: {} as any,\r\n      bounceLineFilter: {} as any,\r\n      resizer: null as ResizeObserver | null,\r\n      isMapMoving: false,\r\n      isDarkMode: false,\r\n\r\n      csvWorker: null as Worker | null,\r\n    }\r\n  },\r\n  computed: {\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    fileApi() {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    isMobile() {\r\n      const w = window\r\n      const d = document\r\n      const e = d.documentElement\r\n      const g = d.getElementsByTagName('body')[0]\r\n      const x = w.innerWidth || e.clientWidth || g.clientWidth\r\n      const y = w.innerHeight || e.clientHeight || g.clientHeight\r\n\r\n      return x < 640\r\n    },\r\n\r\n    legendRows(): any[] {\r\n      return ['#00aa66', '#880033', '↓', '↑']\r\n    },\r\n\r\n    scaleRows(): any[] {\r\n      return [\r\n        Math.min(\r\n          Math.round((1200 * Math.pow(this.currentScale, -1) + 20) * Math.sqrt(this.scaleFactor)),\r\n          1000 * this.scaleFactor\r\n        ),\r\n      ]\r\n    },\r\n  },\r\n  methods: {\r\n    setupResizer() {\r\n      this.resizer = new ResizeObserver(() => {\r\n        if (this.mymap) this.mymap.resize()\r\n      })\r\n\r\n      const viz = document.getElementById(this.containerId) as HTMLElement\r\n      this.resizer.observe(viz)\r\n    },\r\n\r\n    configureSettings() {\r\n      if (this.vizDetails.lineWidths || this.vizDetails.lineWidth) {\r\n        this.currentScale = this.vizDetails.lineWidth || this.vizDetails.lineWidths || 1\r\n      }\r\n      if (this.vizDetails.hideSmallerThan) this.lineFilter = this.vizDetails.hideSmallerThan\r\n    },\r\n\r\n    handleMapMotion() {\r\n      const mapCamera = {\r\n        longitude: this.mymap.getCenter().lng,\r\n        latitude: this.mymap.getCenter().lat,\r\n        bearing: this.mymap.getBearing(),\r\n        zoom: this.mymap.getZoom(),\r\n        pitch: this.mymap.getPitch(),\r\n      }\r\n\r\n      if (!this.mapIsIndependent) this.$store.commit('setMapCamera', mapCamera)\r\n      if (!this.isMapMoving) this.isMapMoving = true\r\n    },\r\n\r\n    async getVizDetails() {\r\n      if (this.config) {\r\n        this.validateYAML()\r\n        this.vizDetails = Object.assign({}, this.config) as any\r\n      } else {\r\n        try {\r\n          // might be a project config:\r\n          const filename =\r\n            this.myState.yamlConfig.indexOf('/') > -1\r\n              ? this.myState.yamlConfig\r\n              : this.myState.subfolder + '/' + this.myState.yamlConfig\r\n\r\n          const text = await this.fileApi.getFileText(filename)\r\n          this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\r\n          this.validateYAML()\r\n          this.setVizDetails()\r\n        } catch (e) {\r\n          console.error('' + e)\r\n        }\r\n      }\r\n\r\n      this.$emit('title', this.vizDetails.title)\r\n\r\n      this.scaleFactor = this.vizDetails.scaleFactor\r\n      this.projection = this.vizDetails.projection\r\n      this.mapIsIndependent = !!this.vizDetails.mapIsIndependent\r\n      this.idColumn = this.vizDetails.idColumn ? this.vizDetails.idColumn : 'id'\r\n\r\n      nprogress.done()\r\n    },\r\n\r\n    validateYAML() {\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n\r\n      let configuration = {} as any\r\n\r\n      if (hasYaml) {\r\n        configuration = this.standaloneYAMLconfig\r\n      } else {\r\n        configuration = this.config\r\n      }\r\n\r\n      for (const key in this.YAMLrequirementsOD) {\r\n        if (key in configuration === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `${this.yamlConfig}: missing required key: ${key}`,\r\n            desc: '',\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    setVizDetails() {\r\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\r\n\r\n      const t = this.vizDetails.title ? this.vizDetails.title : 'Aggregate OD'\r\n      this.$emit('title', t)\r\n    },\r\n\r\n    async findFilenameFromWildcard(path: string) {\r\n      // get folder\r\n      let folder =\r\n        path.indexOf('/') > -1 ? path.substring(0, path.lastIndexOf('/')) : this.subfolder\r\n\r\n      // get file path search pattern\r\n      const { files } = await this.fileApi.getDirectory(folder)\r\n      let pattern = path.indexOf('/') === -1 ? path : path.substring(path.lastIndexOf('/') + 1)\r\n      const match = findMatchingGlobInFiles(files, pattern)\r\n\r\n      if (match.length === 1) {\r\n        return `${folder}/${match[0]}`\r\n      } else {\r\n        throw Error('File not found: ' + path)\r\n      }\r\n    },\r\n\r\n    async loadFiles() {\r\n      try {\r\n        this.loadingText = 'Dateien laden...'\r\n\r\n        const shpFilename = await this.findFilenameFromWildcard(\r\n          `${this.myState.subfolder}/${this.vizDetails.shpFile}`\r\n        )\r\n        const dbfFilename = await this.findFilenameFromWildcard(\r\n          `${this.myState.subfolder}/${this.vizDetails.dbfFile}`\r\n        )\r\n\r\n        const blob = await this.fileApi.getFileBlob(shpFilename)\r\n        const shpFile = await readBlob.arraybuffer(blob)\r\n\r\n        const blob2 = await this.fileApi.getFileBlob(dbfFilename)\r\n        const dbfFile = await readBlob.arraybuffer(blob2)\r\n\r\n        return { shpFile, dbfFile }\r\n        //\r\n      } catch (e) {\r\n        const error = e as any\r\n        let msg = error.statusText || '' + error\r\n        if (error.url) msg += ': ' + error.url\r\n\r\n        console.error(msg)\r\n        this.loadingText = '' + e\r\n        this.$store.commit('error', msg)\r\n        return null\r\n      }\r\n    },\r\n\r\n    async setupMap() {\r\n      try {\r\n        this.mymap = new maplibregl.Map({\r\n          container: this.mapId,\r\n          style: globalStore.getters.mapStyle,\r\n          logoPosition: 'top-left',\r\n        })\r\n      } catch (e) {\r\n        console.error('HUH?')\r\n        return\r\n      }\r\n\r\n      try {\r\n        const extent = localStorage.getItem(this.$route.fullPath + '-bounds')\r\n        if (extent) {\r\n          const lnglat = JSON.parse(extent)\r\n\r\n          const mFac = this.isMobile ? 0 : 1\r\n          const padding = { top: 50 * mFac, bottom: 50 * mFac, right: 100 * mFac, left: 50 * mFac }\r\n\r\n          this.$store.commit('setMapCamera', {\r\n            longitude: 0.5 * (lnglat[0] + lnglat[2]),\r\n            latitude: 0.5 * (lnglat[1] + lnglat[3]),\r\n            zoom: 8,\r\n            pitch: 0,\r\n            bearing: 0,\r\n            jump: true, // initial map\r\n          })\r\n        }\r\n      } catch (e) {\r\n        // no consequence if json was weird, just drop it\r\n      }\r\n\r\n      this.mymap.on('click', this.handleEmptyClick)\r\n      // Start doing stuff AFTER the MapBox library has fully initialized\r\n      this.mymap.on('load', this.mapIsReady)\r\n      this.mymap.on('move', this.handleMapMotion)\r\n\r\n      // clean up display just when we're in thumbnail mode\r\n      if (this.thumbnail) {\r\n        let baubles = document.getElementsByClassName(\r\n          'mapboxgl-ctrl mapboxgl-ctrl-attrib mapboxgl-compact'\r\n        )\r\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\r\n\r\n        baubles = document.getElementsByClassName('mapboxgl-ctrl mapboxgl-ctrl-group')\r\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\r\n\r\n        baubles = document.getElementsByClassName('mapboxgl-ctrl-logo')\r\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\r\n      } else {\r\n        let baubles = document.getElementsByClassName('mapboxgl-ctrl-logo')\r\n        for (const elem of baubles) elem.setAttribute('style', 'margin-bottom: 3rem;')\r\n      }\r\n    },\r\n\r\n    handleEmptyClick(e: any) {\r\n      if (\r\n        this.mymap\r\n          .queryRenderedFeatures(e.point)\r\n          .filter(feature => feature.source === 'centroids' || feature.source === 'spider-source')\r\n          .length === 0\r\n      ) {\r\n        // didn't click on a centroid: clear the map\r\n        this.fadeUnselectedLinks(-1)\r\n        this.selectedCentroid = 0\r\n        if (this.isMobile) {\r\n        } // do something\r\n      }\r\n    },\r\n\r\n    async mapIsReady() {\r\n      const files = await this.loadFiles()\r\n\r\n      if (files) {\r\n        this.geojson = await this.processShapefile(files)\r\n        // this is async, setup will continue at finishedLoading() when data is loaded\r\n        if (this.geojson) this.loadCSVData()\r\n      }\r\n\r\n      nprogress.done()\r\n    },\r\n\r\n    createSpiderLinks() {\r\n      this.spiderLinkFeatureCollection = { type: 'FeatureCollection', features: [] }\r\n\r\n      for (const id of Object.keys(this.linkData)) {\r\n        const link: any = this.linkData[id]\r\n\r\n        if (link.daily <= this.lineFilter) continue\r\n\r\n        try {\r\n          const origCoord = this.centroids[link.orig].geometry.coordinates\r\n          const destCoord = this.centroids[link.dest].geometry.coordinates\r\n          const color = origCoord[1] - destCoord[1] > 0 ? '#00aa66' : '#880033'\r\n          const fade = 0.7\r\n          const properties: any = {\r\n            id: id,\r\n            orig: link.orig || 0,\r\n            dest: link.dest || 0,\r\n            daily: link.daily || 0,\r\n            color,\r\n            fade,\r\n          }\r\n          // Test this\r\n          properties[TOTAL_MSG] = link.daily\r\n          link.values.forEach((value: number, i: number) => {\r\n            properties[this.headers[i]] = value ?? 0\r\n          })\r\n\r\n          const feature: any = {\r\n            type: 'Feature',\r\n            properties,\r\n            geometry: {\r\n              type: 'LineString',\r\n              coordinates: [origCoord, destCoord],\r\n            },\r\n          }\r\n          this.spiderLinkFeatureCollection.features.push(feature)\r\n        } catch (e) {\r\n          // some dests aren't on map: z.b. 'other'\r\n        }\r\n      }\r\n      // console.log(555, this.currentTimeBin, {\r\n      //   SPIDERLINKFEATURECOLLECTION: this.spiderLinkFeatureCollection,\r\n      // })\r\n    },\r\n\r\n    updateSpiderLinks() {\r\n      this.createSpiderLinks()\r\n\r\n      // avoiding mapbox typescript bug:\r\n      if (this.selectedCentroid) {\r\n        this.fadeUnselectedLinks(this.selectedCentroid)\r\n      } else {\r\n        const tsMap = this.mymap as any\r\n        tsMap.getSource('spider-source').setData(this.spiderLinkFeatureCollection)\r\n      }\r\n    },\r\n\r\n    buildSpiderLinks() {\r\n      if (!this.mymap.getSource('spider-source')) {\r\n        this.createSpiderLinks()\r\n        // console.log({ spiders: this.spiderLinkFeatureCollection })\r\n        this.mymap.addSource('spider-source', {\r\n          data: this.spiderLinkFeatureCollection,\r\n          type: 'geojson',\r\n        } as any)\r\n      }\r\n\r\n      if (this.mymap.getLayer('spider-layer')) this.mymap.removeLayer('spider-layer')\r\n      this.mymap.addLayer(\r\n        {\r\n          id: 'spider-layer',\r\n          source: 'spider-source',\r\n          type: 'line',\r\n          paint: {\r\n            'line-color': ['get', 'color'],\r\n            'line-width': ['*', (1 / 500) * this.scaleFactor, ['get', 'daily']],\r\n            'line-offset': ['*', 0.5, ['get', 'daily']],\r\n            'line-opacity': ['get', 'fade'],\r\n          },\r\n          filter: ['>', ['get', this.currentTimeBin], 0],\r\n        },\r\n        'centroid-layer'\r\n      )\r\n\r\n      this.changedScale(this.currentScale)\r\n\r\n      const parent = this\r\n      this.mymap.on('click', 'spider-layer', function (e: maplibregl.MapMouseEvent) {\r\n        parent.clickedOnSpiderLink(e)\r\n      })\r\n\r\n      // turn \"hover cursor\" into a pointer, so user knows they can click.\r\n      this.mymap.on('mousemove', 'spider-layer', function (e: maplibregl.MapMouseEvent) {\r\n        parent.mymap.getCanvas().style.cursor = e ? 'pointer' : 'grab'\r\n      })\r\n\r\n      // and back to normal when they mouse away\r\n      this.mymap.on('mouseleave', 'spider-layer', function () {\r\n        parent.mymap.getCanvas().style.cursor = 'grab'\r\n      })\r\n    },\r\n\r\n    clickedOrigins() {\r\n      this.isOrigin = true\r\n      this.updateCentroidLabels()\r\n\r\n      this.convertRegionColors(this.geojson)\r\n\r\n      // avoiding mapbox typescript bug:\r\n      const tsMap = this.mymap as any\r\n      tsMap.getSource('shpsource').setData(this.geojson)\r\n    },\r\n\r\n    clickedDestinations() {\r\n      this.isOrigin = false\r\n      this.updateCentroidLabels()\r\n\r\n      this.convertRegionColors(this.geojson)\r\n\r\n      // avoiding mapbox typescript bug:\r\n      const tsMap = this.mymap as any\r\n      tsMap.getSource('shpsource').setData(this.geojson)\r\n    },\r\n\r\n    updateCentroidLabels() {\r\n      const labels = this.isOrigin ? '{dailyFrom}' : '{dailyTo}'\r\n      const radiusField = this.isOrigin ? 'widthFrom' : 'widthTo'\r\n\r\n      if (this.mymap.getLayer('centroid-layer')) this.mymap.removeLayer('centroid-layer')\r\n      if (this.mymap.getLayer('centroid-label-layer'))\r\n        this.mymap.removeLayer('centroid-label-layer')\r\n\r\n      if (this.showCentroids) {\r\n        this.mymap.addLayer({\r\n          layout: { visibility: this.thumbnail ? 'none' : 'visible' },\r\n          id: 'centroid-layer',\r\n          source: 'centroids',\r\n          type: 'circle',\r\n          paint: {\r\n            'circle-color': '#ec0',\r\n            'circle-radius': ['get', radiusField],\r\n            'circle-stroke-width': 2,\r\n            'circle-stroke-color': 'white',\r\n          },\r\n          filter: ['>', ['get', this.isOrigin ? 'dailyFrom' : 'dailyTo'], 0],\r\n        })\r\n      }\r\n\r\n      if (this.showCentroidLabels) {\r\n        this.mymap.addLayer({\r\n          id: 'centroid-label-layer',\r\n          source: 'centroids',\r\n          type: 'symbol',\r\n          layout: {\r\n            'text-field': labels,\r\n            'text-size': 11,\r\n          },\r\n          paint: this.showCentroids ? {} : { 'text-halo-color': 'white', 'text-halo-width': 2 },\r\n          filter: ['>', ['get', this.isOrigin ? 'dailyFrom' : 'dailyTo'], 0],\r\n        })\r\n      }\r\n    },\r\n\r\n    unselectAllCentroids() {\r\n      this.fadeUnselectedLinks(-1)\r\n      this.selectedCentroid = 0\r\n    },\r\n\r\n    clickedOnCentroid(e: any) {\r\n      e.originalEvent.stopPropagating = true\r\n\r\n      const centroid = e.features[0].properties\r\n      // console.log('CLICK!', centroid, this.selectedCentroid, centroid.id === this.selectedCentroid)\r\n\r\n      const id = centroid.id\r\n\r\n      // a second click on a centroid UNselects it.\r\n      if (id === this.selectedCentroid) {\r\n        this.unselectAllCentroids()\r\n        return\r\n      }\r\n\r\n      this.selectedCentroid = id\r\n      this.fadeUnselectedLinks(id)\r\n    },\r\n\r\n    fadeUnselectedLinks(id: any) {\r\n      const tsMap = this.mymap as any\r\n\r\n      for (const feature of this.spiderLinkFeatureCollection.features) {\r\n        const endpoints = feature.properties.id.split(':')\r\n        let fade = endpoints[0] === String(id) || endpoints[1] === String(id) ? 0.7 : FADED\r\n        if (id === -1) fade = 0.7\r\n        feature.properties.fade = fade\r\n      }\r\n      tsMap.getSource('spider-source').setData(this.spiderLinkFeatureCollection)\r\n    },\r\n\r\n    clickedOnSpiderLink(e: any) {\r\n      if (e.originalEvent.stopPropagating) return\r\n\r\n      // console.log({ CLICK: e })\r\n\r\n      const props = e.features[0].properties\r\n      // console.log(props)\r\n\r\n      const trips = Math.round(10000 * props.daily * this.scaleFactor) / 10000\r\n      let revTrips = 0\r\n      const reverseDir = '' + props.dest + ':' + props.orig\r\n\r\n      if (this.linkData[reverseDir])\r\n        revTrips = Math.round(10000 * this.linkData[reverseDir].daily * this.scaleFactor) / 10000\r\n\r\n      const totalTrips = trips + revTrips\r\n\r\n      let html = `<h1><b>${totalTrips} Bidirectional Trip${totalTrips !== 1 ? 's' : ''}</b></h1>`\r\n      html += `<p style=\"width: max-content\">_________________________</p>`\r\n      html += `<p style=\"width: max-content\">${trips} trip${\r\n        trips !== 1 ? 's' : ''\r\n      } // ${revTrips} reverse trip${revTrips !== 1 ? 's' : ''}</p>`\r\n\r\n      new maplibregl.Popup({ closeOnClick: true })\r\n        .setLngLat(e.lngLat)\r\n        .setHTML(html)\r\n        .addTo(this.mymap)\r\n    },\r\n\r\n    convertRegionColors(geojson: FeatureCollection) {\r\n      for (const feature of geojson.features) {\r\n        if (!feature.properties) continue\r\n\r\n        const daily = this.isOrigin ? feature.properties.dailyFrom : feature.properties.dailyTo\r\n        const ratio = daily / this.maxZonalTotal\r\n\r\n        let blue = 128 + 127 * (1.0 - ratio)\r\n        if (!blue) blue = 255\r\n\r\n        feature.properties.blue = blue\r\n      }\r\n    },\r\n\r\n    handleCentroidsForTimeOfDayChange(timePeriod: any) {\r\n      const centroids: FeatureCollection = { type: 'FeatureCollection', features: [] }\r\n\r\n      for (const feature of this.geojson.features) {\r\n        const centroid: any = turf.centerOfMass(feature as any)\r\n\r\n        centroid.properties.id = feature.id\r\n\r\n        const values = this.calculateCentroidValuesForZone(timePeriod, feature)\r\n\r\n        centroid.properties.dailyFrom = Math.round(10000 * values.from * this.scaleFactor) / 10000\r\n        centroid.properties.dailyTo = Math.round(10000 * values.to * this.scaleFactor) / 10000\r\n\r\n        let digits = Math.log10(centroid.properties.dailyFrom)\r\n        centroid.properties.widthFrom = 6 + digits * 3.5\r\n        digits = Math.log10(centroid.properties.dailyTo)\r\n        centroid.properties.widthTo = 6 + digits * 3.5\r\n\r\n        if (!feature.properties) feature.properties = {}\r\n\r\n        feature.properties.dailyFrom = values.from\r\n        feature.properties.dailyTo = values.to\r\n\r\n        if (centroid.properties.dailyFrom + centroid.properties.dailyTo > 0) {\r\n          centroids.features.push(centroid)\r\n          if (feature.properties) this.centroids[feature.properties[this.idColumn]] = centroid\r\n        }\r\n      }\r\n\r\n      this.centroidSource = centroids\r\n\r\n      const tsMap = this.mymap as any\r\n      tsMap.getSource('centroids').setData(this.centroidSource)\r\n      this.updateCentroidLabels()\r\n    },\r\n\r\n    calculateCentroidValuesForZone(timePeriod: any, feature: any) {\r\n      let from = 0\r\n      let to = 0\r\n\r\n      // daily\r\n      if (timePeriod === 'Alle >>') {\r\n        to = feature.properties.dailyTo\r\n        from = feature.properties.dailyFrom\r\n        return { from, to }\r\n      }\r\n\r\n      const fromMarginal = this.marginals.from[feature.id]\r\n      const toMarginal = this.marginals.to[feature.id]\r\n\r\n      // time range\r\n      if (Array.isArray(timePeriod)) {\r\n        let hourFrom = this.headers.indexOf(timePeriod[0]) - 1\r\n        if (hourFrom < 0) hourFrom = 0\r\n\r\n        const hourTo = this.headers.indexOf(timePeriod[1]) - 1\r\n\r\n        for (let i = hourFrom; i <= hourTo; i++) {\r\n          from += fromMarginal ? Math.round(fromMarginal[i]) : 0\r\n          to += toMarginal ? Math.round(toMarginal[i]) : 0\r\n        }\r\n        return { from, to }\r\n      }\r\n\r\n      // one time period\r\n      const hour = this.headers.indexOf(timePeriod) - 1\r\n\r\n      from = fromMarginal ? Math.round(fromMarginal[hour]) : 0\r\n      to = toMarginal ? Math.round(toMarginal[hour]) : 0\r\n\r\n      return { from, to }\r\n    },\r\n\r\n    buildCentroids(geojson: FeatureCollection) {\r\n      const centroids: FeatureCollection = { type: 'FeatureCollection', features: [] }\r\n\r\n      for (const feature of geojson.features) {\r\n        if (!feature.id) continue\r\n\r\n        const centroid: any = turf.centerOfMass(feature as any)\r\n        centroid.properties.id = feature.id\r\n        centroid.id = feature.id\r\n\r\n        let dailyFrom = Math.round(this.marginals.rowTotal[feature.id])\r\n        let dailyTo = Math.round(this.marginals.colTotal[feature.id])\r\n\r\n        if (!dailyFrom) dailyFrom = 0\r\n        if (!dailyTo) dailyTo = 0\r\n\r\n        centroid.properties.dailyFrom = dailyFrom * this.scaleFactor\r\n        centroid.properties.dailyTo = dailyTo * this.scaleFactor\r\n\r\n        let digits = Math.log10(centroid.properties.dailyFrom)\r\n        centroid.properties.widthFrom = 6 + digits * 3.5\r\n        digits = Math.log10(centroid.properties.dailyTo)\r\n        centroid.properties.widthTo = 6 + digits * 3.5\r\n\r\n        if (dailyFrom) this.maxZonalTotal = Math.max(this.maxZonalTotal, dailyFrom)\r\n        if (dailyTo) this.maxZonalTotal = Math.max(this.maxZonalTotal, dailyTo)\r\n\r\n        if (!feature.properties) feature.properties = {}\r\n        feature.properties.dailyFrom = dailyFrom\r\n        feature.properties.dailyTo = dailyTo\r\n\r\n        if (centroid.properties.dailyFrom + centroid.properties.dailyTo > 0) {\r\n          centroids.features.push(centroid)\r\n          if (feature.properties) this.centroids[feature.id] = centroid\r\n          this.updateMapExtent(centroid.geometry.coordinates)\r\n        }\r\n      }\r\n\r\n      this.centroidSource = centroids\r\n\r\n      if (!this.mymap.getSource('centroids')) {\r\n        this.mymap.addSource('centroids', {\r\n          data: this.centroidSource,\r\n          type: 'geojson',\r\n        } as any)\r\n      }\r\n      this.updateCentroidLabels()\r\n\r\n      this.mymap.on('click', 'centroid-layer', (e: maplibregl.MapMouseEvent) => {\r\n        this.clickedOnCentroid(e)\r\n      })\r\n\r\n      // turn \"hover cursor\" into a pointer, so user knows they can click.\r\n      this.mymap.on('mousemove', 'centroid-layer', (e: maplibregl.MapMouseEvent) => {\r\n        this.mymap.getCanvas().style.cursor = e ? 'pointer' : 'grab'\r\n      })\r\n\r\n      // and back to normal when they mouse away\r\n      this.mymap.on('mouseleave', 'centroid-layer', () => {\r\n        this.mymap.getCanvas().style.cursor = 'grab'\r\n      })\r\n    },\r\n\r\n    setMapExtent() {\r\n      localStorage.setItem(this.$route.fullPath + '-bounds', JSON.stringify(this._mapExtentXYXY))\r\n\r\n      const options = this.thumbnail\r\n        ? { animate: false }\r\n        : {\r\n            padding: { top: 25, bottom: 25, right: 100, left: 100 },\r\n            animate: false,\r\n          }\r\n      this.mymap.fitBounds(this._mapExtentXYXY, options)\r\n    },\r\n\r\n    setupKeyListeners() {\r\n      window.addEventListener('keyup', event => {\r\n        if (event.keyCode === 27) {\r\n          // ESC\r\n          this.pressedEscape()\r\n        }\r\n      })\r\n      window.addEventListener('keydown', event => {\r\n        if (event.keyCode === 38) {\r\n          // UP\r\n          this.pressedArrowKey(-1)\r\n        }\r\n        if (event.keyCode === 40) {\r\n          // DOWN\r\n          this.pressedArrowKey(+1)\r\n        }\r\n      })\r\n    },\r\n\r\n    // To display only the centroids whose dailyTo and dailyFrom values are not\r\n    // both 0, the objects get the property 'isVisible'. When adding the geojson\r\n    // data to the map, it is filtered by this attribute.\r\n    processGeojson() {\r\n      for (const feature of this.geojson.features) {\r\n        const data = feature.properties\r\n        if (data.dailyFrom !== 0 || data.dailyTo !== 0) {\r\n          feature.properties.isVisible = true\r\n        } else {\r\n          feature.properties.isVisible = false\r\n        }\r\n      }\r\n    },\r\n\r\n    async processShapefile(files: any) {\r\n      this.loadingText = 'Verkehrsnetz bauarbeiten...'\r\n      const geojson = await shapefile.read(files.shpFile, files.dbfFile)\r\n\r\n      // if we have lots of features, then we should filter the LINES for performance\r\n      if (geojson.features.length > 150) this.lineFilter = 10\r\n\r\n      this.loadingText = 'Koordinaten berechnen...'\r\n\r\n      for (const feature of geojson.features) {\r\n        const properties = feature.properties as any\r\n\r\n        // 'id' column used for lookup, unless idColumn is set in YAML\r\n        if (!this.idColumn && properties) this.idColumn = Object.keys(properties)[0]\r\n\r\n        if (!(this.idColumn in properties)) {\r\n          this.$store.commit('error', `Shapefile does not contain ID column \"${this.idColumn}\"`)\r\n          return\r\n        }\r\n\r\n        // Save id somewhere helpful\r\n        if (feature.properties) feature.id = feature.properties[this.idColumn]\r\n\r\n        try {\r\n          if (feature.geometry.type === 'MultiPolygon') {\r\n            this.convertMultiPolygonCoordinatesToWGS84(feature)\r\n          } else {\r\n            this.convertPolygonCoordinatesToWGS84(feature)\r\n          }\r\n        } catch (e) {\r\n          console.error('ERR with feature: ' + feature)\r\n          console.error(e)\r\n        }\r\n      }\r\n      return geojson\r\n    },\r\n\r\n    convertPolygonCoordinatesToWGS84(polygon: any) {\r\n      for (const origCoords of polygon.geometry.coordinates) {\r\n        const newCoords: any = []\r\n        for (const p of origCoords) {\r\n          const lnglat = Coords.toLngLat(this.projection, p) as any\r\n          newCoords.push(lnglat)\r\n        }\r\n\r\n        // replace existing coords\r\n        origCoords.length = 0\r\n        origCoords.push(...newCoords)\r\n      }\r\n    },\r\n\r\n    origConvertMultiPolygonCoordinatesToWGS84(multipolygon: any) {\r\n      for (const origCoords of multipolygon.geometry.coordinates) {\r\n        const coordinates = origCoords[0] // multipolygons have an extra array[0] added\r\n\r\n        const newCoords: any = []\r\n        for (const p of coordinates) {\r\n          const lnglat = proj4(this.projection, 'WGS84', p) as any\r\n          newCoords.push(lnglat)\r\n        }\r\n\r\n        origCoords[0] = newCoords\r\n      }\r\n    },\r\n\r\n    convertMultiPolygonCoordinatesToWGS84(multipolygon: any) {\r\n      multipolygon.geometry.coordinates = this.recurseWGS84(multipolygon.geometry.coordinates)\r\n    },\r\n\r\n    recurseWGS84(coords: any[]): any {\r\n      const newCoords = []\r\n\r\n      for (let coordArray of coords) {\r\n        if (Array.isArray(coordArray[0])) {\r\n          newCoords.push(this.recurseWGS84(coordArray))\r\n        } else {\r\n          newCoords.push(proj4(this.projection, 'WGS84', coordArray))\r\n        }\r\n      }\r\n      return newCoords\r\n    },\r\n\r\n    async getDailyDataSummary() {\r\n      const rowTotal: any = {}\r\n      const colTotal: any = {}\r\n      const fromCentroid: any = {}\r\n      const toCentroid: any = {}\r\n\r\n      for (const row of Object.keys(this.zoneData)) {\r\n        // store number of time periods (no totals here)\r\n        fromCentroid[row] = Array(this.headers.length - 1).fill(0)\r\n\r\n        for (const col of Object.keys(this.zoneData[row])) {\r\n          // daily totals\r\n          if (!rowTotal[row]) rowTotal[row] = 0\r\n          if (!colTotal[col]) colTotal[col] = 0\r\n\r\n          if (this.dailyData[row][col]) {\r\n            rowTotal[row] += this.dailyData[row][col]\r\n            colTotal[col] += this.dailyData[row][col]\r\n          }\r\n\r\n          if (!toCentroid[col]) toCentroid[col] = Array(this.headers.length - 1).fill(0)\r\n\r\n          // time-of-day details\r\n          for (let i = 0; i < this.headers.length - 1; i++) {\r\n            // number of time periods\r\n            if (this.zoneData[row][col][i]) {\r\n              fromCentroid[row][i] += this.zoneData[row][col][i]\r\n              toCentroid[col][i] += this.zoneData[row][col][i]\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return { rowTotal, colTotal, from: fromCentroid, to: toCentroid }\r\n    },\r\n\r\n    async loadCSVData() {\r\n      this.loadingText = 'Load CSV data...'\r\n\r\n      let csvFilename = ''\r\n      try {\r\n        csvFilename = await this.findFilenameFromWildcard(\r\n          `${this.myState.subfolder}/${this.vizDetails.csvFile}`\r\n        )\r\n      } catch (e) {\r\n        this.$store.commit(\r\n          'error',\r\n          `Error loading ${this.myState.subfolder}/${this.vizDetails.csvFile}`\r\n        )\r\n        return\r\n      }\r\n\r\n      this.csvWorker = new CSVWorker()\r\n      this.csvWorker.onmessage = (event: MessageEvent) => {\r\n        const message = event.data\r\n        if (message.status) {\r\n          this.loadingText = message.status\r\n        } else if (message.error) {\r\n          this.csvWorker?.terminate()\r\n          this.loadingText = message.error\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `Aggr.OD: Error loading \"${this.myState.subfolder}/${this.vizDetails.csvFile}\"`,\r\n            desc: `Check the path and filename`,\r\n          })\r\n        } else if (message.finished) {\r\n          this.csvWorker?.terminate()\r\n          this.finishedLoadingData(message)\r\n        }\r\n      }\r\n\r\n      this.csvWorker.postMessage({ fileSystem: this.fileSystem, filePath: csvFilename })\r\n    },\r\n\r\n    async finishedLoadingData(message: any) {\r\n      console.log(222, 'done') // message)\r\n      this.loadingText = 'Building diagram...'\r\n      this.isFinishedLoading = true\r\n      await this.$nextTick()\r\n      this.rowName = message.rowName\r\n      this.colName = message.colName\r\n      this.headers = message.headers\r\n      this.dailyData = message.dailyZoneData\r\n      this.zoneData = message.zoneData\r\n      this.linkData = message.dailyLinkData\r\n\r\n      this.marginals = await this.getDailyDataSummary()\r\n      this.buildCentroids(this.geojson)\r\n      this.convertRegionColors(this.geojson)\r\n      this.addGeojsonToMap(this.geojson)\r\n      this.setMapExtent()\r\n      this.buildSpiderLinks()\r\n      this.setupKeyListeners()\r\n      this.loadingText = ''\r\n    },\r\n\r\n    updateMapExtent(coordinates: any) {\r\n      this._mapExtentXYXY[0] = Math.min(this._mapExtentXYXY[0], coordinates[0])\r\n      this._mapExtentXYXY[1] = Math.min(this._mapExtentXYXY[1], coordinates[1])\r\n      this._mapExtentXYXY[2] = Math.max(this._mapExtentXYXY[2], coordinates[0])\r\n      this._mapExtentXYXY[3] = Math.max(this._mapExtentXYXY[3], coordinates[1])\r\n    },\r\n\r\n    addGeojsonToMap(geojson: any) {\r\n      this.processGeojson()\r\n      this.addGeojsonLayers(geojson)\r\n      this.addNeighborhoodHoverEffects()\r\n    },\r\n\r\n    addGeojsonLayers(geojson: any) {\r\n      if (!this.mymap.getSource('shpsource')) {\r\n        this.mymap.addSource('shpsource', {\r\n          data: geojson,\r\n          type: 'geojson',\r\n        } as any)\r\n      }\r\n\r\n      if (this.mymap.getLayer('shplayer-fill')) this.mymap.removeLayer('shplayer-fill')\r\n      this.mymap.addLayer(\r\n        {\r\n          id: 'shplayer-fill',\r\n          source: 'shpsource',\r\n          type: 'fill',\r\n          paint: {\r\n            'fill-color': ['rgb', ['get', 'blue'], ['get', 'blue'], 255],\r\n            'fill-opacity': 0.5,\r\n          },\r\n        },\r\n        'water'\r\n      )\r\n\r\n      if (this.mymap.getLayer('shplayer-border')) this.mymap.removeLayer('shplayer-border')\r\n      this.mymap.addLayer(\r\n        {\r\n          id: 'shplayer-border',\r\n          source: 'shpsource',\r\n          type: 'line',\r\n          paint: {\r\n            'line-color': '#66f',\r\n            'line-opacity': 0.5,\r\n            'line-width': ['case', ['boolean', ['feature-state', 'hover'], false], 3, 1],\r\n          },\r\n          filter: ['==', 'isVisible', true],\r\n        },\r\n        'centroid-layer'\r\n      )\r\n    },\r\n\r\n    addNeighborhoodHoverEffects() {\r\n      const parent = this\r\n      this.mymap.on('mousemove', 'shplayer-fill', function (e: any) {\r\n        // typescript definitions and mapbox-gl are out of sync at the moment :-(\r\n        // so setFeatureState is missing\r\n        const tsMap = parent.mymap as any\r\n        if (e.features.length > 0) {\r\n          if (parent.hoveredStateId) {\r\n            tsMap.setFeatureState(\r\n              { source: 'shpsource', id: parent.hoveredStateId },\r\n              { hover: false }\r\n            )\r\n          }\r\n          parent.hoveredStateId = e.features[0].properties[parent.idColumn]\r\n          tsMap.setFeatureState({ source: 'shpsource', id: parent.hoveredStateId }, { hover: true })\r\n        }\r\n      })\r\n\r\n      // When the mouse leaves the state-fill layer, update the feature state of the\r\n      // previously hovered feature.\r\n      this.mymap.on('mouseleave', 'shplayer-fill', function () {\r\n        const tsMap = parent.mymap as any\r\n        if (parent.hoveredStateId) {\r\n          tsMap.setFeatureState(\r\n            { source: 'shpsource', id: parent.hoveredStateId },\r\n            { hover: false }\r\n          )\r\n        }\r\n        parent.hoveredStateId = null\r\n      })\r\n    },\r\n\r\n    offsetLineByMeters(line: any, metersToTheRight: number) {\r\n      try {\r\n        const offsetLine = turf.lineOffset(line, metersToTheRight, { units: 'meters' })\r\n        return offsetLine\r\n      } catch (e) {\r\n        // offset can fail if points are exactly on top of each other; ignore.\r\n      }\r\n      return line\r\n    },\r\n\r\n    pressedEscape() {\r\n      this.unselectAllCentroids()\r\n    },\r\n\r\n    pressedArrowKey(delta: number) {},\r\n\r\n    changedTimeSlider(value: any) {\r\n      this.currentTimeBin = value\r\n\r\n      const widthFactor = (this.currentScale / 500) * this.scaleFactor\r\n\r\n      if (this.showTimeRange == false) {\r\n        this.mymap.setPaintProperty('spider-layer', 'line-width', [\r\n          '*',\r\n          widthFactor,\r\n          ['get', value],\r\n        ])\r\n        this.mymap.setPaintProperty('spider-layer', 'line-offset', [\r\n          '*',\r\n          0.5 * widthFactor,\r\n          ['get', value],\r\n        ])\r\n      } else {\r\n        const sumElements: any = ['+']\r\n\r\n        // build the summation expressions: e.g. ['+', ['get', '1'], ['get', '2']]\r\n        let include = false\r\n        for (const header of this.headers) {\r\n          if (header === value[0]) include = true\r\n\r\n          // don't double-count the total\r\n          if (header === TOTAL_MSG) continue\r\n\r\n          if (include) sumElements.push(['get', header])\r\n\r\n          if (header === value[1]) include = false\r\n        }\r\n\r\n        this.mymap.setPaintProperty('spider-layer', 'line-width', ['*', widthFactor, sumElements])\r\n        this.mymap.setPaintProperty('spider-layer', 'line-offset', [\r\n          '*',\r\n          0.5 * widthFactor,\r\n          sumElements,\r\n        ])\r\n      }\r\n\r\n      this.handleCentroidsForTimeOfDayChange(value)\r\n    },\r\n\r\n    changedScale(value: any) {\r\n      if (!this.isFinishedLoading) return\r\n\r\n      // console.log({ slider: value, timebin: this.currentTimeBin })\r\n      this.currentScale = value\r\n      this.changedTimeSlider(this.currentTimeBin)\r\n    },\r\n\r\n    changedLineFilter(value: any) {\r\n      if (value === 'Alle') this.lineFilter = Infinity\r\n      else this.lineFilter = value\r\n\r\n      this.updateSpiderLinks()\r\n    },\r\n  },\r\n  watch: {\r\n    'globalState.viewState'(value: any) {\r\n      if (this.mapIsIndependent) return\r\n      if (!this.mymap || this.isMapMoving || this.thumbnail) {\r\n        this.isMapMoving = false\r\n        return\r\n      }\r\n\r\n      const { bearing, longitude, latitude, zoom, pitch } = value\r\n      // sometimes closing a view returns a null map, ignore it!\r\n      if (!zoom) return\r\n\r\n      try {\r\n        this.mymap.off('move', this.handleMapMotion)\r\n\r\n        this.mymap.jumpTo({\r\n          bearing,\r\n          zoom,\r\n          center: [longitude, latitude],\r\n          pitch,\r\n        })\r\n        // back on again\r\n        this.mymap.on('move', this.handleMapMotion)\r\n      } catch (e) {\r\n        // oh well\r\n      }\r\n    },\r\n\r\n    '$store.state.colorScheme'() {\r\n      this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\r\n      if (!this.mymap) return\r\n\r\n      this.mymap.setStyle(globalStore.getters.mapStyle)\r\n\r\n      this.mymap.on('style.load', () => {\r\n        this.buildCentroids(this.geojson)\r\n        this.buildSpiderLinks()\r\n        this.addGeojsonToMap(this.geojson)\r\n        // this.setupKeyListeners()\r\n      })\r\n    },\r\n\r\n    '$store.state.resizeEvents'() {\r\n      if (this.mymap) this.mymap.resize()\r\n    },\r\n\r\n    showTimeRange() {\r\n      // console.log(this.showTimeRange)\r\n    },\r\n\r\n    showCentroids() {\r\n      this.updateCentroidLabels()\r\n    },\r\n\r\n    showCentroidLabels() {\r\n      this.updateCentroidLabels()\r\n    },\r\n  },\r\n  async created() {\r\n    this._mapExtentXYXY = [180, 90, -180, -90]\r\n    this._maximum = 0\r\n  },\r\n  async mounted() {\r\n    globalStore.commit('setFullScreen', !this.thumbnail)\r\n    this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\r\n\r\n    this.bounceTimeSlider = debounce(this.changedTimeSlider, 100)\r\n    this.bounceScaleSlider = debounce(this.changedScale, 50)\r\n    this.bounceLineFilter = debounce(this.changedLineFilter, 250)\r\n\r\n    this.myState.thumbnail = this.thumbnail\r\n    this.myState.yamlConfig = this.yamlConfig || ''\r\n    this.myState.subfolder = this.subfolder\r\n\r\n    await this.getVizDetails()\r\n\r\n    if (this.thumbnail) return\r\n\r\n    this.setupMap()\r\n    this.configureSettings()\r\n    this.setupResizer()\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.csvWorker) this.csvWorker.terminate()\r\n  },\r\n\r\n  destroyed() {\r\n    globalStore.commit('setFullScreen', false)\r\n  },\r\n})\r\n\r\nexport default Component\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\nh3 {\r\n  margin: 0px 0px;\r\n}\r\n\r\nh4 {\r\n  margin-left: 3px;\r\n}\r\n\r\n.mycomponent {\r\n  // position: absolute;\r\n  display: grid;\r\n  grid-template-columns: auto 1fr;\r\n  grid-template-rows: 1fr auto;\r\n  // position: relative;\r\n}\r\n\r\n.status-blob {\r\n  position: absolute;\r\n  bottom: 0.5rem;\r\n  left: 0.5rem;\r\n  background-color: white;\r\n  padding: 0.75rem 1.5rem;\r\n  z-index: 5;\r\n  filter: $filterShadow;\r\n  font-size: 1.2rem;\r\n}\r\n\r\n.map-container {\r\n  height: 100%;\r\n  min-height: $thumbnailHeight;\r\n  // background-color: #eee;\r\n  grid-column: 1 / 3;\r\n  grid-row: 1 / 3;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n}\r\n\r\n.mymap {\r\n  flex: 1;\r\n}\r\n\r\n.mytitle {\r\n  margin-left: 10px;\r\n  color: var(--text);\r\n}\r\n\r\n.details {\r\n  font-size: 12px;\r\n  margin-bottom: auto;\r\n  margin-top: auto;\r\n}\r\n\r\n.info-header {\r\n  padding: 0.5rem 0rem;\r\n}\r\n\r\n.widgets {\r\n  color: var(--text);\r\n  display: flex;\r\n  flex-direction: row;\r\n  user-select: none;\r\n  background-color: var(--bgMapPanel);\r\n  grid-column: 1 / 3;\r\n}\r\n\r\n.widget-column {\r\n  margin-right: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.status-blob p {\r\n  color: #555;\r\n}\r\n\r\n.lower-right {\r\n  position: absolute;\r\n  bottom: 2rem;\r\n  right: 0.5rem;\r\n  display: flex;\r\n  z-index: 1;\r\n}\r\n\r\n.lower-left {\r\n  width: 10rem;\r\n  position: absolute;\r\n  left: 5px;\r\n  bottom: 2rem;\r\n  right: 0.5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  z-index: 1;\r\n  background-color: var(--bgPanel);\r\n  opacity: 0.9;\r\n  filter: $filterShadow;\r\n  border: solid 1px rgba(161, 160, 160, 0.781);\r\n  border-radius: 2px;\r\n  padding-bottom: 0.25rem;\r\n}\r\n\r\n.complication {\r\n  margin: 0rem 0rem 0rem 0.25rem;\r\n}\r\n\r\n.widget-column button {\r\n  // flex-grow: 1;\r\n  margin: 1px 0px;\r\n}\r\n\r\n.heading {\r\n  font-weight: bold;\r\n  text-align: left;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.subheading {\r\n  text-align: left;\r\n  font-size: 0.9rem;\r\n  line-height: 1rem;\r\n  margin: 0.25rem 0 0rem 0.5rem;\r\n}\r\n\r\n.description {\r\n  margin-top: 0rem;\r\n  padding: 0rem 0.25rem;\r\n}\r\n\r\n.hide-button {\r\n  grid-column: 1/2;\r\n  grid-row: 2/3;\r\n  margin: auto auto 0.5rem 16.5rem;\r\n  z-index: 20;\r\n}\r\n\r\n.hide-toggle-button {\r\n  margin-left: 0.25rem;\r\n}\r\n\r\n.left-panel {\r\n  z-index: 2;\r\n  position: absolute;\r\n  top: 0rem;\r\n  left: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  pointer-events: auto;\r\n  max-height: 50%;\r\n  max-width: 50%;\r\n  width: 18rem;\r\n}\r\n\r\n.mapboxgl-popup-content {\r\n  padding: 0px 20px 0px 0px;\r\n  opacity: 0.95;\r\n  box-shadow: 0 0 3px #00000080;\r\n}\r\n\r\n.white-box {\r\n  padding: 0.5rem 0.25rem 0.5rem 0.25rem;\r\n}\r\n\r\n.zoom-buttons {\r\n  position: absolute;\r\n  top: 0.3rem;\r\n  right: 0.3rem;\r\n  z-index: 1;\r\n}\r\n\r\n.checkbox {\r\n  font-size: 0.9rem;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.checkbox:hover {\r\n  color: var(--textFancy);\r\n}\r\n\r\n.xtime-slider {\r\n  margin-top: -0.25rem;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n}\r\n</style>\r\n","\r\n.mycomponent(:id=\"containerId\")\r\n\r\n  zoom-buttons.zoom-buttons(v-if=\"!thumbnail\")\r\n\r\n  .map-container\r\n    .mymap(:id=\"mapId\")\r\n\r\n    .status-blob(v-show=\"!thumbnail && loadingText\")\r\n      p {{ loadingText }}\r\n\r\n    .lower-left(v-if=\"!thumbnail && !loadingText\")\r\n      .subheading {{ $t('lineWidths')}}\r\n      scale-slider.scale-slider(:stops='scaleValues' :initialValue='currentScale' @change='bounceScaleSlider')\r\n\r\n      .subheading {{ $t('hide')}}\r\n      line-filter-slider.scale-slider(\r\n        :initialValue=\"lineFilter\"\r\n        @change='bounceLineFilter')\r\n\r\n    .lower-right(v-if=\"!thumbnail && !isMobile\")\r\n      legend-box.complication(:rows=\"legendRows\")\r\n      scale-box.complication(:rows=\"scaleRows\")\r\n\r\n  .widgets(v-if=\"!thumbnail\" :style=\"{'padding': yamlConfig ? '0 0.5rem 0.5rem 0.5rem' : '0 0'}\")\r\n\r\n    //- TIME SLIDER ----\r\n    .widget-column(v-if=\"this.headers.length > 2\" style=\"min-width: 8rem\")\r\n      h4.heading {{ $t('time')}}\r\n      b-checkbox.checkbox(v-model=\"showTimeRange\") {{ $t('duration') }}\r\n      time-slider.xtime-slider(\r\n        :useRange=\"showTimeRange\"\r\n        :stops=\"headers\"\r\n        :all=\"allTimeBinsLabel\"\r\n        @change=\"bounceTimeSlider\")\r\n\r\n    //- CENTROID CONTROLS\r\n    .widget-column\r\n      h4.heading {{ $t('circle')}}\r\n      b-checkbox.checkbox(v-model=\"showCentroids\")\r\n        | &nbsp;{{ $t('showCentroids')}}\r\n      b-checkbox.checkbox(v-model=\"showCentroidLabels\")\r\n        | &nbsp;{{$t('showNumbers')}}\r\n\r\n    //- ORIG/DEST BUTTONS\r\n    .widget-column(style=\"margin: 0 0 0 auto\")\r\n      h4.heading {{$t('total')}}\r\n      b-button.is-small(@click='clickedOrigins' :class='{\"is-link\": isOrigin ,\"is-active\": isOrigin}') {{$t('origins')}}\r\n      b-button.is-small(@click='clickedDestinations' hint=\"Hide\" :class='{\"is-link\": !isOrigin,\"is-active\": !isOrigin}') {{$t('dest')}}\r\n\r\n"],"names":["__vue2_script$4","defineComponent","name","i18n","messages","en","linewidth","legend","de","props","rows","type","Array","required","_vm","this","_h","$createElement","_c","_self","attrs","id","staticClass","_v","_s","$t","_l","item","includes","style","_e","__vue2_script$3","initialValue","Number","data","sliderValue","options","size","indicator","min","max","tooltip","mounted","val","indexOf","length","watch","result","$emit","_b","model","value","callback","$$v","expression","tick","i","key","__vue2_script$2","trips","__vue2_script$1","components","useRange","Boolean","all","String","stops","computed","allStops","stopLabel","isArray","useIt","timePeriod","methods","stop","__vue2_script","sliderChangedEvent","SCALE_WIDTH","Component","lineWidth","lineWidths","hide","time","duration","circle","showCentroids","showNumbers","total","origins","dest","CollapsiblePanel","LegendBox","LineFilterSlider","ScaleBox","ScaleSlider","TimeSlider","ZoomButtons","VueSlider","root","subfolder","yamlConfig","config","Object","thumbnail","globalState","globalStore","state","isFinishedLoading","myState","vizDetails","csvFile","shpFile","dbfFile","projection","scaleFactor","title","description","mapIsIndependent","standaloneYAMLconfig","YAMLrequirementsOD","containerId","Math","floor","random","mapId","centroids","centroidSource","linkData","spiderLinkFeatureCollection","zoneData","dailyData","marginals","hoveredStateId","rowName","colName","headers","geojson","idColumn","showTimeRange","showCentroidLabels","isOrigin","selectedCentroid","maxZonalTotal","loadingText","mymap","project","scaleValues","currentScale","currentTimeBin","allTimeBinsLabel","lineFilter","hoverId","_mapExtentXYXY","_maximum","bounceTimeSlider","bounceScaleSlider","bounceLineFilter","resizer","isMapMoving","isDarkMode","csvWorker","fileSystem","svnProject","$store","svnProjects","filter","a","slug","console","log","Error","fileApi","HTTPFileSystem","isMobile","w","window","d","document","e","documentElement","g","getElementsByTagName","x","innerWidth","clientWidth","innerHeight","clientHeight","legendRows","scaleRows","round","pow","sqrt","setupResizer","ResizeObserver","resize","viz","getElementById","observe","configureSettings","hideSmallerThan","handleMapMotion","mapCamera","longitude","getCenter","lng","latitude","lat","bearing","getBearing","zoom","getZoom","pitch","getPitch","commit","getVizDetails","validateYAML","assign","filename","text","getFileText","YAML","parse","setVizDetails","error","nprogress","done","configuration","RegExp","test","Status","ERROR","msg","desc","t","findFilenameFromWildcard","path","folder","substring","lastIndexOf","files","getDirectory","pattern","match","findMatchingGlobInFiles","loadFiles","shpFilename","dbfFilename","blob","getFileBlob","readBlob","arraybuffer","blob2","statusText","url","setupMap","maplibregl","Map","container","getters","mapStyle","logoPosition","extent","localStorage","getItem","$route","fullPath","lnglat","JSON","jump","on","handleEmptyClick","mapIsReady","baubles","getElementsByClassName","elem","setAttribute","queryRenderedFeatures","point","feature","source","fadeUnselectedLinks","processShapefile","loadCSVData","createSpiderLinks","features","keys","link","daily","origCoord","orig","geometry","coordinates","destCoord","color","fade","properties","values","forEach","push","updateSpiderLinks","getSource","setData","buildSpiderLinks","addSource","getLayer","removeLayer","addLayer","paint","changedScale","parent","clickedOnSpiderLink","getCanvas","cursor","clickedOrigins","updateCentroidLabels","convertRegionColors","clickedDestinations","labels","radiusField","layout","visibility","unselectAllCentroids","clickedOnCentroid","originalEvent","stopPropagating","tsMap","endpoints","split","revTrips","reverseDir","totalTrips","html","Popup","closeOnClick","setLngLat","lngLat","setHTML","addTo","blue","dailyFrom","dailyTo","handleCentroidsForTimeOfDayChange","centroid","turf.centerOfMass","calculateCentroidValuesForZone","from","to","digits","log10","widthFrom","widthTo","fromMarginal","toMarginal","hourFrom","hourTo","hour","buildCentroids","rowTotal","colTotal","updateMapExtent","setMapExtent","setItem","stringify","animate","padding","top","bottom","right","left","fitBounds","setupKeyListeners","addEventListener","event","keyCode","pressedEscape","pressedArrowKey","processGeojson","isVisible","shapefile.read","convertMultiPolygonCoordinatesToWGS84","convertPolygonCoordinatesToWGS84","polygon","origCoords","newCoords","p","Coords","toLngLat","origConvertMultiPolygonCoordinatesToWGS84","multipolygon","proj4","recurseWGS84","coords","coordArray","getDailyDataSummary","fromCentroid","toCentroid","row","fill","col","csvFilename","CSVWorker","onmessage","message","status","_a","terminate","finished","finishedLoadingData","postMessage","filePath","$nextTick","dailyZoneData","dailyLinkData","addGeojsonToMap","addGeojsonLayers","addNeighborhoodHoverEffects","setFeatureState","hover","offsetLineByMeters","line","metersToTheRight","turf.lineOffset","units","delta","changedTimeSlider","widthFactor","setPaintProperty","sumElements","include","header","changedLineFilter","Infinity","off","jumpTo","center","colorScheme","ColorScheme","DarkMode","setStyle","created","debounce","beforeDestroy","destroyed","directives","rawName","change","staticStyle","margin","class","click","hint"],"mappings":"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"}