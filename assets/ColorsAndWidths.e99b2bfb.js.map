{"version":3,"file":"ColorsAndWidths.e99b2bfb.js","sources":["../../node_modules/d3-scale/node_modules/d3-array/src/ascending.js","../../node_modules/d3-scale/node_modules/d3-array/src/bisector.js","../../node_modules/d3-scale/node_modules/d3-array/src/bisect.js","../../node_modules/d3-scale/node_modules/d3-array/src/number.js","../../node_modules/d3-scale/src/init.js","../../node_modules/d3-scale/src/ordinal.js","../../node_modules/d3-scale/src/threshold.js","../../node_modules/d3-scale-chromatic/src/colors.js","../../node_modules/d3-scale-chromatic/src/categorical/category10.js","../../node_modules/d3-scale-chromatic/src/categorical/Accent.js","../../node_modules/d3-scale-chromatic/src/categorical/Dark2.js","../../node_modules/d3-scale-chromatic/src/categorical/Paired.js","../../node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","../../node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","../../node_modules/d3-scale-chromatic/src/categorical/Set1.js","../../node_modules/d3-scale-chromatic/src/categorical/Set2.js","../../node_modules/d3-scale-chromatic/src/categorical/Set3.js","../../node_modules/d3-scale-chromatic/src/categorical/Tableau10.js","../../node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/rgb.js","../../node_modules/d3-scale-chromatic/node_modules/d3-interpolate/src/basis.js","../../node_modules/d3-scale-chromatic/src/ramp.js","../../node_modules/d3-scale-chromatic/src/diverging/BrBG.js","../../node_modules/d3-scale-chromatic/src/diverging/PRGn.js","../../node_modules/d3-scale-chromatic/src/diverging/PiYG.js","../../node_modules/d3-scale-chromatic/src/diverging/PuOr.js","../../node_modules/d3-scale-chromatic/src/diverging/RdBu.js","../../node_modules/d3-scale-chromatic/src/diverging/RdGy.js","../../node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","../../node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","../../node_modules/d3-scale-chromatic/src/diverging/Spectral.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","../../node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js","../../node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js","../../src/js/ColorsAndWidths.ts"],"sourcesContent":["export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending.js\";\n\nexport default function(f) {\n  let delta = f;\n  let compare = f;\n\n  if (f.length === 1) {\n    delta = (d, x) => f(d) - x;\n    compare = ascendingComparator(f);\n  }\n\n  function left(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) < 0) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  function right(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1;\n      if (compare(a[mid], x) > 0) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  function center(a, x, lo, hi) {\n    if (lo == null) lo = 0;\n    if (hi == null) hi = a.length;\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction ascendingComparator(f) {\n  return (d, x) => ascending(f(d), x);\n}\n","import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n","export default function(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n","import {initRange} from \"./init.js\";\n\nexport const implicit = Symbol(\"implicit\");\n\nexport default function ordinal() {\n  var index = new Map(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    var key = d + \"\", i = index.get(key);\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new Map();\n    for (const value of _) {\n      const key = value + \"\";\n      if (index.has(key)) continue;\n      index.set(key, domain.push(value));\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n","import {bisect} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport default function threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      unknown,\n      n = 1;\n\n  function scale(x) {\n    return x != null && x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return threshold()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","export default function(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n","import colors from \"../colors.js\";\n\nexport default colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\");\n","import colors from \"../colors.js\";\n\nexport default colors(\"4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab\");\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import {interpolateRgbBasis} from \"d3-interpolate\";\n\nexport default function(scheme) {\n  return interpolateRgbBasis(scheme[scheme.length - 1]);\n}\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"d8b365f5f5f55ab4ac\",\n  \"a6611adfc27d80cdc1018571\",\n  \"a6611adfc27df5f5f580cdc1018571\",\n  \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\n  \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\n  \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\n  \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n  \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\n  \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"af8dc3f7f7f77fbf7b\",\n  \"7b3294c2a5cfa6dba0008837\",\n  \"7b3294c2a5cff7f7f7a6dba0008837\",\n  \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\n  \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\n  \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\n  \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\n  \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n  \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e9a3c9f7f7f7a1d76a\",\n  \"d01c8bf1b6dab8e1864dac26\",\n  \"d01c8bf1b6daf7f7f7b8e1864dac26\",\n  \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\n  \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\n  \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\n  \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\n  \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\n  \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"998ec3f7f7f7f1a340\",\n  \"5e3c99b2abd2fdb863e66101\",\n  \"5e3c99b2abd2f7f7f7fdb863e66101\",\n  \"542788998ec3d8daebfee0b6f1a340b35806\",\n  \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\n  \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\n  \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\n  \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\n  \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62f7f7f767a9cf\",\n  \"ca0020f4a58292c5de0571b0\",\n  \"ca0020f4a582f7f7f792c5de0571b0\",\n  \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\n  \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\n  \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\n  \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\n  \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\n  \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62ffffff999999\",\n  \"ca0020f4a582bababa404040\",\n  \"ca0020f4a582ffffffbababa404040\",\n  \"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n  \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\n  \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\n  \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\n  \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\n  \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91bfdb\",\n  \"d7191cfdae61abd9e92c7bb6\",\n  \"d7191cfdae61ffffbfabd9e92c7bb6\",\n  \"d73027fc8d59fee090e0f3f891bfdb4575b4\",\n  \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\n  \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n  \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\n  \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\n  \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91cf60\",\n  \"d7191cfdae61a6d96a1a9641\",\n  \"d7191cfdae61ffffbfa6d96a1a9641\",\n  \"d73027fc8d59fee08bd9ef8b91cf601a9850\",\n  \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\n  \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\n  \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\n  \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n  \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf99d594\",\n  \"d7191cfdae61abdda42b83ba\",\n  \"d7191cfdae61ffffbfabdda42b83ba\",\n  \"d53e4ffc8d59fee08be6f59899d5943288bd\",\n  \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\n  \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\n  \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\n  \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\n  \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5f999d8c92ca25f\",\n  \"edf8fbb2e2e266c2a4238b45\",\n  \"edf8fbb2e2e266c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e0ecf49ebcda8856a7\",\n  \"edf8fbb3cde38c96c688419d\",\n  \"edf8fbb3cde38c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e0f3dba8ddb543a2ca\",\n  \"f0f9e8bae4bc7bccc42b8cbe\",\n  \"f0f9e8bae4bc7bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fee8c8fdbb84e34a33\",\n  \"fef0d9fdcc8afc8d59d7301f\",\n  \"fef0d9fdcc8afc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ece2f0a6bddb1c9099\",\n  \"f6eff7bdc9e167a9cf02818a\",\n  \"f6eff7bdc9e167a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ece7f2a6bddb2b8cbe\",\n  \"f1eef6bdc9e174a9cf0570b0\",\n  \"f1eef6bdc9e174a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e7e1efc994c7dd1c77\",\n  \"f1eef6d7b5d8df65b0ce1256\",\n  \"f1eef6d7b5d8df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fde0ddfa9fb5c51b8a\",\n  \"feebe2fbb4b9f768a1ae017e\",\n  \"feebe2fbb4b9f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"edf8b17fcdbb2c7fb8\",\n  \"ffffcca1dab441b6c4225ea8\",\n  \"ffffcca1dab441b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"f7fcb9addd8e31a354\",\n  \"ffffccc2e69978c679238443\",\n  \"ffffccc2e69978c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fff7bcfec44fd95f0e\",\n  \"ffffd4fed98efe9929cc4c02\",\n  \"ffffd4fed98efe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"ffeda0feb24cf03b20\",\n  \"ffffb2fecc5cfd8d3ce31a1c\",\n  \"ffffb2fecc5cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"deebf79ecae13182bd\",\n  \"eff3ffbdd7e76baed62171b5\",\n  \"eff3ffbdd7e76baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5e0a1d99b31a354\",\n  \"edf8e9bae4b374c476238b45\",\n  \"edf8e9bae4b374c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"f0f0f0bdbdbd636363\",\n  \"f7f7f7cccccc969696525252\",\n  \"f7f7f7cccccc969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"efedf5bcbddc756bb1\",\n  \"f2f0f7cbc9e29e9ac86a51a3\",\n  \"f2f0f7cbc9e29e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fee0d2fc9272de2d26\",\n  \"fee5d9fcae91fb6a4acb181d\",\n  \"fee5d9fcae91fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors.js\";\nimport ramp from \"../ramp.js\";\n\nexport var scheme = new Array(3).concat(\n  \"fee6cefdae6be6550d\",\n  \"feeddefdbe85fd8d3cd94701\",\n  \"feeddefdbe85fd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\"\n).map(colors);\n\nexport default ramp(scheme);\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport default interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n","import {rgb} from \"d3-color\";\n\nvar c = rgb(),\n    pi_1_3 = Math.PI / 3,\n    pi_2_3 = Math.PI * 2 / 3;\n\nexport default function(t) {\n  var x;\n  t = (0.5 - t) * Math.PI;\n  c.r = 255 * (x = Math.sin(t)) * x;\n  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;\n  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;\n  return c + \"\";\n}\n","import colors from \"../colors.js\";\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\nexport default ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\nexport var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\nexport var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\nexport var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n","export default function(t) {\n  t = Math.max(0, Math.min(1, t));\n  return \"rgb(\"\n      + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))\n      + \")\";\n}\n","export default function(t) {\n  t = Math.max(0, Math.min(1, t));\n  return \"rgb(\"\n      + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\n      + \")\";\n}\n","// Helper functions to get colors from a column of data, using D3\r\nimport { scaleLinear, scaleThreshold, scaleOrdinal } from 'd3-scale'\r\nimport { rgb } from 'd3-color'\r\n\r\nimport * as d3sc from 'd3-scale-chromatic'\r\nimport * as d3color from 'd3-color'\r\nconst d3 = { ...d3sc, ...d3color }\r\n\r\nimport { DataTableColumn, DataType, Status } from '@/Globals'\r\n\r\nimport store from '@/store'\r\n\r\nexport enum Style {\r\n  categorical,\r\n  diverging,\r\n  sequential,\r\n}\r\n\r\nexport interface Ramp {\r\n  ramp: string\r\n  style: Style\r\n  reverse?: boolean\r\n  steps?: number\r\n  breakpoints?: string\r\n}\r\n\r\nexport function colorRamp(scale: Ramp, n: number): string[] {\r\n  let colors\r\n\r\n  // categorical\r\n  if (scale.style === Style.categorical) {\r\n    const categories = d3[`scheme${scale.ramp}`]\r\n    return categories.slice(0, n)\r\n  }\r\n\r\n  // sequential and diverging\r\n  const scheme = `scheme${scale.ramp}`\r\n  if (n > 3 && d3[scheme] && d3[scheme][n]) {\r\n    colors = d3[`scheme${scale.ramp}`][n]\r\n  } else {\r\n    try {\r\n      const interpolate = d3[`interpolate${scale.ramp}`]\r\n      colors = []\r\n      for (let i = 0; i < n; ++i) {\r\n        // shave off the very dark edges of each band at low \"n\"\r\n        const fraction = n <= 3 ? (0.7 * i) / (n - 1) + 0.15 : i / (n - 1)\r\n        const rgb = interpolate(fraction)\r\n        const hex = d3.rgb(rgb).hex()\r\n        colors.push(hex)\r\n      }\r\n    } catch (e) {\r\n      // some ramps cannot be interpolated, give the highest one instead.\r\n      return colorRamp(scale, n - 1)\r\n    }\r\n  }\r\n\r\n  // fix center color if diverging: pale grey\r\n  if (scale.style === Style.diverging && n % 2 === 1) {\r\n    colors[Math.floor(n / 2)] = store.state.isDarkMode ? '#282828' : '#e4e4e4'\r\n  }\r\n\r\n  return colors\r\n}\r\n\r\nfunction getColorsForDataColumn(props: {\r\n  numFeatures: number\r\n  data: DataTableColumn\r\n  data2?: DataTableColumn\r\n  lookup: DataTableColumn\r\n  lookup2?: DataTableColumn\r\n  normalize?: DataTableColumn\r\n  normalLookup?: DataTableColumn\r\n  filter: Float32Array\r\n  options: any\r\n  relative?: boolean\r\n  join?: string\r\n}) {\r\n  // First: if there is no dataColumn yet, return empty everything\r\n  if (!props.data)\r\n    return {\r\n      array: null,\r\n      legend: [],\r\n      calculatedValues: null,\r\n      normalizedValues: null,\r\n    }\r\n\r\n  // Figure out what kind of thing the user wants\r\n  if (props.data.type === DataType.STRING || props.options.colorRamp.style == Style.categorical) {\r\n    return buildColorsBasedOnCategories(props)\r\n  } else if (props.data2) {\r\n    return buildDiffColorsBasedOnNumericValues(props)\r\n  } else {\r\n    return buildColorsBasedOnNumericValues(props)\r\n  }\r\n}\r\n\r\nfunction getWidthsForDataColumn(props: {\r\n  numFeatures: number\r\n  data: DataTableColumn\r\n  data2?: DataTableColumn\r\n  lookup: DataTableColumn\r\n  lookup2?: DataTableColumn\r\n  normalize?: DataTableColumn\r\n  join?: string\r\n  options: any\r\n}) {\r\n  // Figure out what kind of thing the user wants\r\n  if (props.data.type === DataType.STRING) {\r\n    return buildWidthsBasedOnCategories(props)\r\n  } else if (props.data2) {\r\n    return buildDiffWidthsBasedOnNumericValues(props)\r\n  } else {\r\n    return buildWidthsBasedOnNumericValues(props)\r\n  }\r\n}\r\n\r\nfunction buildWidthsBasedOnCategories(props: {\r\n  numFeatures: number\r\n  data: DataTableColumn\r\n  lookup: DataTableColumn\r\n  normalize?: DataTableColumn\r\n  options: any\r\n}) {\r\n  const { columnName, dataset, scaleFactor } = props.options\r\n\r\n  return { array: new Float32Array(), legend: [], calculatedValues: null }\r\n\r\n  // const keys = setColorBasedOnCategory.domain() as any[]\r\n  // const colors = setColorBasedOnCategory.range() as any[]\r\n  // console.log(keys, colors)\r\n  // keys.forEach((key, index) => (legend[key] = colors[index]))\r\n  // console.log({ legend })\r\n\r\n  // return rgbArray\r\n}\r\n\r\nfunction buildDiffWidthsBasedOnNumericValues(props: {\r\n  numFeatures: number\r\n  data: DataTableColumn\r\n  data2?: DataTableColumn\r\n  lookup: DataTableColumn\r\n  lookup2?: DataTableColumn\r\n  normalize?: DataTableColumn\r\n  join?: string\r\n  options: any\r\n}) {\r\n  const { numFeatures, data, data2, lookup, lookup2, normalize, join, options } = props\r\n  const { columnName, dataset, scaleFactor, relative } = options\r\n\r\n  if (isNaN(scaleFactor)) return { array: null, legend: [], calculatedValues: null }\r\n\r\n  const widths = new Float32Array(numFeatures)\r\n\r\n  // Calculate the raw values for each feature\r\n  const rawValues1 = new Float32Array(numFeatures)\r\n  const rawValues2 = new Float32Array(numFeatures)\r\n\r\n  if (data2 && lookup2) {\r\n    data.values.forEach((value, index) => {\r\n      rawValues1[lookup.values[index]] += value\r\n    })\r\n\r\n    data2.values.forEach((value, index) => {\r\n      rawValues2[lookup2.values[index]] += value\r\n    })\r\n  }\r\n\r\n  // Calc the differences\r\n  const diffValues = new Float32Array(numFeatures)\r\n  let pctDiffValues = new Float32Array(0)\r\n  if (relative) pctDiffValues = new Float32Array(numFeatures)\r\n\r\n  for (let i = 0; i < numFeatures; i++) {\r\n    diffValues[i] = rawValues1[i] - rawValues2[i]\r\n    if (relative) pctDiffValues[i] = 100 * (diffValues[i] / rawValues2[i])\r\n  }\r\n\r\n  const displayTheseDiffs = relative ? pctDiffValues : diffValues\r\n\r\n  if (scaleFactor) {\r\n    for (let i = 0; i < numFeatures; i++) {\r\n      widths[i] = Math.abs(displayTheseDiffs[i] / scaleFactor)\r\n    }\r\n  }\r\n\r\n  // console.log({ widths, displayTheseDiffs })\r\n\r\n  // For legend, let's show 1-2-4-8-16-32-64 pixels?\r\n  const legend = [] as any[]\r\n  for (const thickness of [1, 5, 10, 17, 25, 50]) {\r\n    legend.push({ label: scaleFactor * thickness, value: thickness })\r\n  }\r\n\r\n  legend[0].label = '<' + legend[0].label\r\n  legend[legend.length - 1].label = legend[legend.length - 1].label + '+'\r\n\r\n  return { array: widths, legend, calculatedValues: displayTheseDiffs }\r\n}\r\n\r\nfunction buildWidthsBasedOnNumericValues(props: {\r\n  numFeatures: number\r\n  data: DataTableColumn\r\n  lookup: DataTableColumn\r\n  normalize?: DataTableColumn\r\n  options: any\r\n}) {\r\n  const { numFeatures, data, lookup, normalize, options } = props\r\n  const { columnName, dataset, scaleFactor } = options\r\n\r\n  if (Number.isNaN(scaleFactor)) return { array: null, legend: [], calculatedValues: null }\r\n\r\n  const widths = new Float32Array(numFeatures)\r\n  const calculatedValues = new Float32Array(numFeatures)\r\n\r\n  if (scaleFactor) {\r\n    for (let i = 0; i < data.values.length; i++) {\r\n      const offset = lookup ? lookup.values[i] : i\r\n      widths[offset] = data.values[i] / scaleFactor\r\n      calculatedValues[offset] = data.values[i]\r\n    }\r\n  }\r\n\r\n  // For legend, let's show 1-2-4-8-16-32-64 pixels?\r\n  const legend = [] as any[]\r\n  for (const thickness of [1, 5, 10, 17, 25, 50]) {\r\n    legend.push({ label: scaleFactor * thickness, value: thickness })\r\n  }\r\n\r\n  legend[0].label = '<' + legend[0].label\r\n  legend[legend.length - 1].label = legend[legend.length - 1].label + '+'\r\n\r\n  return { array: widths, legend, calculatedValues }\r\n}\r\n\r\nfunction getHeightsBasedOnNumericValues(props: {\r\n  length: number\r\n  data: DataTableColumn\r\n  lookup: DataTableColumn\r\n  normalize?: DataTableColumn\r\n  join?: string\r\n  options: any\r\n}) {\r\n  const { length, data, lookup, normalize, join, options } = props\r\n  const { columnName, dataset, scaleFactor } = options\r\n\r\n  if (typeof scaleFactor !== 'number') return { heights: 0, calculatedValues: null }\r\n\r\n  const heights = new Float32Array(length)\r\n  const calculatedValues = new Float32Array(length)\r\n\r\n  if (join === '@count') {\r\n    // *** COUNT rows that have this lookup\r\n    for (let i = 0; i < data.values.length; i++) {\r\n      const offset = lookup ? lookup.values[i] : i\r\n      calculatedValues[offset] += 1\r\n    }\r\n  } else {\r\n    // *** SUM values in rows\r\n    for (let i = 0; i < data.values.length; i++) {\r\n      const offset = lookup ? lookup.values[i] : i\r\n      // always SUM, for now\r\n      calculatedValues[offset] += data.values[i]\r\n    }\r\n  }\r\n\r\n  let normalizedValues = data.values\r\n  let normalizedMax = data.max || -Infinity\r\n\r\n  // Normalize data\r\n  if (normalize) {\r\n    // console.log('NORMALIZING')\r\n    normalizedValues = new Float32Array(data.values.length)\r\n    normalizedMax = -Infinity\r\n    for (let i = 0; i < data.values.length; i++) {\r\n      normalizedValues[i] = normalize.values[i] ? data.values[i] / normalize.values[i] : NaN\r\n      if (normalizedValues[i] > normalizedMax) normalizedMax = normalizedValues[i]\r\n    }\r\n  }\r\n\r\n  if (scaleFactor) {\r\n    for (let i = 0; i < data.values.length; i++) {\r\n      const offset = lookup ? lookup.values[i] : i\r\n      calculatedValues[offset] = normalizedValues[i]\r\n      heights[offset] = normalizedValues[i] / scaleFactor\r\n    }\r\n  }\r\n  return { heights, calculatedValues, normalizedValues: null }\r\n}\r\n\r\nfunction getRadiusForDataColumn(props: {\r\n  length: number\r\n  data: DataTableColumn\r\n  lookup: DataTableColumn\r\n  normalize?: DataTableColumn\r\n  options: any\r\n  join?: string\r\n}) {\r\n  const { length, data, lookup, normalize, join, options } = props\r\n  const { columnName, dataset, scaleFactor } = options\r\n  // console.log(data, options)\r\n\r\n  if (typeof scaleFactor !== 'number') return { radius: 0, calculatedValues: null }\r\n\r\n  const radius = new Float32Array(length)\r\n  const calculatedValues = new Float32Array(length)\r\n\r\n  if (!scaleFactor) return { radius, calculatedValues }\r\n\r\n  if (join === '@count') {\r\n    // *** COUNT rows that have this lookup\r\n    for (let i = 0; i < data.values.length; i++) {\r\n      const offset = lookup ? lookup.values[i] : i\r\n      calculatedValues[offset] += 1\r\n    }\r\n  } else {\r\n    // *** SUM values in rows\r\n    for (let i = 0; i < data.values.length; i++) {\r\n      const offset = lookup ? lookup.values[i] : i\r\n      calculatedValues[offset] += data.values[i]\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    radius[i] = Math.sqrt(calculatedValues[i] / scaleFactor)\r\n  }\r\n\r\n  return { radius, calculatedValues }\r\n}\r\n\r\nfunction buildColorsBasedOnCategories(props: {\r\n  data: DataTableColumn\r\n  filter: Float32Array\r\n  join?: string\r\n  lookup: DataTableColumn\r\n  normalize?: DataTableColumn\r\n  numFeatures: number\r\n  options: any\r\n}) {\r\n  const { numFeatures, data, lookup, normalize, join, options } = props\r\n  const { colorRamp, columnName, dataset, fixedColors } = options\r\n\r\n  const colorsAsRGB = buildRGBfromHexCodes(fixedColors)\r\n\r\n  // *scaleOrdinal* is the d3 function that maps categorical variables to colors.\r\n  // *range* is the list of colors which we received;\r\n  // *domain* is is auto-created by d3 from data for categorical.\r\n\r\n  const setColorBasedOnCategory = scaleOrdinal().range(colorsAsRGB)\r\n\r\n  const gray = store.state.isDarkMode ? 48 : 228\r\n  const rgbArray = new Uint8Array(numFeatures * 3).fill(gray)\r\n\r\n  const calculatedValues = []\r\n\r\n  for (let i = 0; i < data.values.length; i++) {\r\n    const offset = lookup ? lookup.values[i] : i\r\n    calculatedValues[offset] = data.values[i]\r\n  }\r\n\r\n  for (let i = 0; i < numFeatures; i++) {\r\n    if (props.filter[i] === -1) continue\r\n    if (calculatedValues[i] == undefined) continue\r\n\r\n    const color: any = setColorBasedOnCategory(calculatedValues[i])\r\n\r\n    const offset = i * 3\r\n    rgbArray[offset + 0] = color[0]\r\n    rgbArray[offset + 1] = color[1]\r\n    rgbArray[offset + 2] = color[2]\r\n  }\r\n\r\n  const legend = [] as any[]\r\n  const keys = setColorBasedOnCategory.domain() as any[]\r\n  const colors = setColorBasedOnCategory.range() as any[]\r\n\r\n  keys.forEach((key, index) => legend.push({ label: key, value: colors[index % colors.length] }))\r\n  legend.sort((a, b) => (a.label < b.label ? -1 : 1))\r\n\r\n  // console.log({ legend })\r\n\r\n  // build the hasCategory thing\r\n  const hasCategory = calculatedValues.map(v => !!v)\r\n  return { array: rgbArray, legend, calculatedValues: null, normalizedValues: null, hasCategory }\r\n}\r\n\r\nfunction buildDiffDomainBreakpoints(props: {\r\n  colorRamp: Ramp\r\n  fixedColors?: any[]\r\n  minDiff: number\r\n  maxDiff: number\r\n}) {\r\n  let { colorRamp, fixedColors, minDiff, maxDiff } = props\r\n  const steps = colorRamp.steps ?? fixedColors?.length ?? 5\r\n\r\n  // MANUAL BREAKPOINTS\r\n  if (colorRamp.breakpoints) {\r\n    const breakpoints = colorRamp.breakpoints.split(',').map((v: string) => parseFloat(v.trim()))\r\n\r\n    if (colorRamp.steps !== breakpoints.length + 1) {\r\n      throw Error('Color ramp \"steps\" must be one larger than number of breakpoints')\r\n    }\r\n\r\n    // must be increasing\r\n    let min = -Infinity\r\n    for (const breakpoint of breakpoints) {\r\n      if (breakpoint < min) throw Error('Breakpoints must be in lowest to highest order')\r\n      min = breakpoint\r\n    }\r\n\r\n    return breakpoints\r\n  }\r\n\r\n  // GUESS BREAKPOINTS OURSELVES\r\n  if (steps == 2) return [0]\r\n  if (steps == 3) return [-1, 1]\r\n\r\n  const biggest = maxDiff > Math.abs(minDiff) ? maxDiff : -1 * minDiff\r\n  const numBreaks = Math.floor(steps / 2) - 1\r\n  const divisor = numBreaks + 1\r\n\r\n  if (steps % 2 == 1) {\r\n    // ODD number of cells\r\n    const guessBreaks = [1]\r\n\r\n    for (let i = 1; i <= numBreaks; i++) {\r\n      guessBreaks.push((i * biggest) / divisor)\r\n    }\r\n\r\n    const breakpoints = guessBreaks\r\n      .slice()\r\n      .reverse()\r\n      .map(v => -1 * v)\r\n    breakpoints.push(...guessBreaks)\r\n    return breakpoints\r\n  } else {\r\n    // EVEN number of cells: split at zero\r\n    const guessBreaks = [0]\r\n\r\n    for (let i = 1; i <= numBreaks; i++) guessBreaks.push((i * biggest) / divisor)\r\n    const breakpoints = guessBreaks\r\n      .slice()\r\n      .reverse()\r\n      .map(v => -1 * v)\r\n\r\n    breakpoints.pop() // remove extra zero\r\n    breakpoints.push(...guessBreaks)\r\n\r\n    return breakpoints\r\n  }\r\n}\r\n\r\nfunction buildDiffColorsBasedOnNumericValues(props: {\r\n  numFeatures: number\r\n  data: DataTableColumn\r\n  data2?: DataTableColumn\r\n  lookup: DataTableColumn\r\n  lookup2?: DataTableColumn\r\n  normalize?: DataTableColumn\r\n  normalLookup?: DataTableColumn\r\n  relative?: boolean\r\n  options: any\r\n}) {\r\n  const { numFeatures, data, data2, lookup, lookup2, normalize, normalLookup, relative, options } =\r\n    props\r\n  const { colorRamp, columnName, dataset, fixedColors } = options\r\n\r\n  // Calculate the raw values for each feature\r\n  const rawValues1 = new Float32Array(numFeatures)\r\n  const rawValues2 = new Float32Array(numFeatures)\r\n\r\n  if (data2 && lookup2) {\r\n    data.values.forEach((value, index) => {\r\n      rawValues1[lookup.values[index]] += value\r\n    })\r\n\r\n    data2.values.forEach((value, index) => {\r\n      rawValues2[lookup2.values[index]] += value\r\n    })\r\n  }\r\n\r\n  if (normalize) {\r\n    // build denominator\r\n    const normalDenominator = new Float32Array(numFeatures)\r\n    normalize.values.forEach((value, index) => {\r\n      // use normal value directly if it comes from featureset; otherwise use normalLookup\r\n      const offset = normalLookup ? normalLookup.values[index] : index\r\n      normalDenominator[offset] = value\r\n    })\r\n\r\n    // scale by denominator\r\n    for (let i = 0; i < numFeatures; i++) {\r\n      rawValues1[i] /= normalDenominator[i]\r\n      rawValues2[i] /= normalDenominator[i]\r\n    }\r\n  }\r\n\r\n  // Calc the differences\r\n  const diffValues = new Float32Array(numFeatures)\r\n  let pctDiffValues = new Float32Array(0)\r\n  if (relative) pctDiffValues = new Float32Array(numFeatures)\r\n\r\n  for (let i = 0; i < numFeatures; i++) {\r\n    diffValues[i] = rawValues1[i] - rawValues2[i]\r\n    if (relative) pctDiffValues[i] = 100 * (diffValues[i] / rawValues2[i])\r\n  }\r\n\r\n  const displayTheseDiffs = relative ? pctDiffValues : diffValues\r\n\r\n  const minDiff = displayTheseDiffs.reduce(\r\n    (a, b) => (Number.isFinite(a) ? Math.min(a, b) : b),\r\n    Infinity\r\n  )\r\n  const maxDiff = displayTheseDiffs.reduce(\r\n    (a, b) => (Number.isFinite(a) ? Math.max(a, b) : b),\r\n    -Infinity\r\n  )\r\n\r\n  // *range* is the list of colors;\r\n  // *domain* is the list of breakpoints in the 0-1.0 continuum; it is auto-created from data for categorical.\r\n  // *scaleOrdinal* is the d3 function that maps categorical variables to colors.\r\n  // *scaleThreshold* is the d3 function that maps numerical values to the color buckets\r\n\r\n  let domain\r\n  if (minDiff < 0) {\r\n    // if min is NEGATIVE, do a diverging split no matter what\r\n    domain = buildDiffDomainBreakpoints({ colorRamp, fixedColors, minDiff, maxDiff })\r\n  } else {\r\n    // if min is POSITIVE, do a normal sequence\r\n    domain = buildBreakpointsForNumericValues({\r\n      colorRamp,\r\n      fixedColors,\r\n      min: minDiff,\r\n      max: maxDiff,\r\n    }).map(breakpoint => (colorRamp.style === Style.diverging ? breakpoint : breakpoint * maxDiff))\r\n  }\r\n\r\n  const colorsAsRGB = buildRGBfromHexCodes(fixedColors)\r\n  const setColorBasedOnValue: any = scaleThreshold().range(colorsAsRGB).domain(domain)\r\n\r\n  const gray = store.state.isDarkMode ? [48, 48, 48] : [212, 212, 212]\r\n\r\n  const rgbArray = new Uint8Array(numFeatures * 3)\r\n\r\n  displayTheseDiffs.forEach((value, index) => {\r\n    const color = Number.isFinite(value) ? setColorBasedOnValue(value) : gray\r\n    const offset = index * 3\r\n    rgbArray[offset + 0] = color[0]\r\n    rgbArray[offset + 1] = color[1]\r\n    rgbArray[offset + 2] = color[2]\r\n  })\r\n\r\n  const legend = [] as any[]\r\n  const keys = setColorBasedOnValue.domain() as any[]\r\n  const colors = setColorBasedOnValue.range() as any[]\r\n\r\n  // need to figure out RANGES, not just breakpoints:\r\n  let lowerBound = undefined\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const upperBound = keys[i]\r\n    const lowerLabel = Math.round(lowerBound * 1)\r\n    const upperLabel = Math.round(upperBound * 1)\r\n    legend.push({\r\n      label: lowerBound !== undefined ? `${lowerLabel} — ${upperLabel}` : `< ${upperLabel}`,\r\n      value: colors[i],\r\n    })\r\n    lowerBound = upperBound\r\n  }\r\n  legend.push({\r\n    label: `> ${Math.round(lowerBound * 1)}`,\r\n    value: colors[keys.length],\r\n  })\r\n\r\n  return { array: rgbArray, legend, calculatedValues: displayTheseDiffs, normalizedValues: null }\r\n}\r\n\r\nfunction buildBreakpointsForNumericValues(props: {\r\n  colorRamp: Ramp\r\n  fixedColors: any[]\r\n  min: number\r\n  max: number\r\n}): number[] {\r\n  const { colorRamp, fixedColors, min, max } = props\r\n\r\n  // if using a diverging (zero-centered) scale, try to make a good guess as to what user wants\r\n  if (colorRamp.style === Style.diverging) {\r\n    return buildDiffDomainBreakpoints({ colorRamp, fixedColors, minDiff: min, maxDiff: max })\r\n  }\r\n\r\n  // Continuous (non-diverging) scale:\r\n  // Build breakpoints between 0.0 - 1.0 to match the number of color swatches\r\n  // e.g. If there are five colors, then we need 4 breakpoints: 0.2, 0.4, 0.6, 0.8.\r\n  // An exponent reduces visual dominance of very large values at the high end of the scale\r\n  const numColors = fixedColors.length\r\n  const exponent = 3.0\r\n  const domain = new Array(numColors - 1)\r\n    .fill(0)\r\n    .map((v, i) => Math.pow((1 / numColors) * (i + 1), exponent))\r\n\r\n  return domain\r\n}\r\n\r\nfunction buildColorsBasedOnNumericValues(props: {\r\n  numFeatures: number\r\n  data: DataTableColumn\r\n  lookup: DataTableColumn\r\n  normalize?: DataTableColumn\r\n  normalLookup?: DataTableColumn\r\n  options: { colorRamp: Ramp; fixedColors: any[] }\r\n  join?: string\r\n}) {\r\n  const { numFeatures, data, lookup, normalize, normalLookup, options, join } = props\r\n  const { colorRamp, fixedColors } = options\r\n\r\n  const isDivergingScale = colorRamp?.style === Style.diverging\r\n\r\n  // CALCULATE aggregated values. This might be a job for crossfilter2 later\r\n  const calculatedValues = new Float32Array(numFeatures)\r\n  if (join === '@count') {\r\n    // *** COUNT rows that have this lookup\r\n    for (let i = 0; i < data.values.length; i++) {\r\n      const offset = lookup ? lookup.values[i] : i\r\n      calculatedValues[offset] += 1\r\n    }\r\n  } else {\r\n    // *** SUM values in rows (always sum, for now)\r\n    for (let i = 0; i < data.values.length; i++) {\r\n      const offset = lookup ? lookup.values[i] : i\r\n      calculatedValues[offset] += data.values[i]\r\n    }\r\n  }\r\n\r\n  // Get max\r\n  let normalizedValues = calculatedValues\r\n  let normalizedMax = calculatedValues[0]\r\n  let nMaxLength = normalizedValues.length\r\n  for (let i = 1; i < nMaxLength; ++i) {\r\n    normalizedMax = Math.max(normalizedMax, calculatedValues[i])\r\n  }\r\n\r\n  normalizedMax = normalizedMax ?? -Infinity\r\n\r\n  // Normalize data -------------------------------------------------\r\n\r\n  if (normalize) {\r\n    normalizedValues = new Float32Array(numFeatures)\r\n    normalizedMax = -Infinity\r\n\r\n    // build denominator\r\n    const normalDenominator = new Float32Array(numFeatures)\r\n    normalize.values.forEach((value, index) => {\r\n      // use normal value directly if it comes from featureset; otherwise use normalLookup\r\n      const offset = normalLookup ? normalLookup.values[index] : index\r\n      normalDenominator[offset] = value\r\n    })\r\n\r\n    // scale by denominator\r\n    for (let i = 0; i < numFeatures; i++) {\r\n      normalizedValues[i] = calculatedValues[i] / normalDenominator[i]\r\n      normalizedMax = Math.max(normalizedValues[i], normalizedMax)\r\n    }\r\n  }\r\n\r\n  const minimum = normalizedValues.reduce(\r\n    (a, b) => (Number.isFinite(a) ? Math.min(a, b) : b),\r\n    Infinity\r\n  )\r\n\r\n  // warn user about negative numbers\r\n  if (!isDivergingScale && minimum < 0) {\r\n    store.commit('setStatus', {\r\n      type: Status.WARNING,\r\n      msg: `Column \"${data.name}\" has negative values: use a diverging color scale`,\r\n      desc: 'Data containing negative numbers usually require a zero-centered (\"diverging\") color scale',\r\n    })\r\n  }\r\n\r\n  // // build breakpoints and colors\r\n  const colorsAsRGB = buildRGBfromHexCodes(fixedColors)\r\n  const breakpoints = buildBreakpointsForNumericValues({\r\n    colorRamp,\r\n    fixedColors,\r\n    min: minimum,\r\n    max: normalizedMax,\r\n  })\r\n\r\n  // *scaleThreshold* is the d3 function that maps numerical values from [0.0,1.0) to the color buckets\r\n  // *range* is the list of colors;\r\n  // *domain* is the list of breakpoints (usually 0.0-1.0 continuum or zero-centered)\r\n  const setColorBasedOnValue: any = scaleThreshold().range(colorsAsRGB).domain(breakpoints)\r\n\r\n  const rgbArray = new Uint8Array(numFeatures * 3)\r\n  const gray = store.state.isDarkMode ? [48, 48, 48] : [212, 212, 212]\r\n\r\n  for (let i = 0; i < numFeatures; i++) {\r\n    const value = isDivergingScale\r\n      ? normalizedValues[i]\r\n      : normalizedValues[i] / (normalizedMax || 1)\r\n\r\n    const color = Number.isNaN(value) ? gray : setColorBasedOnValue(value)\r\n    const colorOffset = i * 3\r\n    rgbArray[colorOffset + 0] = color[0]\r\n    rgbArray[colorOffset + 1] = color[1]\r\n    rgbArray[colorOffset + 2] = color[2]\r\n  }\r\n\r\n  // Generate LEGEND ranges ---------------------------------\r\n\r\n  const legend = [] as any[]\r\n  const domainBreakpoints = setColorBasedOnValue.domain() as any[]\r\n  const colors = setColorBasedOnValue.range() as any[]\r\n\r\n  let precision = normalizedMax >= 1000 ? 0 : 3\r\n\r\n  let lowerBound = minimum\r\n  for (let i = 0; i < domainBreakpoints.length; i++) {\r\n    let upperBound = domainBreakpoints[i]\r\n    // Scale the legend labels if we are in regular scale mode (non-divergent)\r\n    if (!isDivergingScale) {\r\n      // lowerBound *= normalizedMax\r\n      upperBound *= normalizedMax\r\n    }\r\n    const lowerLabel = truncateFractionalPart({ value: lowerBound, precision })\r\n    const upperLabel = truncateFractionalPart({ value: upperBound, precision })\r\n    legend.push({\r\n      label: `${lowerLabel} — ${upperLabel}`,\r\n      value: colors[i],\r\n    })\r\n    lowerBound = upperBound\r\n  }\r\n\r\n  // final bucket:\r\n  legend.push({\r\n    label: `${truncateFractionalPart({\r\n      value: lowerBound, // isDivergingScale ? lowerBound : lowerBound * normalizedMax,\r\n      precision,\r\n    })} — ${truncateFractionalPart({ value: normalizedMax, precision })}`,\r\n    value: colors[domainBreakpoints.length],\r\n  })\r\n\r\n  return {\r\n    array: rgbArray,\r\n    calculatedValues,\r\n    normalizedValues: normalize && normalizedValues,\r\n    legend,\r\n  }\r\n}\r\n\r\n// helpers ------------------------------------------------------------\r\n\r\n// deck.gl colors must be in rgb[] or rgba[] format\r\nfunction buildRGBfromHexCodes(hexcodes: string[]) {\r\n  const colorsAsRGB: any = hexcodes.map(hexcolor => {\r\n    const c = rgb(hexcolor)\r\n    return [c.r, c.g, c.b]\r\n  })\r\n  return colorsAsRGB\r\n}\r\n\r\n// this will only round a number if it is a plain old regular number with\r\n// a fractional part to the right of the decimal point.\r\nfunction truncateFractionalPart({ value, precision }: { value: any; precision?: number }) {\r\n  // default: 3 decimals\r\n  let usePrecision = precision ?? 3\r\n  if (usePrecision == 0) usePrecision = -1 // truncates the decimal point itself\r\n\r\n  if (typeof value !== 'number') return value\r\n\r\n  let printValue = '' + value\r\n  if (printValue.includes('.') && printValue.indexOf('.') === printValue.lastIndexOf('.')) {\r\n    if (/\\d$/.test(printValue)) {\r\n      const clipped = printValue.substring(0, 1 + usePrecision + printValue.lastIndexOf('.'))\r\n      // remove trailing zeroes\r\n      try {\r\n        if (parseInt(clipped.substring(1 + clipped.indexOf('.'))) === 0) {\r\n          return clipped.substring(0, clipped.indexOf('.'))\r\n        }\r\n      } catch (e) {\r\n        // can ignore this\r\n      }\r\n      return clipped\r\n    }\r\n  }\r\n\r\n  return value\r\n}\r\n\r\nexport default {\r\n  getHeightsBasedOnNumericValues,\r\n  getColorsForDataColumn,\r\n  getWidthsForDataColumn,\r\n  getRadiusForDataColumn,\r\n}\r\n"],"names":["ascending","a","b","NaN","bisector","f","delta","compare","left","x","lo","hi","length","mid","d","ascendingComparator","center","i","right","bisectRight","bisect","initRange","domain","range","arguments","this","initInterpolator","interpolator2","interpolator","implicit","Symbol","ordinal","index","Map","unknown","scale","key","get","set","push","_","slice","value","has","Array","from","copy","apply","threshold","n","Math","min","invertExtent","y","indexOf","colors","specifier","colors2","category10","Accent","Dark2","Paired","Pastel1","Pastel2","Set1","Set2","Set3","Tableau10","color2","gamma","rgb2","start","end","r","colorRgb","g","opacity","nogamma","t","rgbGamma","spline","rgbBasis","values","floor","v1","v2","v0","v3","t1","t2","t3","basis","ramp$1","scheme2","interpolateRgbBasis","scheme","concat","map","ramp","interpolateCubehelixLong","cubehelix","c","rgb","pi_1_3","PI","pi_2_3","max","viridis","magma","inferno","plasma","round","sin","d3","__spreadValues","d3sc","d3color","Style","Style2","colorRamp","style","interpolate","hex","e","store","state","isDarkMode","buildDiffDomainBreakpoints","props","colorRamp2","fixedColors","minDiff","maxDiff","steps","_b","_a","breakpoints","split","v","parseFloat","trim","Error","Infinity","breakpoint","biggest","abs","numBreaks","divisor","guessBreaks","reverse","pop","buildBreakpointsForNumericValues","numColors","fill","pow","buildRGBfromHexCodes","hexcodes","hexcolor","c2","truncateFractionalPart","precision","usePrecision","printValue","includes","lastIndexOf","test","clipped","substring","parseInt","ColorWidthSymbologizer","getHeightsBasedOnNumericValues","data","lookup","normalize","join","options","columnName","dataset","scaleFactor","heights","calculatedValues","Float32Array","normalizedValues","normalizedMax","offset","getColorsForDataColumn","type","DataType","STRING","numFeatures","colorsAsRGB","setColorBasedOnCategory","scaleOrdinal","gray2","rgbArray","Uint8Array","filter","legend","keys","forEach","label","sort","hasCategory","array","buildColorsBasedOnCategories","data2","lookup2","normalLookup","relative","rawValues1","rawValues2","normalDenominator","diffValues","pctDiffValues","displayTheseDiffs","reduce","Number","isFinite","setColorBasedOnValue","scaleThreshold","lowerBound","upperBound","lowerLabel","upperLabel","buildDiffColorsBasedOnNumericValues","isDivergingScale","nMaxLength","minimum","commit","Status","WARNING","msg","name","desc","isNaN","colorOffset","domainBreakpoints","buildColorsBasedOnNumericValues","getWidthsForDataColumn","buildWidthsBasedOnCategories","widths","thickness","buildDiffWidthsBasedOnNumericValues","buildWidthsBasedOnNumericValues","getRadiusForDataColumn","radius","sqrt"],"mappings":"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AImF,EAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAC,IAAI1C,GAES2C,EAAAA,EAAKH,GCZTA,EAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAC,IAAI1C,GAES2C,EAAAA,EAAKH,GCZTA,EAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAC,IAAI1C,GAES2C,GAAAA,EAAKH,GCZTA,GAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAC,IAAI1C,GAES2C,GAAAA,EAAKH,ICZTA,GAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAC,IAAI1C,GAES2C,GAAAA,EAAKH,ICZTA,GAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAC,IAAI1C,GAES2C,GAAAA,EAAKH,ICZTA,GAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAC,IAAI1C,GAES2C,GAAAA,EAAKH,ICZTA,GAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAC,IAAI1C,GAES2C,GAAAA,EAAKH,ICZTA,GAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,yDACA,+DACA,sEACAC,IAAI1C,GAES2C,GAAAA,EAAKH,ICZTA,GAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2BACA,iCACA,uCACA,6CACA,mDACA,0DACAC,IAAI1C,GAES2C,GAAAA,EAAKH,ICVTA,GAAS,IAAInD,MAAM,GAAGoD,OAC/B,qBACA,2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"}