{"version":3,"file":"plotly.b7d6af64.js","sources":["../../src/plugins/plotly/PlotlyDiagram.vue","../../src/plugins/plotly/PlotlyDiagram.vue?vue&type=template&lang.js","../../src/dash-panels/plotly.vue","../../src/dash-panels/plotly.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\n.mycomponent(:class=\"{'is-thumbnail': thumbnail}\")\r\n\r\n  VuePlotly.myplot(\r\n    :data=\"traces\"\r\n    :layout=\"layout\"\r\n    :options=\"options\"\r\n    :id=\"id\"\r\n  )\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: { total: 'total', showChanges: 'Only show changes' },\r\n    de: { total: 'Insgesamt', showChanges: 'Nur Ã„nderungen zeigen' },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport yaml from 'yaml'\r\n\r\nimport globalStore from '@/store'\r\nimport VuePlotly from '@/components/VuePlotly.vue'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport DashboardDataManager from '@/js/DashboardDataManager'\r\nimport { colorRamp, Ramp } from '@/js/ColorsAndWidths'\r\nimport { mergeTypedArrays } from '@/js/util'\r\nimport {\r\n  FileSystemConfig,\r\n  UI_FONT,\r\n  BG_COLOR_DASHBOARD,\r\n  DataTable,\r\n  DataSet,\r\n  DataTableColumn,\r\n} from '@/Globals'\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'PlotlyPlugin',\r\n  components: { VuePlotly },\r\n  i18n,\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    config: { type: Object as any },\r\n    datamanager: { type: Object as PropType<DashboardDataManager> },\r\n    resize: Object as any,\r\n    thumbnail: Boolean,\r\n    yamlConfig: String,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      globalState: globalStore.state,\r\n      vizDetails: { title: '', description: '' } as any,\r\n      loadingText: '',\r\n      jsonChart: {} as any,\r\n      id: `plotly-id-${Math.floor(1e12 * Math.random())}` as any,\r\n      traces: [] as any[],\r\n      prevWidth: -1,\r\n      prevHeight: -1,\r\n      // DataManager might be passed in from the dashboard; or we might be\r\n      // in single-view mode, in which case we need to create one for ourselves\r\n      myDataManager: this.datamanager || new DashboardDataManager(this.root, this.subfolder),\r\n      // Plotly layout\r\n      layout: {\r\n        margin: { t: 8, b: 0, l: 0, r: 0, pad: 2 },\r\n        font: {\r\n          color: '#444444',\r\n          family: UI_FONT,\r\n        },\r\n        xaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 12 },\r\n          animate: true,\r\n        },\r\n        yaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 16 },\r\n          animate: true,\r\n          rangemode: 'tozero',\r\n        },\r\n        legend: {\r\n          orientation: 'v',\r\n          x: 1,\r\n          y: 1,\r\n        },\r\n      },\r\n      // Plotly options\r\n      options: {\r\n        displaylogo: false,\r\n        responsive: true,\r\n        modeBarButtonsToRemove: [\r\n          'pan2d',\r\n          'zoom2d',\r\n          'select2d',\r\n          'lasso2d',\r\n          'zoomIn2d',\r\n          'zoomOut2d',\r\n          'autoScale2d',\r\n          'hoverClosestCartesian',\r\n          'hoverCompareCartesian',\r\n          'resetScale2d',\r\n          'toggleSpikelines',\r\n          'resetViewMapbox',\r\n        ],\r\n        toImageButtonOptions: {\r\n          format: 'png', // one of png, svg, jpeg, webp\r\n          filename: 'chart',\r\n          width: null,\r\n          height: null,\r\n        },\r\n      },\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    'globalState.resizeEvents'() {\r\n      this.changeDimensions({})\r\n    },\r\n\r\n    resize(event: any) {\r\n      this.changeDimensions(event)\r\n    },\r\n    'globalState.isDarkMode'() {\r\n      this.updateTheme()\r\n    },\r\n  },\r\n\r\n  async mounted() {\r\n    await this.getVizDetails()\r\n    // only continue if we are on a real page and not the file browser\r\n    if (this.thumbnail) return\r\n\r\n    try {\r\n      if (this.vizDetails.datasets) await this.prepareData()\r\n      if (this.vizDetails.traces) this.traces = this.vizDetails.traces\r\n      // merge user-supplied layout with SimWrapper layout defaults\r\n      if (this.vizDetails.layout) this.mergeLayouts()\r\n\r\n      if (this.vizDetails.fixedRatio) {\r\n        this.vizDetails.layout.xaxis = Object.assign(this.vizDetails.layout.xaxis, {\r\n          constrain: 'domain',\r\n        })\r\n\r\n        this.vizDetails.layout.yaxis = Object.assign(this.vizDetails.layout.yaxis, {\r\n          constrain: 'domain',\r\n          scaleanchor: 'x',\r\n          scaleration: 1,\r\n        })\r\n      }\r\n\r\n      // Backwards compatiblity with the older \"dropdownMenu\" option\r\n      if (this.vizDetails.dropdownMenu) this.vizDetails.interactive = 'dropdown'\r\n\r\n      // create interactive elements\r\n      if (this.vizDetails.interactive) this.createMenus(this.vizDetails.interactive)\r\n    } catch (err) {\r\n      const e = err as any\r\n      console.error({ e })\r\n      this.loadingText = '' + e\r\n    }\r\n\r\n    this.updateTheme()\r\n    window.addEventListener('resize', this.changeDimensions)\r\n  },\r\n\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.changeDimensions)\r\n  },\r\n\r\n  methods: {\r\n    changeDimensions(dim: any) {\r\n      if (dim?.height && dim?.width) {\r\n        if (dim.height !== this.prevHeight || dim.width !== this.prevWidth) {\r\n          this.prevHeight = dim.height\r\n          this.prevWidth = dim.width\r\n          this.layout = Object.assign({}, this.layout, dim)\r\n        }\r\n      }\r\n    },\r\n\r\n    mergeLayouts() {\r\n      const mergedLayout = { ...this.vizDetails.layout }\r\n\r\n      // TODO: only if the y axis title is set, the margin to the left needs to be little bit larger\r\n\r\n      // we always want to use SimWrapper defaults for these:\r\n      mergedLayout.margin = this.layout.margin\r\n      mergedLayout.font = this.layout.font\r\n      mergedLayout.legend = this.layout.legend\r\n\r\n      // we never want these:\r\n      delete mergedLayout.height\r\n      delete mergedLayout.width\r\n\r\n      // be selective about these:\r\n      if (mergedLayout.xaxis) {\r\n        mergedLayout.xaxis.automargin = true\r\n        mergedLayout.xaxis.autorange = true\r\n        mergedLayout.xaxis.animate = true\r\n        if (!mergedLayout.xaxis.title) mergedLayout.xaxis.title = this.layout.xaxis.title\r\n      } else {\r\n        mergedLayout.xaxis = this.layout.xaxis\r\n      }\r\n\r\n      if (mergedLayout.yaxis) {\r\n        mergedLayout.yaxis.automargin = true\r\n        mergedLayout.yaxis.autorange = true\r\n        mergedLayout.yaxis.animate = true\r\n        if (!mergedLayout.yaxis.title) mergedLayout.yaxis.title = this.layout.yaxis.title\r\n      } else {\r\n        mergedLayout.yaxis = this.layout.yaxis\r\n      }\r\n\r\n      this.layout = mergedLayout\r\n    },\r\n\r\n    createMenus(mode: string) {\r\n      if (mode == 'none') return\r\n\r\n      const buttons: any[] = []\r\n\r\n      // index of traces for each group\r\n      const groups: { [key: string]: number[] } = {}\r\n\r\n      const n = Object.values(this.traces).length\r\n\r\n      Object.values(this.traces).forEach((tr, idx) => {\r\n        // restore the indended legend label\r\n        if ('original_name' in tr) {\r\n          tr.name = tr.original_name\r\n        }\r\n\r\n        if (!(tr.group_name in groups)) groups[tr.group_name] = []\r\n\r\n        groups[tr.group_name].push(idx)\r\n\r\n        tr.visible = false\r\n      })\r\n\r\n      Object.entries(groups).forEach(kv => {\r\n        const [group, ids] = kv\r\n\r\n        const arr = new Array(n)\r\n        arr.fill(false)\r\n\r\n        for (const idx of ids as any[]) {\r\n          arr[idx] = true\r\n        }\r\n\r\n        buttons.push({\r\n          method: 'update',\r\n          args: [{ visible: arr }],\r\n          label: group,\r\n        })\r\n      })\r\n\r\n      const first = Object.values(groups)[0]\r\n      for (const idx of first) {\r\n        this.traces[idx].visible = true\r\n      }\r\n\r\n      const layout: any = this.layout\r\n\r\n      if (mode == 'dropdown') {\r\n        const updatemenus = [\r\n          {\r\n            buttons: buttons,\r\n            y: 1,\r\n            yanchor: 'top',\r\n          },\r\n        ]\r\n        layout.updatemenus = updatemenus\r\n      } else if (mode == 'slider') {\r\n        const sliders = [\r\n          {\r\n            pad: { t: 10 },\r\n            currentvalue: {\r\n              visible: false,\r\n              xanchor: 'left',\r\n              prefix: '',\r\n            },\r\n            steps: buttons,\r\n          },\r\n        ]\r\n        layout.sliders = sliders\r\n      }\r\n    },\r\n\r\n    updateTheme() {\r\n      const colors = {\r\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\r\n      }\r\n      this.layout = Object.assign({}, this.layout, colors)\r\n    },\r\n\r\n    async getVizDetails() {\r\n      if (this.config) {\r\n        this.vizDetails = Object.assign({}, this.config)\r\n        this.$emit('title', this.vizDetails.title || 'Chart')\r\n        if (this.vizDetails.traces) this.traces = this.vizDetails.traces\r\n        return\r\n      }\r\n\r\n      // might be a project config:\r\n      this.loadingText = 'Loading config...'\r\n      const config = this.yamlConfig ?? ''\r\n      const filename = config.indexOf('/') > -1 ? config : this.subfolder + '/' + config\r\n\r\n      const text = await this.fileApi.getFileText(filename)\r\n      const parsed = yaml.parse(text)\r\n\r\n      this.vizDetails = parsed\r\n      if (!this.vizDetails.title) this.vizDetails.title = 'Chart'\r\n      this.$emit('title', this.vizDetails.title)\r\n    },\r\n\r\n    async prepareData(): Promise<any> {\r\n      await Promise.all(\r\n        Object.entries(this.vizDetails.datasets).map(kv => {\r\n          let [key, value] = kv\r\n\r\n          // Dataset can be single string or full object\r\n          if (typeof value === 'string') {\r\n            value = {\r\n              file: value,\r\n            }\r\n          }\r\n\r\n          return this.loadDataset(key, value as DataSet)\r\n        })\r\n      )\r\n\r\n      if (this.vizDetails.mergeDatasets && Object.values(this.vizDetails.datasets).length > 1) {\r\n        this.vizDetails.datasets = {\r\n          dataset: {\r\n            name: 'dataset',\r\n            file: 'none',\r\n            data: this.mergeDatasets(Object.values(this.vizDetails.datasets)),\r\n          },\r\n        }\r\n      }\r\n\r\n      const datasets = Object.values(this.vizDetails.datasets) as DataSet[]\r\n      const traces = [] as any[]\r\n\r\n      const color = this.getColors(this.vizDetails, this.vizDetails.traces.length)\r\n\r\n      this.vizDetails.traces.forEach((tr: any, trIdx: number) => {\r\n        // Grouped traces won't be added without its group\r\n        let grouped = false\r\n\r\n        datasets.forEach((ds: DataSet) => {\r\n          // This data uses array as name and needs to be split into multiple traces.\r\n          const name = '$' + ds.name\r\n\r\n          if (tr.name?.startsWith(name)) {\r\n            const ref = tr.name.replace(name + '.', '')\r\n            const groups = this.groupDataTable(ds.data as DataTable, ref)\r\n\r\n            const n = Object.keys(groups).length\r\n            const c = this.getColors(tr, n)\r\n\r\n            Object.keys(groups).forEach((group, idx) => {\r\n              // TODO: Is there a library for deep copy ?\r\n              const copy = JSON.parse(JSON.stringify(tr))\r\n\r\n              copy.name = group\r\n              copy.group_name = group\r\n              this.recursiveCheckForTemplate(groups[group], copy, name)\r\n\r\n              if (c) {\r\n                if (!('marker' in tr)) copy.marker = {}\r\n                copy.marker.color = c[idx]\r\n              }\r\n              traces.push(copy)\r\n            })\r\n\r\n            grouped = true\r\n          } else {\r\n            this.recursiveCheckForTemplate(ds.data as DataTable, tr, name)\r\n          }\r\n        })\r\n\r\n        if (!grouped) {\r\n          if (color) {\r\n            // Assign marker\r\n            if (!('marker' in tr)) tr.marker = {}\r\n\r\n            tr.marker.color = color[trIdx]\r\n          }\r\n          traces.push(tr)\r\n        }\r\n      })\r\n\r\n      this.vizDetails.traces = traces\r\n    },\r\n\r\n    async loadDataset(name: string, ds: DataSet): Promise<DataSet> {\r\n      this.loadingText = 'Loading datasets...'\r\n\r\n      const csvData = await this.myDataManager.getDataset(\r\n        { dataset: ds.file },\r\n        { highPrecision: true }\r\n      )\r\n\r\n      ds.data = csvData.allRows\r\n      ds.name = name\r\n\r\n      this.vizDetails.datasets[name] = ds\r\n      this.transformData(ds)\r\n\r\n      return ds\r\n    },\r\n\r\n    getColors(conf: any, n: number): null | string[] {\r\n      if ('colorRamp' in conf) {\r\n        const ramp = typeof conf.colorRamp === 'string' ? { ramp: conf.colorRamp } : conf.colorRamp\r\n        // Produce at least two color or strange effects happen\r\n        return colorRamp(ramp, n >= 2 ? n : 2)\r\n      }\r\n\r\n      return null\r\n    },\r\n\r\n    // Transform dataset if requested\r\n    transformData(ds: DataSet) {\r\n      if ('pivot' in ds) {\r\n        this.pivot(\r\n          ds.name as string,\r\n          ds.data as DataTable,\r\n          ds.pivot.exclude,\r\n          ds.pivot.valuesTo,\r\n          ds.pivot.namesTo\r\n        )\r\n      }\r\n\r\n      if ('aggregate' in ds) {\r\n        this.aggregateColumns(ds.data as DataTable, ds.aggregate.groupBy, ds.aggregate.target)\r\n      }\r\n\r\n      if ('constant' in ds) {\r\n        Object.entries(ds.constant!).forEach(kv => {\r\n          const [column, value] = kv\r\n\r\n          const values = new Array(Object.values(ds.data!)[0].values.length)\r\n          values.fill(value)\r\n\r\n          ds.data![column] = {\r\n            name: column,\r\n            values: values,\r\n            type: 1,\r\n          }\r\n        })\r\n      }\r\n    },\r\n\r\n    countOccurrences(array: Float64Array | Float32Array | any[]): { [key: string]: number } {\r\n      let counts = {} as { [key: string]: number }\r\n      array.forEach((el: any) => {\r\n        counts[el] = counts[el] ? counts[el] + 1 : 1\r\n      })\r\n\r\n      return counts\r\n    },\r\n\r\n    // Group data table by values in columnName and generate multiple tables\r\n    groupDataTable(dataTable: DataTable, columnName: string): { [key: string]: DataTable } {\r\n      let obj = {} as { [key: string]: DataTable }\r\n\r\n      let column = dataTable[columnName]\r\n\r\n      let occ = this.countOccurrences(column.values)\r\n\r\n      // Copy all columns and initialize as empty\r\n      Object.entries(occ).forEach(kv => {\r\n        const [group, n] = kv\r\n\r\n        let dt = {} as DataTable\r\n\r\n        // Shallow copy each column\r\n        Object.entries(dataTable).forEach(kv => {\r\n          const [key, column] = kv\r\n          dt[key] = { ...column }\r\n\r\n          let c = Object.getPrototypeOf(column.values).constructor\r\n\r\n          // Construct array of same type\r\n          dt[key].values = new c(n)\r\n        })\r\n\r\n        obj[group] = dt\r\n      })\r\n\r\n      for (var i = 0; i < dataTable[columnName].values.length; i++) {\r\n        var group = dataTable[columnName].values[i]\r\n        let target = obj[group]\r\n\r\n        // determine index by subtracting the total for each group\r\n        let idx = target[columnName].values.length - occ[group]--\r\n\r\n        // Copy columns\r\n        Object.entries(dataTable).forEach(kv => {\r\n          const [key, column] = kv\r\n\r\n          target[key].values[idx] = column.values[i]\r\n        })\r\n      }\r\n\r\n      return obj\r\n    },\r\n\r\n    // Aggregate columns, currently only sum\r\n    aggregateColumns(dataTable: DataTable, groupBy: any[], target: string) {\r\n      const aggr = {} as any\r\n\r\n      const n = dataTable[Object.keys(dataTable)[0]].values.length\r\n\r\n      for (let i = 0; i < n; i++) {\r\n        const k = groupBy.reduce((acc, column) => (acc += dataTable[column].values[i]), '')\r\n\r\n        if (k in aggr) {\r\n          aggr[k][target] += dataTable[target].values[i]\r\n        } else {\r\n          aggr[k] = Object.fromEntries(groupBy.map(column => [column, dataTable[column].values[i]]))\r\n          aggr[k][target] = dataTable[target].values[i]\r\n        }\r\n      }\r\n\r\n      // Remove the unneeded columns\r\n      Object.keys(dataTable).forEach(column => {\r\n        if (groupBy.indexOf(column) == -1 && column != target) delete dataTable[column]\r\n      })\r\n\r\n      // Initial empty arrays for final columns\r\n      const values = Object.fromEntries([...groupBy, target].map(c => [c, []])) as any\r\n\r\n      Object.values(aggr).forEach((a: any) => {\r\n        Object.entries(a).forEach(cv => {\r\n          values[cv[0]].push(cv[1])\r\n        })\r\n      })\r\n\r\n      Object.entries(values).forEach(kv => {\r\n        dataTable[kv[0]].values = kv[1] as any[]\r\n      })\r\n    },\r\n\r\n    // Pivot wide to long format\r\n    pivot(name: string, dataTable: DataTable, exclude: any[], valuesTo: string, namesTo: string) {\r\n      // Columns to pivot\r\n      const pivot = Object.keys(dataTable).filter(k => exclude.indexOf(k) == -1)\r\n\r\n      exclude.forEach(column => {\r\n        if (!(column in dataTable)) {\r\n          globalStore.commit('error', `Pivot column ${column} not in ${name}`)\r\n        }\r\n      })\r\n\r\n      // New data entries\r\n      const columns = Object.fromEntries(exclude.map(c => [c, []]))\r\n\r\n      // Pivot target arrays\r\n      const values = [] as any[]\r\n      const names = [] as any[]\r\n\r\n      const n = dataTable[Object.keys(dataTable)[0]].values.length\r\n\r\n      //console.log('Columns', columns, 'Pivot', pivot, 'n', n)\r\n\r\n      for (let i = 0; i < n; i++) {\r\n        pivot.forEach(c => {\r\n          exclude.forEach(c => columns[c].push(dataTable[c].values[i]))\r\n          names.push(c)\r\n          values.push(dataTable[c].values[i])\r\n        })\r\n      }\r\n\r\n      //console.log('Columns', columns, 'Values', values, 'Names', names)\r\n\r\n      exclude.forEach(c => {\r\n        dataTable[c].values = columns[c]\r\n      })\r\n      dataTable[valuesTo] = { name: valuesTo, values: values } as DataTableColumn\r\n      dataTable[namesTo] = { name: namesTo, values: names } as DataTableColumn\r\n    },\r\n\r\n    mergeDatasets(datasets: DataSet[]): DataTable {\r\n      const data = {} as DataTable\r\n      const first = datasets[0].data!\r\n\r\n      Object.keys(first).forEach((column: string) => {\r\n        const mapped = datasets.map(ds => {\r\n          if (!(column in ds.data!)) {\r\n            globalStore.commit(\r\n              'error',\r\n              `Merged dataset ${ds.name} does not contain column ${column}`\r\n            )\r\n          }\r\n\r\n          return ds.data![column].values\r\n        })\r\n\r\n        // Need to distinguish primitive arrays and standard ones\r\n        let values\r\n        if (\r\n          first[column].values instanceof Float32Array ||\r\n          first[column].values instanceof Float64Array\r\n        )\r\n          values = mergeTypedArrays(mapped as Array<any>[])\r\n        else values = mapped.flat()\r\n\r\n        data[column] = {\r\n          name: column,\r\n          type: first[column].type,\r\n          values: values,\r\n        }\r\n      })\r\n\r\n      return data\r\n    },\r\n\r\n    recursiveCheckForTemplate(dataTable: DataTable, object: any, template: string) {\r\n      Object.entries(object).forEach(kv => {\r\n        const [key, value] = kv\r\n        if (typeof value === 'string') {\r\n          // string stuff\r\n          if (value.includes(template)) {\r\n            const column = value.substring(value.indexOf('.') + 1)\r\n            if (column in dataTable) {\r\n              // Merge two columns into a multi index\r\n              if (this.vizDetails.multiIndex && column in this.vizDetails.multiIndex) {\r\n                // This creates a tuples of two arrays that has special handling in plotly\r\n                object[key] = [\r\n                  dataTable[column].values,\r\n                  dataTable[this.vizDetails.multiIndex[column]].values,\r\n                ]\r\n              }\r\n              // Normal way to add values into the column\r\n              else object[key] = dataTable[column].values\r\n            } else {\r\n              globalStore.commit('error', `Column \"${column}\" not in ${Object.keys(dataTable)}`)\r\n            }\r\n          }\r\n        } else if (Array.isArray(value)) {\r\n          // array stuff\r\n          if (typeof value[0] == 'object') {\r\n            value.forEach(v => this.recursiveCheckForTemplate(dataTable, v, template))\r\n          }\r\n        } else if (typeof value == 'object') {\r\n          this.recursiveCheckForTemplate(dataTable, value, template)\r\n        }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.mycomponent {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  // margin: 1rem;\r\n}\r\n\r\n.mycomponent.is-thumbnail {\r\n  padding-top: 0;\r\n  height: $thumbnailHeight;\r\n}\r\n\r\n.myplot {\r\n  height: 100%;\r\n  width: 100%;\r\n  flex: 1;\r\n  margin: 0 auto;\r\n}\r\n\r\n.myplot.is-thumbnail {\r\n  padding: 0rem 0rem;\r\n  margin: 0 0;\r\n}\r\n</style>\r\n","\r\n.mycomponent(:class=\"{'is-thumbnail': thumbnail}\")\r\n\r\n  VuePlotly.myplot(\r\n    :data=\"traces\"\r\n    :layout=\"layout\"\r\n    :options=\"options\"\r\n    :id=\"id\"\r\n  )\r\n\r\n","<template lang=\"pug\">\r\nplotly-diagram.plotly-panel(\r\n  :root=\"fileSystemConfig.slug\"\r\n  :subfolder=\"subfolder\"\r\n  :config=\"config\"\r\n  :thumbnail=\"false\"\r\n  :resize=\"resizeEvent\"\r\n\r\n)\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport { FileSystemConfig } from '@/Globals'\r\nimport PlotlyDiagram from '@/plugins/plotly/PlotlyDiagram.vue'\r\n\r\nexport default defineComponent({\r\n  name: 'PlotlyDiagramPanel',\r\n  components: { PlotlyDiagram },\r\n\r\n  data: () => {\r\n    return {\r\n      resizeEvent: {} as any,\r\n    }\r\n  },\r\n\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    config: { type: Object, required: true },\r\n    cardId: String,\r\n  },\r\n  mounted() {\r\n    this.$emit('isLoaded')\r\n    this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\r\n  },\r\n  methods: {\r\n    changeDimensions(event: any) {\r\n      this.resizeEvent = event\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.plotly-panel {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  // background-color: cyan;\r\n}\r\n</style>\r\n","\r\nplotly-diagram.plotly-panel(\r\n  :root=\"fileSystemConfig.slug\"\r\n  :subfolder=\"subfolder\"\r\n  :config=\"config\"\r\n  :thumbnail=\"false\"\r\n  :resize=\"resizeEvent\"\r\n\r\n)\r\n"],"names":["MyComponent","defineComponent","name","components","VuePlotly","i18n","messages","en","total","showChanges","de","props","root","type","String","required","subfolder","config","Object","datamanager","resize","thumbnail","Boolean","yamlConfig","data","globalState","globalStore","state","vizDetails","title","description","loadingText","jsonChart","id","Math","floor","random","traces","prevWidth","prevHeight","myDataManager","this","DashboardDataManager","layout","margin","t","b","l","r","pad","font","color","family","UI_FONT","xaxis","automargin","autorange","text","standoff","animate","yaxis","rangemode","legend","orientation","x","y","options","displaylogo","responsive","modeBarButtonsToRemove","toImageButtonOptions","format","filename","width","height","computed","fileApi","HTTPFileSystem","fileSystem","svnProject","$store","svnProjects","filter","a","slug","length","console","log","Error","watch","changeDimensions","event","updateTheme","mounted","getVizDetails","datasets","prepareData","mergeLayouts","fixedRatio","assign","constrain","scaleanchor","scaleration","dropdownMenu","interactive","createMenus","err","e","error","window","addEventListener","beforeDestroy","removeEventListener","methods","dim","mergedLayout","__spreadValues","mode","buttons","groups","n","values","forEach","tr","idx","original_name","group_name","push","visible","entries","kv","group","ids","arr","Array","fill","method","args","label","first","updatemenus","yanchor","sliders","currentvalue","xanchor","prefix","steps","colors","paper_bgcolor","BG_COLOR_DASHBOARD","colorScheme","plot_bgcolor","isDarkMode","$emit","_a","indexOf","getFileText","parsed","yaml","parse","Promise","all","map","key","value","file","loadDataset","mergeDatasets","dataset","getColors","trIdx","grouped","ds","startsWith","ref","replace","groupDataTable","keys","c","copy","JSON","stringify","recursiveCheckForTemplate","marker","csvData","getDataset","highPrecision","allRows","transformData","conf","ramp","colorRamp","pivot","exclude","valuesTo","namesTo","aggregateColumns","aggregate","groupBy","target","constant","column","countOccurrences","array","counts","el","dataTable","columnName","obj","occ","group2","dt","kv2","column2","getPrototypeOf","constructor","i","aggr","k","reduce","acc","fromEntries","cv","commit","columns","names","c2","mapped","Float32Array","Float64Array","mergeTypedArrays","flat","object","template","includes","substring","multiIndex","isArray","v","_vm","_h","$createElement","_c","_self","staticClass","class","attrs","__vue2_script","PlotlyDiagram","resizeEvent","fileSystemConfig","cardId","resizer"],"mappings":"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"}