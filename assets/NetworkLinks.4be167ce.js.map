{"version":3,"file":"NetworkLinks.4be167ce.js","sources":["../../src/plugins/links-gl/TimeSlider.vue","../../src/plugins/links-gl/TimeSlider.vue?vue&type=template&lang.js","../../src/plugins/links-gl/SelectorPanel.vue","../../src/plugins/links-gl/SelectorPanel.vue?vue&type=template&lang.js","../../src/plugins/links-gl/NetworkLinks.vue","../../src/plugins/links-gl/LinkLayer.tsx","../../node_modules/shallow-equal/dist/index.esm.js","../../src/plugins/links-gl/NetworkLinks.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\n.time-slider-main-content\r\n  vue-slider.time-slider(v-bind=\"timeSlider\" v-model=\"sliderValue\")\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nimport VueSlider from 'vue-slider-component'\r\n\r\nexport default defineComponent({\r\n  name: 'TimeSliderLinksGl',\r\n  components: { VueSlider },\r\n  props: {\r\n    useRange: Boolean,\r\n    stops: { type: Array, required: true },\r\n    dropdownValue: String,\r\n  },\r\n  data() {\r\n    return {\r\n      sliderValue: '' as any,\r\n      timeSlider: {\r\n        adsorb: true,\r\n        contained: true,\r\n        data: [] as any[],\r\n        'enable-cross': false,\r\n        height: 8,\r\n        piecewise: true,\r\n        show: false,\r\n        marks: [] as any[],\r\n        minRange: 1,\r\n        processStyle: { backgroundColor: '#00bb5588', borderColor: '#f05b72' },\r\n        sliderStyle: [{ backgroundColor: '#f05b72' }, { backgroundColor: '#3498db' }],\r\n        'tooltip-placement': 'bottom',\r\n      },\r\n    }\r\n  },\r\n  watch: {\r\n    dropdownValue(value) {\r\n      this.sliderValue = value\r\n    },\r\n\r\n    useRange(useIt: boolean) {\r\n      if (useIt) {\r\n        this.sliderValue = [this.stops[0], this.stops[this.stops.length - 1]]\r\n      } else {\r\n        this.sliderValue = [this.stops[0]]\r\n      }\r\n      console.log('changed to: ' + this.sliderValue)\r\n    },\r\n    sliderValue(result: any) {\r\n      this.$emit('change', result)\r\n    },\r\n  },\r\n  mounted() {\r\n    this.sliderValue = this.stops[0] || '...'\r\n    this.timeSlider.data = this.stops\r\n    this.timeSlider.marks = [\r\n      this.stops[0],\r\n      this.stops[Math.floor(this.stops.length / 2)],\r\n      this.stops[this.stops.length - 1],\r\n    ] // this.stops.filter((stop, i) => i % 3 === 0)\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n@import '../../../node_modules/vue-slider-component/theme/default.css';\r\n\r\n.time-slider-main-content {\r\n  padding: 0.5rem 0.25rem 2rem 0.25rem;\r\n  margin: 0 0.2rem;\r\n}\r\n</style>\r\n","\r\n.time-slider-main-content\r\n  vue-slider.time-slider(v-bind=\"timeSlider\" v-model=\"sliderValue\")\r\n","<template lang=\"pug\">\r\n.config-panel\r\n\r\n  //- time-of-day slider\r\n  .panel-item.expand(v-if=\"vizDetails.useSlider && activeColumn\")\r\n    p: b {{ activeColumn }}\r\n\r\n    time-slider.time-slider(\r\n      :useRange='false'\r\n      :stops=\"getColumns()\"\r\n      :dropdownValue=\"activeColumn\"\r\n      @change='handleTimeSliderChanged')\r\n\r\n\r\n  //- Column picker  -- if no slider\r\n  .panel-item(v-if=\"!vizDetails.useSlider\")\r\n    p: b {{ $t('selectColumn') }}\r\n\r\n    .dropdown.is-up.full-width(:class=\"{'is-active': isButtonActive}\")\r\n      .dropdown-trigger\r\n        button.full-width.is-warning.button(:class=\"{'is-loading': !activeColumn}\"\r\n          aria-haspopup=\"true\" aria-controls=\"dropdown-menu-column-selector\"\r\n          @click=\"handleClickDropdown\"\r\n        )\r\n          b {{ buttonTitle }}\r\n          span.icon.is-small: i.fas.fa-angle-down(aria-hidden=\"true\")\r\n\r\n      #dropdown-menu-column-selector.dropdown-menu(role=\"menu\" :style=\"{'max-height':'24rem', 'overflow-y': 'auto', 'border': '1px solid #ccc'}\")\r\n        .dropdown-content\r\n          a.dropdown-item(v-for=\"column in getColumns()\"\r\n            @click=\"handleSelectColumn(column)\") {{ column }}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {\r\n      selectColumn: 'Data:',\r\n      loading: 'Loading...',\r\n      bandwidths: 'Widths: 1 pixel =:',\r\n      timeOfDay: '',\r\n      colors: 'Colors',\r\n    },\r\n    de: {\r\n      selectColumn: 'Datenmengen:',\r\n      loading: 'Laden...',\r\n      bandwidths: 'Linienbreiten: 1 pixel =:',\r\n      timeOfDay: '',\r\n      colors: 'Farben',\r\n    },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport { debounce } from 'debounce'\r\n\r\nimport globalStore from '@/store'\r\nimport TimeSlider from './TimeSlider.vue'\r\nimport { ColorScheme, DataTable, DataType, LookupDataset } from '@/Globals'\r\n\r\nexport default defineComponent({\r\n  name: 'SelectorPanel',\r\n  i18n,\r\n  components: { TimeSlider },\r\n  props: {\r\n    csvData: { type: Object as PropType<LookupDataset>, required: true },\r\n    scaleWidth: { type: Number, required: true },\r\n    showDiffs: { type: Boolean, required: true },\r\n    vizDetails: { type: Object as PropType<{ useSlider: boolean }>, required: true },\r\n  },\r\n  data() {\r\n    return {\r\n      isButtonActive: false,\r\n      isColorButtonActive: false,\r\n      scaleWidthValue: '',\r\n      debounceScale: {} as any, // (vm: any) => debounce(vm.gotNewScale, 500),\r\n      handleTimeSliderChanged: {} as any,\r\n    }\r\n  },\r\n  computed: {\r\n    activeColumn(): string {\r\n      return this.csvData.activeColumn\r\n    },\r\n    buttonTitle(): string {\r\n      if (!this.activeColumn) return '' + this.$i18n.t('loading')\r\n      return this.activeColumn\r\n    },\r\n  },\r\n  watch: {\r\n    scaleWidth() {\r\n      this.scaleWidthValue = '' + this.scaleWidth\r\n    },\r\n    scaleWidthValue() {\r\n      // if (this.scaleWidth === parseFloat(this.scaleWidthValue)) return\r\n\r\n      if (isNaN(parseFloat(this.scaleWidthValue))) {\r\n        return\r\n      }\r\n      this.debounceScale()\r\n    },\r\n  },\r\n  methods: {\r\n    getColumns() {\r\n      // TODO: drop first column always: it's the link-id...\r\n      const columns = Object.values(this.csvData.dataTable)\r\n        .slice(1)\r\n        .filter(f => f.name && f.type !== DataType.LOOKUP)\r\n        .map(f => f.name)\r\n      return columns\r\n    },\r\n    gotNewScale() {\r\n      // if (this.scaleWidth !== parseFloat(this.scaleWidthValue)) {\r\n      //   this.scaleWidthValue = '' + this.scaleWidth\r\n      // }\r\n      this.$emit('scale', parseFloat(this.scaleWidthValue))\r\n    },\r\n\r\n    changeTimeSlider(value: any) {\r\n      console.log('new slider!', value)\r\n      if (value.length && value.length === 1) value = value[0]\r\n\r\n      this.$emit('slider', { dataset: this.csvData, column: value })\r\n    },\r\n\r\n    handleClickDropdown() {\r\n      this.isButtonActive = !this.isButtonActive\r\n    },\r\n\r\n    handleColorRamp(colors: string) {\r\n      console.log(colors)\r\n      this.isColorButtonActive = false\r\n      this.$emit('colors', colors)\r\n    },\r\n\r\n    clearDropdown() {\r\n      console.log('boop')\r\n      this.isButtonActive = false\r\n    },\r\n\r\n    async handleSelectColumn(column: string) {\r\n      console.log('panel: selected', column)\r\n      this.isButtonActive = false\r\n      this.$emit('column', { dataset: this.csvData, column: column })\r\n    },\r\n  },\r\n  mounted() {\r\n    this.debounceScale = debounce(this.gotNewScale, 500)\r\n    this.handleTimeSliderChanged = debounce(this.changeTimeSlider, 250)\r\n    this.scaleWidthValue = '' + this.scaleWidth\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.config-panel {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.full-width {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.panel-item {\r\n  padding-right: 1rem;\r\n}\r\n\r\n.last-item {\r\n  padding-right: 0;\r\n}\r\n\r\np {\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.color-button,\r\n.swap-color {\r\n  width: 8rem;\r\n  height: 32px;\r\n}\r\n\r\n.color-button:hover {\r\n  cursor: pointer;\r\n  box-shadow: 0px 0px 3px 3px rgba(128, 128, 128, 0.3);\r\n}\r\n\r\nbutton:hover {\r\n  box-shadow: 0px 0px 3px 3px rgba(128, 128, 128, 0.3);\r\n}\r\n\r\ninput {\r\n  border: none;\r\n  background-color: var(--bgCream2);\r\n  color: var(--bgDark);\r\n}\r\n\r\n.dropdown {\r\n  overflow: visible;\r\n  // width: 175px;\r\n}\r\n\r\n#dropdown-menu-color-selector {\r\n  background-color: var(--bgBold);\r\n\r\n  p {\r\n    color: #888;\r\n  }\r\n}\r\n\r\n.expand {\r\n  flex: 1;\r\n}\r\n\r\n.time-slider {\r\n  padding-bottom: 1.25rem;\r\n  width: 100%;\r\n}\r\n\r\n@media only screen and (max-width: 768px) {\r\n  .config-panel {\r\n    flex-direction: column;\r\n  }\r\n}\r\n</style>\r\n","\r\n.config-panel\r\n\r\n  //- time-of-day slider\r\n  .panel-item.expand(v-if=\"vizDetails.useSlider && activeColumn\")\r\n    p: b {{ activeColumn }}\r\n\r\n    time-slider.time-slider(\r\n      :useRange='false'\r\n      :stops=\"getColumns()\"\r\n      :dropdownValue=\"activeColumn\"\r\n      @change='handleTimeSliderChanged')\r\n\r\n\r\n  //- Column picker  -- if no slider\r\n  .panel-item(v-if=\"!vizDetails.useSlider\")\r\n    p: b {{ $t('selectColumn') }}\r\n\r\n    .dropdown.is-up.full-width(:class=\"{'is-active': isButtonActive}\")\r\n      .dropdown-trigger\r\n        button.full-width.is-warning.button(:class=\"{'is-loading': !activeColumn}\"\r\n          aria-haspopup=\"true\" aria-controls=\"dropdown-menu-column-selector\"\r\n          @click=\"handleClickDropdown\"\r\n        )\r\n          b {{ buttonTitle }}\r\n          span.icon.is-small: i.fas.fa-angle-down(aria-hidden=\"true\")\r\n\r\n      #dropdown-menu-column-selector.dropdown-menu(role=\"menu\" :style=\"{'max-height':'24rem', 'overflow-y': 'auto', 'border': '1px solid #ccc'}\")\r\n        .dropdown-content\r\n          a.dropdown-item(v-for=\"column in getColumns()\"\r\n            @click=\"handleSelectColumn(column)\") {{ column }}\r\n\r\n","<template lang=\"pug\">\r\n.link-volume-plot(:class=\"{'hide-thumbnail': !thumbnail}\"\r\n        :style='{\"background\": urlThumbnail}'\r\n        oncontextmenu=\"return false\")\r\n\r\n  .plot-container(v-if=\"!thumbnail\" :id=\"`container-${linkLayerId}`\")\r\n    link-gl-layer.map-area(\r\n        :viewId=\"linkLayerId\"\r\n        :links=\"geojsonData\"\r\n        :colorRampType=\"colorRampType\"\r\n        :build=\"csvData\"\r\n        :base=\"csvBase\"\r\n        :widths=\"csvWidth\"\r\n        :widthsBase=\"csvWidthBase\"\r\n        :dark=\"isDarkMode\"\r\n        :newColors=\"colorArray\"\r\n        :newWidths=\"widthArray\"\r\n        :scaleWidth=\"scaleWidth\"\r\n        :projection=\"vizDetails.projection\"\r\n        :mapIsIndependent=\"vizDetails.mapIsIndependent\"\r\n    )\r\n\r\n    zoom-buttons(v-if=\"!thumbnail\")\r\n    //- drawing-tool(v-if=\"!thumbnail\")\r\n\r\n    //- color/width/etc panel\r\n    viz-configurator(v-if=\"!thumbnail && isDataLoaded\"\r\n      :vizDetails=\"vizDetails\"\r\n      :datasets=\"datasets\"\r\n      :fileSystem=\"fileSystem\"\r\n      :subfolder=\"myState.subfolder\"\r\n      :yamlConfig=\"yamlConfig\"\r\n      :legendStore=\"legendStore\"\r\n      :filterDefinitions=\"currentUIFilterDefinitions\"\r\n      @update=\"changeConfiguration\")\r\n\r\n    //- .top-panel(v-if=\"vizDetails.title\")\r\n    //-   .panel-item\r\n    //-     h3 {{ vizDetails.title }}\r\n    //-     p {{ vizDetails.description }}\r\n\r\n    .bottom-panel(v-if=\"!thumbnail\")\r\n      .status-message(v-if=\"myState.statusMessage\")\r\n        p {{ myState.statusMessage }}\r\n\r\n      .panel-items(v-show=\"csvWidth.activeColumn\")\r\n\r\n        //- slider/dropdown for selecting column\r\n        .panel-item.config-section\r\n          selector-panel(\r\n            :vizDetails=\"vizDetails\"\r\n            :csvData=\"csvWidth\"\r\n            :scaleWidth=\"scaleWidth\"\r\n            :showDiffs=\"vizDetails.showDifferences\"\r\n            @column=\"handleNewDataColumn\"\r\n            @slider=\"handleNewDataColumn\"\r\n          )\r\n\r\n        //- DIFF checkbox\r\n        .panel-item.diff-section(v-if=\"vizDetails.datasets.csvBase\")\r\n          toggle-button.toggle(:width=\"40\" :value=\"vizDetails.showDifferences\" :sync=\"true\" :labels=\"false\"\r\n            :color=\"{checked: '#4b7cc4', unchecked: '#222'}\"\r\n            @change=\"toggleShowDiffs\")\r\n          p: b {{ $t('showDiffs') }}\r\n\r\n        //- FilterPanel.filter-panel(v-if=\"vizDetails.useSlider\"\r\n        //-   :props=\"csvWidth\"\r\n        //-   @activeColumns=\"handleNewFilter\"\r\n        //- )\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {\r\n      all: 'All',\r\n      colors: 'Colors',\r\n      loading: 'Loading',\r\n      selectColumn: 'Select data column',\r\n      timeOfDay: 'Time of day',\r\n      bandwidths: 'Widths: 1 pixel =',\r\n      showDiffs: 'Show Differences',\r\n    },\r\n    de: {\r\n      all: 'Alle',\r\n      colors: 'Farben',\r\n      loading: 'Wird geladen',\r\n      selectColumn: 'Datenspalte wählen',\r\n      timeOfDay: 'Uhrzeit',\r\n      bandwidths: 'Linienbreiten: 1 pixel =',\r\n      showDiffs: 'Differenzen',\r\n    },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\nimport { ToggleButton } from 'vue-js-toggle-button'\r\nimport { rgb } from 'd3-color'\r\nimport { scaleThreshold, scaleOrdinal } from 'd3-scale'\r\nimport { shallowEqualObjects } from 'shallow-equal'\r\nimport readBlob from 'read-blob'\r\nimport YAML from 'yaml'\r\n\r\nimport globalStore from '@/store'\r\nimport { MAP_STYLES_OFFLINE, DataTableColumn, DataTable, DataType, LookupDataset } from '@/Globals'\r\n// import FilterPanel from './BadFilterPanel.vue'\r\nimport SelectorPanel from './SelectorPanel.vue'\r\nimport LinkGlLayer from './LinkLayer'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\r\nimport VizConfigurator from '@/components/viz-configurator/VizConfigurator.vue'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\nimport LegendStore from '@/js/LegendStore'\r\nimport Coords from '@/js/Coords'\r\nimport { arrayBufferToBase64 } from '@/js/util'\r\n\r\nimport {\r\n  ColorScheme,\r\n  FileSystem,\r\n  FileSystemConfig,\r\n  VisualizationPlugin,\r\n  Status,\r\n  REACT_VIEW_HANDLES,\r\n} from '@/Globals'\r\n\r\nimport { LineColorDefinition } from '@/components/viz-configurator/LineColors.vue'\r\nimport { LineWidthDefinition } from '@/components/viz-configurator/LineWidths.vue'\r\nimport { DatasetDefinition } from '@/components/viz-configurator/AddDatasets.vue'\r\nimport DashboardDataManager from '@/js/DashboardDataManager'\r\n\r\nconst LOOKUP_COLUMN = '_LINK_OFFSET_'\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'NetworkLinksPlugin',\r\n  i18n,\r\n  components: {\r\n    SelectorPanel,\r\n    DrawingTool,\r\n    LinkGlLayer,\r\n    ToggleButton,\r\n    VizConfigurator,\r\n    ZoomButtons,\r\n  },\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    yamlConfig: String,\r\n    config: Object as any,\r\n    thumbnail: Boolean,\r\n    datamanager: { type: Object as PropType<DashboardDataManager> },\r\n  },\r\n  data() {\r\n    return {\r\n      standaloneYAMLconfig: {\r\n        title: '',\r\n        description: '',\r\n        csvFile: '',\r\n        csvBase: '',\r\n        datasets: {} as { [id: string]: string },\r\n        useSlider: false,\r\n        showDifferences: false,\r\n        shpFile: '',\r\n        dbfFile: '',\r\n        network: '',\r\n        geojsonFile: '',\r\n        projection: '',\r\n        center: null as any,\r\n        zoom: 0,\r\n        widthFactor: null as any,\r\n        thumbnail: '',\r\n        sum: false,\r\n        nodes: '', // SFCTA nodes shapefile\r\n        links: [] as string[], // SFCTA links DBF files\r\n        mapIsIndependent: false,\r\n        display: {\r\n          color: {} as any,\r\n          width: {} as any,\r\n        },\r\n      },\r\n\r\n      YAMLrequirementsLinks: {\r\n        // csvFile: '',\r\n        // network: '',\r\n        // projection: '',\r\n      },\r\n\r\n      // this contains the display settings for this view; it is the View Model.\r\n      // use changeConfiguration to modify this for now (todo: move to state model)\r\n      vizDetails: {\r\n        title: '',\r\n        description: '',\r\n        csvFile: '',\r\n        csvBase: '',\r\n        datasets: {} as { [id: string]: string },\r\n        useSlider: false,\r\n        showDifferences: false,\r\n        shpFile: '',\r\n        dbfFile: '',\r\n        network: '',\r\n        geojsonFile: '',\r\n        projection: '',\r\n        center: null as any,\r\n        zoom: 0,\r\n        widthFactor: null as any,\r\n        thumbnail: '',\r\n        sum: false,\r\n        nodes: '', // SFCTA nodes shapefile\r\n        links: [] as string[], // SFCTA links DBF files\r\n        mapIsIndependent: false,\r\n        display: {\r\n          color: {} as any,\r\n          width: {} as any,\r\n        },\r\n      },\r\n\r\n      currentUIFilterDefinitions: {} as any,\r\n      datasets: {} as { [id: string]: DataTable },\r\n      isButtonActiveColumn: false,\r\n      linkLayerId: `linklayer-${Math.floor(1e12 * Math.random())}` as any,\r\n      scaleWidth: 0,\r\n      numLinks: 0,\r\n      showTimeRange: false,\r\n      legendStore: new LegendStore(),\r\n      geojsonData: {\r\n        source: new Float32Array(),\r\n        dest: new Float32Array(),\r\n        linkIds: [] as any[],\r\n        projection: '',\r\n      },\r\n      fixedColors: ['#4e79a7'],\r\n      myState: {\r\n        statusMessage: '',\r\n        subfolder: '',\r\n        yamlConfig: '',\r\n        thumbnail: false,\r\n      },\r\n\r\n      csvData: {\r\n        datasetKey: '',\r\n        activeColumn: '',\r\n        dataTable: {},\r\n        csvRowFromLinkRow: [],\r\n      } as LookupDataset,\r\n\r\n      csvBase: {\r\n        datasetKey: '',\r\n        activeColumn: '',\r\n        dataTable: {},\r\n        csvRowFromLinkRow: [],\r\n      } as LookupDataset,\r\n\r\n      csvWidth: {\r\n        datasetKey: '',\r\n        activeColumn: '',\r\n        dataTable: {},\r\n        csvRowFromLinkRow: [],\r\n      } as LookupDataset,\r\n\r\n      csvWidthBase: {\r\n        datasetKey: '',\r\n        activeColumn: '',\r\n        dataTable: {},\r\n        csvRowFromLinkRow: [],\r\n      } as LookupDataset,\r\n\r\n      // private linkOffsetLookup: { [id: string]: number } = {}\r\n      isDarkMode: this.$store.state.colorScheme === ColorScheme.DarkMode,\r\n      isDataLoaded: false,\r\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\r\n\r\n      currentWidthDefinition: { columnName: '' } as LineWidthDefinition,\r\n\r\n      // DataManager might be passed in from the dashboard; or we might be\r\n      // in single-view mode, in which case we need to create one for ourselves\r\n      myDataManager: this.datamanager || new DashboardDataManager(this.root, this.subfolder),\r\n\r\n      resizer: undefined as ResizeObserver | undefined,\r\n      dataLoaderWorkers: [] as Worker[],\r\n      csvRowLookupFromLinkRow: {} as { [datasetId: string]: number[] },\r\n\r\n      colorArray: new Uint8Array(),\r\n      widthArray: new Float32Array(),\r\n    }\r\n  },\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    urlThumbnail(): string {\r\n      return this.thumbnailUrl\r\n    },\r\n\r\n    colorRampType(): any {\r\n      const rampType = this.vizDetails.display.color?.colorRamp?.style\r\n      if (rampType === undefined) return -1\r\n      return rampType\r\n    },\r\n\r\n    buttonTitle(): string {\r\n      return this.csvData.activeColumn || 'Loading...'\r\n    },\r\n  },\r\n  watch: {\r\n    '$store.state.viewState'() {\r\n      if (this.vizDetails.mapIsIndependent) return\r\n\r\n      if (!REACT_VIEW_HANDLES[this.linkLayerId]) return\r\n      REACT_VIEW_HANDLES[this.linkLayerId]()\r\n    },\r\n\r\n    '$store.state.colorScheme'() {\r\n      setTimeout(\r\n        () => (this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode),\r\n        100\r\n      )\r\n    },\r\n\r\n    'vizDetails.showDifferences'() {\r\n      this.generateWidthArray()\r\n      this.generateColorArray()\r\n    },\r\n  },\r\n  methods: {\r\n    setDataIsLoaded() {\r\n      this.isDataLoaded = true\r\n    },\r\n    async getVizDetails() {\r\n      const filename = this.myState.yamlConfig\r\n\r\n      const emptyState = {\r\n        showDifferences: false,\r\n        datasets: {} as any,\r\n        display: { color: {} as any, width: {} as any },\r\n      }\r\n\r\n      // are we in a dashboard?\r\n      if (this.config) {\r\n        this.validateYAML()\r\n        this.vizDetails = Object.assign({}, emptyState, this.config)\r\n        return\r\n      }\r\n\r\n      // was a YAML file was passed in?\r\n      if (filename?.endsWith('yaml') || filename?.endsWith('yml')) {\r\n        await this.loadStandaloneYamlConfig()\r\n      }\r\n\r\n      // is this a bare network file? - build vizDetails manually\r\n      if (/(shp|xml|geojson|geo\\.json)(|\\.gz)$/.test(filename)) {\r\n        const title = 'Network: ' + this.myState.yamlConfig // .substring(0, 7 + this.myState.yamlConfig.indexOf('network'))\r\n\r\n        this.vizDetails = Object.assign({}, this.vizDetails, {\r\n          network: this.myState.yamlConfig,\r\n          title,\r\n          description: this.myState.subfolder,\r\n        })\r\n      }\r\n\r\n      const t = this.vizDetails.title ? this.vizDetails.title : filename || 'Network Links'\r\n      this.$emit('title', t)\r\n    },\r\n\r\n    async loadStandaloneYamlConfig() {\r\n      try {\r\n        const filename =\r\n          this.myState.yamlConfig.indexOf('/') > -1\r\n            ? this.myState.yamlConfig\r\n            : this.myState.subfolder + '/' + this.myState.yamlConfig\r\n\r\n        const text = await this.fileApi.getFileText(filename)\r\n        this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\r\n        this.validateYAML()\r\n        this.setVizDetails()\r\n      } catch (err) {\r\n        console.error('failed')\r\n        const e = err as any\r\n        // maybe it failed because password?\r\n        if (this.fileSystem.needPassword && e.status === 401) {\r\n          this.$store.commit('requestLogin', this.fileSystem.slug)\r\n        }\r\n      }\r\n    },\r\n\r\n    async validateYAML() {\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n\r\n      let configuration: any\r\n\r\n      if (hasYaml) {\r\n        console.log('has yaml')\r\n        configuration = this.standaloneYAMLconfig\r\n      } else {\r\n        console.log('no yaml')\r\n        configuration = this.config\r\n      }\r\n\r\n      for (const key in this.YAMLrequirementsLinks) {\r\n        if (key in configuration === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsLinks for required keys',\r\n          })\r\n        }\r\n      }\r\n\r\n      if (configuration.zoom < 5 || configuration.zoom > 20) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Zoom is out of the recommended range `,\r\n          desc: 'Zoom levels should be between 5 and 20. ',\r\n        })\r\n      }\r\n\r\n      const hasGeoJson = !configuration.network && configuration.geojsonFile\r\n      if (hasGeoJson) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `YAML field geojsonFile deprecated`,\r\n          desc: 'Use YAML field network instad. ',\r\n        })\r\n      }\r\n\r\n      if (!configuration.display) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Display properties not set`,\r\n          desc: 'Standard values are used',\r\n        })\r\n      }\r\n    },\r\n\r\n    setVizDetails() {\r\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\r\n    },\r\n\r\n    async buildThumbnail() {\r\n      if (this.thumbnail && this.vizDetails.thumbnail) {\r\n        try {\r\n          const blob = await this.fileApi.getFileBlob(\r\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\r\n          )\r\n          const buffer = await readBlob.arraybuffer(blob)\r\n          const base64 = arrayBufferToBase64(buffer)\r\n          if (base64)\r\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      }\r\n    },\r\n\r\n    toggleShowDiffs() {\r\n      this.vizDetails.showDifferences = !this.vizDetails.showDifferences\r\n    },\r\n\r\n    /**\r\n     * changeConfiguration: is the main entry point for changing the viz model.\r\n     * anything that wants to change colors, widths, data, anthing like that\r\n     * should all pass through this function so the underlying data model\r\n     * is modified properly.\r\n     */\r\n    changeConfiguration(props: {\r\n      color?: LineColorDefinition\r\n      width?: LineWidthDefinition\r\n      dataset?: DatasetDefinition\r\n    }) {\r\n      // console.log(props)\r\n\r\n      if (props['color']) {\r\n        // if (JSON.stringify(props.color) === JSON.stringify(this.vizDetails.display.color)) return\r\n        this.vizDetails = Object.assign({}, this.vizDetails)\r\n        this.vizDetails.display.color = props.color\r\n        this.handleNewColor(props.color)\r\n      }\r\n      if (props['width']) {\r\n        // if (JSON.stringify(props.width) === JSON.stringify(this.vizDetails.display.width)) return\r\n        this.vizDetails = Object.assign({}, this.vizDetails)\r\n        this.vizDetails.display.width = props.width\r\n        this.handleNewWidth(props.width)\r\n      }\r\n      if (props['dataset']) {\r\n        // vizdetails just had the string name, whereas props.dataset contains\r\n        // a fully-build DatasetDefinition, so let's just handle that\r\n        this.handleNewDataset(props.dataset)\r\n      }\r\n    },\r\n\r\n    handleNewFilter(columns: number[]) {\r\n      this.csvData = Object.assign({}, this.csvData, { activeColumn: columns[0] })\r\n      this.csvWidth = Object.assign({}, this.csvWidth, { activeColumn: columns[0] })\r\n\r\n      // // this.timeFilterColumns = columns\r\n      // // give animation 150ms to run\r\n      // setTimeout(() => {\r\n      //   if (columns.length) {\r\n      //     this.csvData = Object.assign({}, this.csvData, { activeColumn: columns[0] })\r\n      //     this.csvWidth = Object.assign({}, this.csvWidth, { activeColumn: columns[0] })\r\n      //   }\r\n      // }, 150)\r\n    },\r\n\r\n    handleNewWidth(width: LineWidthDefinition) {\r\n      // if definition hasn't changed, do nothing\r\n      if (shallowEqualObjects(width, this.currentWidthDefinition)) {\r\n        return\r\n      }\r\n\r\n      const { columnName, dataset, scaleFactor } = width\r\n\r\n      // if dataset is set to None, just set scale to 0 and we're done\r\n      if (!dataset) {\r\n        this.scaleWidth = 0\r\n        return\r\n      }\r\n\r\n      // change scaling factor without recalculating anything:\r\n      if (scaleFactor !== undefined) this.scaleWidth = scaleFactor\r\n\r\n      // if everything else is the same, don't recalculate anything\r\n      let recalculate = true\r\n\r\n      if (!columnName) recalculate = false\r\n\r\n      if (\r\n        width.columnName === this.currentWidthDefinition.columnName &&\r\n        width.dataset === this.currentWidthDefinition.dataset\r\n      ) {\r\n        recalculate = false\r\n      }\r\n\r\n      // save settings\r\n      this.currentWidthDefinition = width\r\n\r\n      // this part takes longer to calculate. only do it if we have to\r\n      if (!recalculate) return\r\n\r\n      const selectedDataset = dataset ? this.datasets[dataset] : this.csvWidth.dataTable\r\n      if (!selectedDataset) return\r\n\r\n      if (this.csvWidth.dataTable !== selectedDataset) {\r\n        this.csvWidth.dataTable = selectedDataset\r\n        this.csvWidth.activeColumn = columnName || ''\r\n        // this.csvWidthBase.dataTable = selectedDataset\r\n        this.csvWidthBase.activeColumn = columnName || ''\r\n      }\r\n\r\n      const dataColumn = selectedDataset[columnName || '']\r\n      if (!dataColumn) {\r\n        const msg = `Width: column \"${columnName}\" not found in dataset \"${this.csvData.datasetKey}\"`\r\n        console.error(msg)\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg,\r\n        })\r\n        return\r\n      }\r\n\r\n      // Tell Vue we have new data\r\n      this.csvWidth = {\r\n        datasetKey: dataset || this.csvWidth.datasetKey,\r\n        dataTable: selectedDataset,\r\n        activeColumn: columnName || '',\r\n        csvRowFromLinkRow: dataset ? this.csvRowLookupFromLinkRow[dataset] : [],\r\n      }\r\n      this.generateWidthArray()\r\n    },\r\n\r\n    handleNewColor(color: LineColorDefinition) {\r\n      this.fixedColors = color.fixedColors\r\n\r\n      const columnName = color.columnName\r\n      if (!columnName) {\r\n        this.generateColorArray()\r\n        return\r\n      }\r\n\r\n      const datasetKey = color.dataset\r\n      const selectedDataset = this.datasets[datasetKey]\r\n      if (!selectedDataset) return\r\n\r\n      if (this.csvData.dataTable !== selectedDataset) {\r\n        this.csvData = {\r\n          datasetKey,\r\n          dataTable: selectedDataset,\r\n          activeColumn: '',\r\n          csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetKey],\r\n        }\r\n      }\r\n\r\n      const column = this.csvData.dataTable[columnName]\r\n      if (!column) {\r\n        const msg = `Color: Column \"${columnName}\" not found in dataset \"${this.csvData.datasetKey}\"`\r\n        console.error(msg)\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg,\r\n        })\r\n        return\r\n      }\r\n\r\n      this.csvData.activeColumn = column.name\r\n      this.csvBase.activeColumn = column.name\r\n\r\n      this.isButtonActiveColumn = false\r\n      this.generateColorArray()\r\n    },\r\n\r\n    setMapCenterFromVizDetails() {\r\n      if (typeof this.vizDetails.center == 'string') {\r\n        this.vizDetails.center = this.vizDetails.center.split(',').map(Number)\r\n      }\r\n\r\n      if (!this.vizDetails.zoom) {\r\n        this.vizDetails.zoom = 9\r\n      }\r\n\r\n      this.$store.commit('setMapCamera', {\r\n        longitude: this.vizDetails.center[0],\r\n        latitude: this.vizDetails.center[1],\r\n        bearing: 0,\r\n        pitch: 0,\r\n        zoom: this.vizDetails.zoom,\r\n        jump: false,\r\n      })\r\n\r\n      const view = {\r\n        longitude: this.vizDetails.center[0],\r\n        latitude: this.vizDetails.center[1],\r\n        bearing: 0,\r\n        pitch: 0,\r\n        zoom: this.vizDetails.zoom || 10, // use 10 default if we don't have a zoom\r\n        jump: false, // move the map no matter what\r\n      }\r\n\r\n      // bounce our map\r\n      if (REACT_VIEW_HANDLES[this.linkLayerId]) {\r\n        REACT_VIEW_HANDLES[this.linkLayerId](view)\r\n      }\r\n    },\r\n\r\n    async setMapCenter() {\r\n      if (this.vizDetails.center) return this.setMapCenterFromVizDetails()\r\n\r\n      const data = this.geojsonData\r\n\r\n      if (!data.source.length) return\r\n\r\n      let samples = 0\r\n      let longitude = 0\r\n      let latitude = 0\r\n\r\n      console.log({ projection: this.geojsonData.projection })\r\n\r\n      // figure out the center\r\n      if (this.geojsonData.projection === 'Atlantis') {\r\n        const webMercator =\r\n          '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs'\r\n        const firstPoint = Coords.toLngLat(webMercator, [data.source[0], data.source[1]])\r\n        longitude = firstPoint[0]\r\n        latitude = firstPoint[1]\r\n      } else {\r\n        const numLinks = data.source.length / 2\r\n        const gap = numLinks < 4096 ? 2 : 1024\r\n        for (let i = 0; i < numLinks; i += gap) {\r\n          longitude += data.source[i * 2]\r\n          latitude += data.source[i * 2 + 1]\r\n          samples++\r\n        }\r\n\r\n        longitude = longitude / samples\r\n        latitude = latitude / samples\r\n      }\r\n      console.log('center', longitude, latitude)\r\n\r\n      this.$store.commit('setMapCamera', {\r\n        longitude,\r\n        latitude,\r\n        bearing: 0,\r\n        pitch: 0,\r\n        zoom: 8,\r\n        jump: false,\r\n      })\r\n    },\r\n\r\n    setupLogoMover() {\r\n      this.resizer = new ResizeObserver(this.moveLogo)\r\n      const deckmap = document.getElementById(`container-${this.linkLayerId}`) as HTMLElement\r\n      this.resizer.observe(deckmap)\r\n    },\r\n\r\n    moveLogo() {\r\n      const deckmap = document.getElementById(`container-${this.linkLayerId}`) as HTMLElement\r\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\r\n      if (logo) {\r\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\r\n        logo.style.right = right\r\n      }\r\n    },\r\n\r\n    async updateStatus(message: string) {\r\n      this.myState.statusMessage = message\r\n    },\r\n\r\n    async loadNetwork(): Promise<any> {\r\n      if (!this.myDataManager) throw Error('links: no datamanager')\r\n\r\n      this.myState.statusMessage = 'Loading network...'\r\n\r\n      const filename = this.vizDetails.network || this.vizDetails.geojsonFile\r\n      try {\r\n        const network = await this.myDataManager.getRoadNetwork(\r\n          filename,\r\n          this.myState.subfolder,\r\n          this.vizDetails,\r\n          this.updateStatus\r\n        )\r\n\r\n        this.numLinks = network.linkIds.length\r\n        this.geojsonData = network as any\r\n\r\n        // Handle Atlantis: no long/lat coordinates\r\n        if (network.projection == 'Atlantis') {\r\n          this.vizDetails.projection = 'Atlantis'\r\n          this.$store.commit('setMapStyles', MAP_STYLES_OFFLINE)\r\n        }\r\n\r\n        this.setMapCenter() // this could be off main thread\r\n\r\n        this.myState.statusMessage = ''\r\n\r\n        this.moveLogo()\r\n\r\n        this.$emit('isLoaded', true)\r\n\r\n        // then load CSVs in background\r\n        this.loadCSVFiles()\r\n      } catch (e) {\r\n        this.$store.commit('error', '' + e)\r\n        this.$emit('isLoaded')\r\n      }\r\n    },\r\n\r\n    handleNewDataset(props: DatasetDefinition) {\r\n      console.log('NEW dataset', props)\r\n      const { key, dataTable, filename } = props\r\n\r\n      // We need a lookup so we can find the CSV row that matches each link row.\r\n      // A normal hashmap lookup is too slow, so we'll create an array containing\r\n      // the lookup on load (now); then it should be O(1) fast from that point forward.\r\n\r\n      // For now we assume the 1st CSV column always has the link ID\r\n      const columnNames = Object.keys(dataTable)\r\n      const assumedLinkIdIsFirstColumn = columnNames[0]\r\n      const linkIdColumn = dataTable[assumedLinkIdIsFirstColumn]\r\n\r\n      let tempMapLinkIdToCsvRow = {} as any\r\n      for (let csvRow = 0; csvRow < linkIdColumn.values.length; csvRow++) {\r\n        tempMapLinkIdToCsvRow[linkIdColumn.values[csvRow]] = csvRow\r\n      }\r\n\r\n      // Create a LOOKUP array which links this CSV data to the network links\r\n      // loop through all network links, we need the CSV row for each link.\r\n      const getCsvRowNumberFromLinkRowNumber: number[] = []\r\n      for (let linkRow = 0; linkRow < this.geojsonData.linkIds.length; linkRow++) {\r\n        const linkId = this.geojsonData.linkIds[linkRow]\r\n        const csvRow = tempMapLinkIdToCsvRow[linkId]\r\n        if (csvRow !== undefined) getCsvRowNumberFromLinkRowNumber[linkRow] = csvRow\r\n      }\r\n\r\n      // Save the lookup with the dataset.\r\n      this.csvRowLookupFromLinkRow[key] = getCsvRowNumberFromLinkRowNumber\r\n      tempMapLinkIdToCsvRow = {} // probably unnecessary but we def want this to be GC'ed\r\n\r\n      // all done!\r\n      if (filename) this.vizDetails.datasets[key] = filename\r\n      this.datasets = Object.assign({ ...this.datasets }, { [key]: dataTable })\r\n      this.handleDatasetisLoaded(key)\r\n    },\r\n\r\n    generateWidthArray() {\r\n      const numLinks = this.geojsonData.linkIds.length\r\n      const widths = new Float32Array(numLinks)\r\n\r\n      const widthValues = this.csvWidth?.dataTable[this.csvWidth.activeColumn]?.values\r\n      const baseValues = this.csvBase?.dataTable[this.csvBase.activeColumn]?.values\r\n\r\n      const width = (i: number) => {\r\n        const csvRow = this.csvWidth.csvRowFromLinkRow[i]\r\n        const value = widthValues[csvRow]\r\n\r\n        if (this.vizDetails.showDifferences) {\r\n          const baseRow = this.csvBase.csvRowFromLinkRow[i]\r\n          const baseValue = baseValues[baseRow]\r\n          const diff = Math.abs(value - baseValue)\r\n          return diff\r\n        } else {\r\n          return value\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < numLinks; i++) {\r\n        widths[i] = width(i)\r\n      }\r\n      this.widthArray = widths\r\n    },\r\n\r\n    generateColorArray() {\r\n      // deck.gl colors must be in rgb[] or rgba[] format\r\n      const colorsAsRGB: any = this.fixedColors.map(hexcolor => {\r\n        const c = rgb(hexcolor)\r\n        return [c.r, c.g, c.b, 255]\r\n      })\r\n\r\n      // Build breakpoints between 0.0 - 1.0 to match the number of color swatches\r\n      // e.g. If there are five colors, then we need 4 breakpoints: 0.2, 0.4, 0.6, 0.8.\r\n      // An exponent reduces visual dominance of very large values at the high end of the scale\r\n      const exponent = 4.0\r\n      const domain = new Array(this.fixedColors.length - 1)\r\n        .fill(0)\r\n        .map((v, i) => Math.pow((1 / this.fixedColors.length) * (i + 1), exponent))\r\n\r\n      // *scaleOrdinal* is the d3 function that maps categorical variables to colors.\r\n      // *scaleThreshold* is the d3 function that maps numerical values from [0.0,1.0) to the color buckets\r\n      // *range* is the list of colors;\r\n      // *domain* is the list of breakpoints in the 0-1.0 continuum; it is auto-created from data for categorical.\r\n      // *colorRampType* is 0 if a categorical color ramp is chosen\r\n      const buildData = this.csvData.dataTable\r\n      const baseData = this.csvBase.dataTable\r\n      const activeColumn = this.csvData.activeColumn\r\n\r\n      const buildColumn: DataTableColumn = buildData[activeColumn] || { values: [] }\r\n      const baseColumn: DataTableColumn = baseData[activeColumn] || { values: [] }\r\n\r\n      const isCategorical = this.colorRampType === 0 || buildColumn.type == DataType.STRING\r\n      const setColorBasedOnValue: any = isCategorical\r\n        ? scaleOrdinal().range(colorsAsRGB)\r\n        : scaleThreshold().range(colorsAsRGB).domain(domain)\r\n\r\n      const numLinks = this.geojsonData.linkIds.length\r\n      const colors = new Uint8Array(4 * numLinks)\r\n\r\n      const colorPaleGrey = globalStore.state.isDarkMode ? [80, 80, 80, 96] : [212, 212, 212, 40]\r\n      const colorInvisible = [0, 0, 0, 0]\r\n\r\n      const color = (i: number) => {\r\n        // if (!buildData[this.csvData.activeColumn]) return colorPaleGrey\r\n\r\n        const csvRow = this.csvData.csvRowFromLinkRow[i]\r\n        let value = buildData[this.csvData.activeColumn]?.values[csvRow]\r\n\r\n        if (this.fixedColors.length === 1) return colorsAsRGB[0]\r\n        if (!value && !this.vizDetails.showDifferences) return colorInvisible\r\n        if (isCategorical) return setColorBasedOnValue(value)\r\n\r\n        if (this.vizDetails.showDifferences) {\r\n          const baseRow = this.csvBase.csvRowFromLinkRow[i]\r\n          const baseValue = baseData[activeColumn].values[baseRow]\r\n          const diff = value - baseValue\r\n\r\n          if (diff === 0) return colorPaleGrey // setColorBasedOnValue(0.5)\r\n\r\n          // red vs. blue\r\n          if (this.isDarkMode) {\r\n            return diff > 0 ? [255, 64, 64, 255] : [64, 96, 255, 255] // red vs. blue\r\n          } else {\r\n            return diff > 0 ? [255, 0, 0, 255] : [32, 64, 255, 255] // red vs. blue\r\n          }\r\n        } else {\r\n          // don't use log scale if numbers are below 1.0\r\n          let ratio = value / (buildColumn.max || 1.0)\r\n          // if (ratio < 0.0001) return colorPaleGrey\r\n          return setColorBasedOnValue(ratio)\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < numLinks; i++) {\r\n        colors.set(color(i), i * 4)\r\n      }\r\n\r\n      this.colorArray = colors\r\n    },\r\n\r\n    loadCSVFiles() {\r\n      this.myState.statusMessage = 'Loading datasets...'\r\n\r\n      // Old yaml format listed csvFile and csvBase explicitly.\r\n      // Merge those into vizDetails.datasets if they exist.\r\n      if (!this.vizDetails.datasets) this.vizDetails.datasets = {}\r\n      if (this.vizDetails.csvFile) this.vizDetails.datasets.csvFile = this.vizDetails.csvFile\r\n      if (this.vizDetails.csvBase) this.vizDetails.datasets.csvBase = this.vizDetails.csvBase\r\n\r\n      // Load files on workers, in parallel and off the main thread\r\n      // this will call finishedLoadingCSV() for each when it's done loading & parsing\r\n      const datasetsToLoad = Object.entries(this.vizDetails.datasets)\r\n\r\n      if (datasetsToLoad.length) {\r\n        for (const [key, filename] of datasetsToLoad) {\r\n          this.loadOneCSVFile(key, filename)\r\n        }\r\n      } else {\r\n        this.showSimpleNetworkWithNoDatasets()\r\n      }\r\n    },\r\n\r\n    showSimpleNetworkWithNoDatasets() {\r\n      // no datasets; we are just showing the bare network\r\n      this.csvData = {\r\n        datasetKey: '',\r\n        dataTable: {\r\n          [LOOKUP_COLUMN]: {\r\n            name: LOOKUP_COLUMN,\r\n            type: DataType.LOOKUP,\r\n            values: [],\r\n          },\r\n        },\r\n        activeColumn: LOOKUP_COLUMN,\r\n        csvRowFromLinkRow: [],\r\n      }\r\n\r\n      // there is no range(maxValue) in Javascript! :-(\r\n      const length = this.geojsonData.source.length / 2 // half because this contains x/y coordinates\r\n      const lookup = [...Array(length).keys()]\r\n      this.csvData.dataTable[LOOKUP_COLUMN].values = lookup\r\n\r\n      this.myState.statusMessage = ''\r\n      this.setDataIsLoaded()\r\n\r\n      const color: LineColorDefinition = {\r\n        fixedColors: this.fixedColors,\r\n        dataset: '',\r\n        columnName: '',\r\n        normalize: '',\r\n      }\r\n      this.changeConfiguration({ color })\r\n    },\r\n\r\n    handleDatasetisLoaded(datasetId: string) {\r\n      const datasetKeys = Object.keys(this.datasets)\r\n\r\n      if (datasetId === 'csvBase' || datasetId === 'base') {\r\n        // is base dataset:\r\n        this.csvBase = {\r\n          datasetKey: datasetId,\r\n          dataTable: this.datasets[datasetId],\r\n          csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetId],\r\n          activeColumn: '',\r\n        }\r\n        this.csvWidthBase = {\r\n          datasetKey: datasetId,\r\n          dataTable: this.datasets[datasetId],\r\n          csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetId],\r\n          activeColumn: '',\r\n        }\r\n      } else if (this.csvData.activeColumn === '') {\r\n        // is first non-base dataset:\r\n        // set a default view, if user didn't pass anything in\r\n        if (!this.vizDetails.display.color && !this.vizDetails.display.width) {\r\n          const firstColumnName = Object.values(this.datasets[datasetId])[0].name\r\n          this.csvData = {\r\n            datasetKey: datasetId,\r\n            dataTable: this.datasets[datasetId],\r\n            csvRowFromLinkRow: this.csvRowLookupFromLinkRow[datasetId],\r\n            activeColumn: firstColumnName,\r\n          }\r\n        }\r\n      }\r\n\r\n      // last dataset\r\n      if (datasetKeys.length === Object.keys(this.vizDetails.datasets).length) {\r\n        this.setDataIsLoaded()\r\n        this.myState.statusMessage = ''\r\n        console.log({ DATASETS: this.datasets })\r\n      }\r\n    },\r\n\r\n    async loadOneCSVFile(key: string, filename: string) {\r\n      try {\r\n        const dataset = await this.myDataManager.getDataset({ dataset: filename })\r\n        const dataTable = dataset.allRows\r\n\r\n        console.log('loaded', key)\r\n        this.myState.statusMessage = 'Analyzing...'\r\n\r\n        // remove columns without names; we can't use them\r\n        const cleanTable: DataTable = {}\r\n        for (const key of Object.keys(dataTable)) {\r\n          if (key) cleanTable[key] = dataTable[key]\r\n        }\r\n\r\n        this.datasets = Object.assign({ ...this.datasets }, { [key]: cleanTable })\r\n        this.handleNewDataset({ key, dataTable: cleanTable })\r\n      } catch (e) {\r\n        this.$store.commit('error', 'Could not load ' + filename)\r\n        this.$emit('isLoaded')\r\n      }\r\n    },\r\n\r\n    handleNewDataColumn(value: { dataset: LookupDataset; column: string }) {\r\n      const { dataset, column } = value\r\n\r\n      // selector is attached to a dataset. Both color and width could be\r\n      // impacted, if they are attached to that dataset.\r\n\r\n      const config: any = {}\r\n\r\n      // WIDTHS\r\n      if (dataset.datasetKey === this.csvWidth.datasetKey) {\r\n        const width: LineWidthDefinition = { ...this.vizDetails.display.width }\r\n        width.columnName = column\r\n        config.width = width\r\n      }\r\n\r\n      // COLORS\r\n      if (dataset.datasetKey === this.csvData.datasetKey) {\r\n        const color: LineColorDefinition = { ...this.vizDetails.display.color }\r\n        color.columnName = column\r\n        config.color = color\r\n      }\r\n\r\n      this.changeConfiguration(config)\r\n    },\r\n  },\r\n  async mounted() {\r\n    this.$store.commit('setFullScreen', !this.thumbnail)\r\n\r\n    this.myState.thumbnail = this.thumbnail\r\n    this.myState.yamlConfig = this.yamlConfig ?? ''\r\n    this.myState.subfolder = this.subfolder\r\n\r\n    await this.getVizDetails()\r\n\r\n    // default width is 250, why not\r\n    this.scaleWidth = this.vizDetails.display?.width?.widthFactor || 250\r\n\r\n    if (this.thumbnail) {\r\n      this.buildThumbnail()\r\n      return\r\n    }\r\n\r\n    this.setupLogoMover()\r\n\r\n    // load network; when it is done it will call the loadCSVs afterwards.\r\n    this.loadNetwork()\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // MUST delete the React view handle to prevent gigantic memory leak!\r\n    delete REACT_VIEW_HANDLES[this.linkLayerId]\r\n\r\n    try {\r\n      for (const worker of this.dataLoaderWorkers) worker.terminate()\r\n    } catch (e) {}\r\n\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.link-volume-plot {\r\n  background: url('assets/thumbnail.jpg') no-repeat;\r\n  background-size: cover;\r\n  min-height: $thumbnailHeight;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n}\r\n\r\n.link-volume-plot.hide-thumbnail {\r\n  background: var(--bgMapPanel);\r\n}\r\n\r\n.plot-container {\r\n  display: grid;\r\n  grid-template-columns: auto 1fr;\r\n  grid-template-rows: 1fr auto auto;\r\n  pointer-events: none;\r\n  flex: 1;\r\n  position: relative;\r\n}\r\n\r\n.map-area {\r\n  pointer-events: auto;\r\n}\r\n\r\n.top-panel {\r\n  pointer-events: auto;\r\n  grid-column: 1 / 2;\r\n  grid-row: 1 / 2;\r\n  background-color: var(--bgPanel);\r\n  margin: 0 auto auto 0;\r\n  padding: 0.5rem 1.5rem 1rem 1.5rem;\r\n  z-index: 5;\r\n  box-shadow: 0px 2px 10px #22222244;\r\n}\r\n\r\n.bottom-panel {\r\n  grid-column: 1 / 3;\r\n  grid-row: 2 / 3;\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 0.8rem;\r\n  pointer-events: auto;\r\n  margin: auto 0.5rem 2px 7px;\r\n  filter: drop-shadow(0px 2px 4px #22222233);\r\n}\r\n\r\n.status-message {\r\n  margin: 0 0;\r\n  padding: 0.5rem 0.5rem;\r\n  color: var(--textFancy);\r\n  background-color: var(--bgPanel);\r\n  font-size: 1.2rem;\r\n  line-height: 1.5rem;\r\n}\r\n\r\n.right-side {\r\n  z-index: 1;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 0 0 auto 0;\r\n}\r\n\r\n.panel-items {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0.5rem 0.5rem;\r\n  margin-bottom: 5px;\r\n  width: 16rem;\r\n  background-color: var(--bgPanel);\r\n  border-radius: 3px;\r\n  overflow: visible;\r\n  // overflow-x: hidden;\r\n}\r\n\r\n.panel-item {\r\n  h3 {\r\n    line-height: 1.7rem;\r\n  }\r\n\r\n  p {\r\n    font-size: 0.9rem;\r\n  }\r\n}\r\n\r\ninput {\r\n  border: none;\r\n  background-color: var(--bgCream2);\r\n  color: var(--bgDark);\r\n}\r\n\r\n.toggle {\r\n  margin: 0.25rem 0.5rem 0.25rem 0;\r\n}\r\n\r\n#dropdown-menu-color-selector {\r\n  background-color: var(--bgBold);\r\n\r\n  p {\r\n    color: #888;\r\n  }\r\n}\r\n\r\n.panel-item {\r\n  margin-top: 0rem;\r\n}\r\n\r\n.config-section {\r\n  flex: 1;\r\n}\r\n\r\n.diff-section {\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-top: 0.7rem;\r\n\r\n  p {\r\n    margin: auto 0;\r\n  }\r\n}\r\n\r\n.filter-panel {\r\n  height: 6rem;\r\n  background-color: var(--bgPanel);\r\n  margin: 0rem auto 5px 0px;\r\n  border-radius: 3px;\r\n  // width: 100%;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n  .message-pane {\r\n    padding: 0.5rem 0.5rem;\r\n  }\r\n}\r\n</style>\r\n","import React, { useState, useMemo, useEffect } from 'react'\r\nimport DeckGL from '@deck.gl/react'\r\nimport { COORDINATE_SYSTEM } from '@deck.gl/core'\r\n\r\nimport { LineOffsetLayer, OFFSET_DIRECTION } from '@/layers/LineOffsetLayer'\r\n\r\nimport { scaleThreshold, scaleOrdinal } from 'd3-scale'\r\nimport { StaticMap } from 'react-map-gl'\r\nimport { rgb } from 'd3-color'\r\nimport { format } from 'mathjs'\r\n\r\nimport {\r\n  MAPBOX_TOKEN,\r\n  REACT_VIEW_HANDLES,\r\n  DataTableColumn,\r\n  LookupDataset,\r\n  DataType,\r\n} from '@/Globals'\r\nimport globalStore from '@/store'\r\n\r\nexport default function Component({\r\n  viewId = 0,\r\n  links = { source: new Float32Array(), dest: new Float32Array() },\r\n  colorRampType = -1, // -1 undefined, 0 categorical, 1 diffs, 2 sequential\r\n  build = {} as LookupDataset,\r\n  base = {} as LookupDataset,\r\n  widths = {} as LookupDataset,\r\n  widthsBase = {} as LookupDataset,\r\n  newColors = new Uint8Array(),\r\n  newWidths = new Float32Array(),\r\n  dark = false,\r\n  projection = '',\r\n  scaleWidth = 1,\r\n  mapIsIndependent = false,\r\n}) {\r\n  // ------- draw frame begins here -----------------------------\r\n\r\n  const widthDivisor = scaleWidth ? 1 / scaleWidth : 0\r\n\r\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\r\n\r\n  const buildColumn = build.dataTable[build.activeColumn]\r\n  const baseColumn = base.dataTable[base.activeColumn]\r\n  const widthColumn = widths.dataTable[widths.activeColumn]\r\n\r\n  const isCategorical = colorRampType === 0 || buildColumn?.type == DataType.STRING\r\n\r\n  // register setViewState in global view updater so we can respond to external map motion\r\n  REACT_VIEW_HANDLES[viewId] = (view: any) => {\r\n    if (view) {\r\n      setViewState(view)\r\n    } else {\r\n      setViewState(globalStore.state.viewState)\r\n    }\r\n  }\r\n\r\n  function handleClick() {\r\n    console.log('click!')\r\n  }\r\n\r\n  function handleViewState(view: any) {\r\n    setViewState(view)\r\n    view.center = [view.longitude, view.latitude]\r\n\r\n    if (!mapIsIndependent) globalStore.commit('setMapCamera', view)\r\n  }\r\n\r\n  function precise(x: number) {\r\n    return format(x, { lowerExp: -6, upperExp: 6, precision: 5 })\r\n  }\r\n\r\n  function buildTooltipHtml(\r\n    columnBuild: DataTableColumn,\r\n    columnBase: DataTableColumn,\r\n    geoOffset: number\r\n  ) {\r\n    try {\r\n      if (!columnBuild) return null\r\n\r\n      const index = build.csvRowFromLinkRow[geoOffset]\r\n      let value = columnBuild.values[index]\r\n\r\n      if (isCategorical) {\r\n        if (!Number.isFinite(value)) return null\r\n        return `<b>${columnBuild.name}</b><p>${precise(value)}</p>`\r\n      }\r\n\r\n      let html = null\r\n\r\n      if (Number.isFinite(value)) html = `<b>${columnBuild.name}</b><p>Value: ${precise(value)}</p>`\r\n\r\n      const baseIndex = base?.csvRowFromLinkRow[geoOffset]\r\n      if (baseIndex) {\r\n        let baseValue = base ? base.dataTable[columnBase.name].values[baseIndex] : null\r\n        let diff = value - baseValue\r\n        if (Number.isFinite(baseValue)) {\r\n          html += `<p>Base: ${precise(baseValue)}</p>`\r\n          html += `<p>+/- Base: ${precise(diff)}</p>`\r\n        }\r\n      }\r\n\r\n      return html\r\n    } catch (e) {\r\n      return null\r\n    }\r\n  }\r\n\r\n  function getTooltip({ object, index }: { object: any; index: number }) {\r\n    // tooltip will show values for color settings and for width settings.\r\n    // if there is base data, it will also show values and diff vs. base for both color and width.\r\n\r\n    try {\r\n      // tooltip color values ------------\r\n      let tooltip = buildTooltipHtml(buildColumn, baseColumn, index)\r\n\r\n      // tooltip widths------------\r\n      if (widthColumn && widthColumn.name !== buildColumn.name) {\r\n        const widthTip = buildTooltipHtml(\r\n          widthColumn,\r\n          widthsBase.dataTable[widthsBase.activeColumn],\r\n          index\r\n        )\r\n        if (widthTip) tooltip = tooltip ? tooltip + widthTip : widthTip\r\n      }\r\n\r\n      if (!tooltip) return null\r\n\r\n      return {\r\n        html: tooltip,\r\n        style: { color: dark ? '#ccc' : '#223', backgroundColor: dark ? '#2a3c4f' : 'white' },\r\n      }\r\n    } catch (e) {\r\n      console.warn(e)\r\n      return null\r\n    }\r\n  }\r\n\r\n  const coordinateSystem =\r\n    projection == 'Atlantis' ? COORDINATE_SYSTEM.METER_OFFSETS : COORDINATE_SYSTEM.DEFAULT\r\n\r\n  //@ts-ignore\r\n  const layer = new LineOffsetLayer({\r\n    id: 'linkLayer',\r\n    data: {\r\n      length: links.source.length / 2,\r\n      attributes: {\r\n        getSourcePosition: { value: links.source, size: 2 },\r\n        getTargetPosition: { value: links.dest, size: 2 },\r\n        getColor: { value: newColors, size: 4 },\r\n        getWidth: { value: newWidths, size: 1 },\r\n      },\r\n    },\r\n    widthUnits: 'pixels',\r\n    widthScale: widthDivisor,\r\n    widthMinPixels: 0.5,\r\n    widthMaxPixels: 50,\r\n    pickable: true,\r\n    coordinateSystem,\r\n    opacity: 1,\r\n    autoHighlight: true,\r\n    highlightColor: [255, 0, 224],\r\n    offsetDirection: OFFSET_DIRECTION.RIGHT,\r\n    updateTriggers: {\r\n      getSourcePosition: [links.source],\r\n      getTargetPosition: [links.dest],\r\n      getColor: [newColors, dark],\r\n      getWidth: [newWidths],\r\n    },\r\n    transitions: {\r\n      getColor: 250,\r\n      getWidth: 250,\r\n      widthScale: 250,\r\n    },\r\n    parameters: {\r\n      depthTest: false,\r\n    },\r\n  })\r\n\r\n  return (\r\n    /*\r\n    //@ts-ignore */\r\n    <DeckGL\r\n      layers={[layer]}\r\n      viewState={viewState}\r\n      controller={true}\r\n      pickingRadius={5}\r\n      getTooltip={getTooltip}\r\n      getCursor={({ isDragging, isHovering }: any) =>\r\n        isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab'\r\n      }\r\n      onClick={handleClick}\r\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\r\n    >\r\n      {\r\n        /*\r\n        // @ts-ignore */\r\n        <StaticMap mapStyle={globalStore.getters.mapStyle} mapboxApiAccessToken={MAPBOX_TOKEN} />\r\n      }\r\n    </DeckGL>\r\n  )\r\n}\r\n","function shallowEqualObjects(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (!objA || !objB) {\n    return false;\n  }\n\n  var aKeys = Object.keys(objA);\n  var bKeys = Object.keys(objB);\n  var len = aKeys.length;\n\n  if (bKeys.length !== len) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    var key = aKeys[i];\n\n    if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction shallowEqualArrays(arrA, arrB) {\n  if (arrA === arrB) {\n    return true;\n  }\n\n  if (!arrA || !arrB) {\n    return false;\n  }\n\n  var len = arrA.length;\n\n  if (arrB.length !== len) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (arrA[i] !== arrB[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport { shallowEqualArrays, shallowEqualObjects };\n","\r\n.link-volume-plot(:class=\"{'hide-thumbnail': !thumbnail}\"\r\n        :style='{\"background\": urlThumbnail}'\r\n        oncontextmenu=\"return false\")\r\n\r\n  .plot-container(v-if=\"!thumbnail\" :id=\"`container-${linkLayerId}`\")\r\n    link-gl-layer.map-area(\r\n        :viewId=\"linkLayerId\"\r\n        :links=\"geojsonData\"\r\n        :colorRampType=\"colorRampType\"\r\n        :build=\"csvData\"\r\n        :base=\"csvBase\"\r\n        :widths=\"csvWidth\"\r\n        :widthsBase=\"csvWidthBase\"\r\n        :dark=\"isDarkMode\"\r\n        :newColors=\"colorArray\"\r\n        :newWidths=\"widthArray\"\r\n        :scaleWidth=\"scaleWidth\"\r\n        :projection=\"vizDetails.projection\"\r\n        :mapIsIndependent=\"vizDetails.mapIsIndependent\"\r\n    )\r\n\r\n    zoom-buttons(v-if=\"!thumbnail\")\r\n    //- drawing-tool(v-if=\"!thumbnail\")\r\n\r\n    //- color/width/etc panel\r\n    viz-configurator(v-if=\"!thumbnail && isDataLoaded\"\r\n      :vizDetails=\"vizDetails\"\r\n      :datasets=\"datasets\"\r\n      :fileSystem=\"fileSystem\"\r\n      :subfolder=\"myState.subfolder\"\r\n      :yamlConfig=\"yamlConfig\"\r\n      :legendStore=\"legendStore\"\r\n      :filterDefinitions=\"currentUIFilterDefinitions\"\r\n      @update=\"changeConfiguration\")\r\n\r\n    //- .top-panel(v-if=\"vizDetails.title\")\r\n    //-   .panel-item\r\n    //-     h3 {{ vizDetails.title }}\r\n    //-     p {{ vizDetails.description }}\r\n\r\n    .bottom-panel(v-if=\"!thumbnail\")\r\n      .status-message(v-if=\"myState.statusMessage\")\r\n        p {{ myState.statusMessage }}\r\n\r\n      .panel-items(v-show=\"csvWidth.activeColumn\")\r\n\r\n        //- slider/dropdown for selecting column\r\n        .panel-item.config-section\r\n          selector-panel(\r\n            :vizDetails=\"vizDetails\"\r\n            :csvData=\"csvWidth\"\r\n            :scaleWidth=\"scaleWidth\"\r\n            :showDiffs=\"vizDetails.showDifferences\"\r\n            @column=\"handleNewDataColumn\"\r\n            @slider=\"handleNewDataColumn\"\r\n          )\r\n\r\n        //- DIFF checkbox\r\n        .panel-item.diff-section(v-if=\"vizDetails.datasets.csvBase\")\r\n          toggle-button.toggle(:width=\"40\" :value=\"vizDetails.showDifferences\" :sync=\"true\" :labels=\"false\"\r\n            :color=\"{checked: '#4b7cc4', unchecked: '#222'}\"\r\n            @change=\"toggleShowDiffs\")\r\n          p: b {{ $t('showDiffs') }}\r\n\r\n        //- FilterPanel.filter-panel(v-if=\"vizDetails.useSlider\"\r\n        //-   :props=\"csvWidth\"\r\n        //-   @activeColumns=\"handleNewFilter\"\r\n        //- )\r\n\r\n"],"names":["__vue2_script$1","defineComponent","name","components","VueSlider","props","useRange","Boolean","stops","type","Array","required","dropdownValue","String","data","sliderValue","timeSlider","adsorb","contained","height","piecewise","show","marks","minRange","processStyle","backgroundColor","borderColor","sliderStyle","watch","value","this","useIt","length","console","log","result","$emit","mounted","Math","floor","_vm","_h","$createElement","_c","_self","staticClass","_b","model","callback","$$v","expression","__vue2_script","i18n","messages","en","selectColumn","loading","bandwidths","timeOfDay","colors","de","TimeSlider","csvData","Object","scaleWidth","Number","showDiffs","vizDetails","isButtonActive","isColorButtonActive","scaleWidthValue","debounceScale","handleTimeSliderChanged","computed","activeColumn","buttonTitle","$i18n","t","isNaN","parseFloat","methods","getColumns","values","dataTable","slice","filter","f","DataType","LOOKUP","map","gotNewScale","changeTimeSlider","dataset","column","handleClickDropdown","handleColorRamp","clearDropdown","handleSelectColumn","debounce","useSlider","_v","_s","attrs","on","change","_e","$t","class","click","_m","style","border","id","role","_l","$event","MyComponent","all","SelectorPanel","DrawingTool","LinkGlLayer","viewId","links","source","Float32Array","dest","colorRampType","build","base","widths","widthsBase","newColors","Uint8Array","newWidths","dark","projection","mapIsIndependent","widthDivisor","viewState","setViewState","useState","exports","globalStore","state","buildColumn","baseColumn","widthColumn","isCategorical","STRING","precise","x","format","lowerExp","upperExp","precision","columnBuild","columnBase","geoOffset","index","csvRowFromLinkRow","isFinite","html","baseIndex","baseValue","diff","e","REACT_VIEW_HANDLES","view","coordinateSystem","COORDINATE_SYSTEM","METER_OFFSETS","DEFAULT","layer","LineOffsetLayer","attributes","getSourcePosition","size","getTargetPosition","getColor","getWidth","widthUnits","widthScale","widthMinPixels","widthMaxPixels","pickable","opacity","autoHighlight","highlightColor","offsetDirection","OFFSET_DIRECTION","RIGHT","updateTriggers","transitions","parameters","depthTest","DeckGL","layers","controller","pickingRadius","getTooltip","object","tooltip","buildTooltipHtml","widthTip","color","warn","getCursor","isDragging","isHovering","onClick","onViewStateChange","handleViewState","center","longitude","latitude","commit","StaticMap","mapStyle","getters","mapboxApiAccessToken","MAPBOX_TOKEN","ToggleButton","VizConfigurator","ZoomButtons","root","subfolder","yamlConfig","config","thumbnail","datamanager","standaloneYAMLconfig","title","description","csvFile","csvBase","datasets","showDifferences","shpFile","dbfFile","network","geojsonFile","zoom","widthFactor","sum","nodes","display","width","YAMLrequirementsLinks","currentUIFilterDefinitions","isButtonActiveColumn","linkLayerId","random","numLinks","showTimeRange","legendStore","LegendStore","geojsonData","linkIds","fixedColors","myState","statusMessage","datasetKey","csvWidth","csvWidthBase","isDarkMode","$store","colorScheme","ColorScheme","DarkMode","isDataLoaded","thumbnailUrl","currentWidthDefinition","columnName","myDataManager","DashboardDataManager","resizer","dataLoaderWorkers","csvRowLookupFromLinkRow","colorArray","widthArray","fileApi","HTTPFileSystem","fileSystem","svnProject","svnProjects","a","slug","Error","urlThumbnail","rampType","_a","colorRamp","setTimeout","generateWidthArray","generateColorArray","setDataIsLoaded","getVizDetails","filename","emptyState","validateYAML","assign","endsWith","loadStandaloneYamlConfig","test","indexOf","text","getFileText","YAML","parse","setVizDetails","err","error","needPassword","status","configuration","RegExp","key","Status","ERROR","msg","desc","WARNING","buildThumbnail","blob","getFileBlob","buffer","readBlob","arraybuffer","base64","arrayBufferToBase64","toggleShowDiffs","changeConfiguration","handleNewColor","handleNewWidth","handleNewDataset","handleNewFilter","columns","objA","objB","aKeys","keys","bKeys","len","i","prototype","hasOwnProperty","call","shallowEqualObjects","scaleFactor","recalculate","selectedDataset","setMapCenterFromVizDetails","split","bearing","pitch","jump","setMapCenter","samples","webMercator","firstPoint","Coords","toLngLat","gap","setupLogoMover","ResizeObserver","moveLogo","deckmap","document","getElementById","observe","logo","querySelector","right","clientWidth","updateStatus","message","loadNetwork","getRoadNetwork","MAP_STYLES_OFFLINE","loadCSVFiles","linkIdColumn","tempMapLinkIdToCsvRow","csvRow","getCsvRowNumberFromLinkRowNumber","linkRow","__spreadValues","handleDatasetisLoaded","widthValues","baseValues","_d","baseRow","abs","colorsAsRGB","hexcolor","c","rgb","r","g","b","domain","fill","v","pow","buildData","baseData","setColorBasedOnValue","scaleOrdinal","range","scaleThreshold","colorPaleGrey","colorInvisible","ratio","max","set","datasetsToLoad","entries","loadOneCSVFile","showSimpleNetworkWithNoDatasets","_LINK_OFFSET_","lookup","normalize","datasetId","datasetKeys","firstColumnName","DATASETS","getDataset","allRows","cleanTable","key2","handleNewDataColumn","beforeDestroy","worker","terminate","background","oncontextmenu","filterDefinitions","update","directives","rawName","slider","sync","labels","checked","unchecked"],"mappings":"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"}