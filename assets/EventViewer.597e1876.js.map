{"version":3,"file":"EventViewer.597e1876.js","sources":["../../src/plugins/event-viewer/EventDeckMap.tsx","../../src/plugins/event-viewer/EventViewer.vue","../../src/plugins/event-viewer/EventViewer.vue?vue&type=template&lang.js"],"sourcesContent":["import React, { useState, useMemo, useEffect } from 'react'\r\nimport DeckGL from '@deck.gl/react'\r\nimport { StaticMap } from 'react-map-gl'\r\nimport { ScatterplotLayer } from '@deck.gl/layers'\r\nimport { DataFilterExtension } from '@deck.gl/extensions'\r\nimport * as timeConvert from 'convert-seconds'\r\n\r\nimport { REACT_VIEW_HANDLES, MAPBOX_TOKEN } from '@/Globals'\r\nimport ScatterplotColorBinsLayer from '@/plugins/xy-time/ScatterplotColorBinsLayer'\r\nimport MovingIconsLayer from '@/layers/moving-icons/moving-icons-vehicles-layer'\r\nimport globalStore from '@/store'\r\nimport { NetworkLinks } from '@/js/DashboardDataManager'\r\n\r\nconst BASE_URL = import.meta.env.BASE_URL\r\n\r\nconst ICON_MAPPING = {\r\n  marker: { x: 0, y: 0, width: 128, height: 128, mask: true },\r\n  info: { x: 128, y: 0, width: 128, height: 128, mask: true },\r\n  vehicle: { x: 128, y: 128, width: 128, height: 128, mask: true },\r\n  diamond: { x: 0, y: 128, width: 128, height: 128, mask: false },\r\n}\r\n\r\nconst dataFilter = new DataFilterExtension({ filterSize: 1 })\r\n\r\nfunction convertSecondsToClockTimeMinutes(index: number) {\r\n  const seconds = index\r\n\r\n  try {\r\n    const hms = timeConvert(seconds)\r\n    const minutes = ('00' + hms.minutes).slice(-2)\r\n    return `${hms.hours}:${minutes}`\r\n  } catch (e) {\r\n    return '00:00'\r\n  }\r\n}\r\n\r\nconst INITIAL_VIEW = {\r\n  pitch: 0,\r\n  zoom: 8,\r\n  bearing: 0,\r\n  longitude: 14,\r\n  latitude: 52.0,\r\n  // longitude: 14.38,\r\n  // latitude: 51.7,\r\n}\r\n\r\n// -------------------------------------------------------------------\r\nexport default function Component({\r\n  viewId = 0,\r\n  eventLayers = [] as any[],\r\n  network = {} as NetworkLinks,\r\n  linkIdLookup = {} as any,\r\n  timeFilter = [] as number[],\r\n  dark = false,\r\n  colors = [\r\n    [1, 0, 0],\r\n    [0.25, 0.25, 1],\r\n  ] as number[][],\r\n  breakpoints = [0.0] as number[],\r\n  radius = 5,\r\n  mapIsIndependent = false,\r\n  simulationTime = 20000,\r\n}) {\r\n  // manage SimWrapper centralized viewState - for linked maps\r\n  const [viewState, setViewState] = useState(INITIAL_VIEW)\r\n\r\n  REACT_VIEW_HANDLES[viewId] = () => {\r\n    setViewState(globalStore.state.viewState)\r\n  }\r\n\r\n  function handleViewState(view: any) {\r\n    if (!view.latitude) return\r\n\r\n    if (!view.center) view.center = [0, 0]\r\n    view.center[0] = view.longitude\r\n    view.center[1] = view.latitude\r\n    setViewState(view)\r\n\r\n    if (!mapIsIndependent) globalStore.commit('setMapCamera', view)\r\n  }\r\n\r\n  function getTooltip(element: any) {\r\n    // console.log(element)\r\n    if (element.index < 0) return null\r\n\r\n    return 'hi'\r\n\r\n    // const layerId = element?.layer?.id\r\n    // if (layerId === undefined) return null\r\n\r\n    // const time = pointLayers[layerId].time[element.index]\r\n    // const humanTime = convertSecondsToClockTimeMinutes(time)\r\n\r\n    // const value = pointLayers[layerId].value[element.index]\r\n    // const cleanValue = Math.round(1e6 * value) / 1e6\r\n    // return {\r\n    //   html: `\\\r\n    //     <table style=\"font-size: 0.9rem\">\r\n    //     <tr>\r\n    //       <td>Value</td>\r\n    //       <td style=\"padding-left: 0.5rem;\"><b>${cleanValue}</b></td>\r\n    //     </tr><tr>\r\n    //       <td style=\"text-align: right;\">Time</td>\r\n    //       <td style=\"padding-left: 0.5rem;\"><b>${humanTime}</b></td>\r\n    //     </tr>\r\n    //     </table>\r\n    //   `,\r\n    //   style: dark\r\n    //     ? { color: '#ccc', backgroundColor: '#2a3c4f' }\r\n    //     : { color: '#223', backgroundColor: 'white' },\r\n    // }\r\n  }\r\n\r\n  // add a scatterplotlayer for each set of points in eventLayers\r\n  const pointLayers = eventLayers.map((layer, layerIndex) => {\r\n    // The entire layer can be hidden if all of its points\r\n    // are beyond the timeFilter range that is being shown.\r\n    const outOfRange =\r\n      layer.times[0] > timeFilter[1] || layer.times[layer.times.length - 1] < timeFilter[0]\r\n\r\n    return new ScatterplotLayer({\r\n      data: {\r\n        length: layer.times.length,\r\n        attributes: {\r\n          getFilterValue: { value: layer.times, size: 1 },\r\n          getPosition: { value: layer.positions, size: 2 },\r\n        },\r\n      },\r\n      autoHighlight: true,\r\n      breakpoints: breakpoints,\r\n      colors: colors,\r\n      extensions: [dataFilter],\r\n      id: 'hello' + layerIndex,\r\n      filled: true,\r\n      filterRange: timeFilter.length ? timeFilter : null,\r\n      getRadius: 20,\r\n      getFillColor: [240, 128, 10],\r\n      highlightColor: [255, 0, 224],\r\n      opacity: 1,\r\n      parameters: { depthTest: false },\r\n      pickable: true,\r\n      radiusScale: 1,\r\n      stroked: false,\r\n      updateTriggers: {\r\n        getPosition: eventLayers,\r\n        //   // getFillColor: pointLayers,\r\n        getFilterValue: timeFilter,\r\n      },\r\n      // transitions: {\r\n      //   getFillColor: 500,\r\n      //   getColor: 500,\r\n      //   getValue: 500,\r\n      //   getFilterValue: 500,\r\n      // },\r\n      // hide layers that are entirely outside the time window filter:\r\n      visible: !outOfRange,\r\n    })\r\n  })\r\n\r\n  // add the vehicle motion layer in each eventLayer\r\n  const vehicleLayers = eventLayers.map((layer, layerIndex) => {\r\n    // The entire layer can be hidden if all of its points\r\n    // are beyond the timeFilter range that is being shown.\r\n    const outOfRange =\r\n      layer.vehicles.t0[0] > timeFilter[1] ||\r\n      layer.vehicles.t1[layer.vehicles.t1.length - 1] < timeFilter[0]\r\n\r\n    // console.log(outOfRange)\r\n    //@ts-ignore\r\n    return new MovingIconsLayer({\r\n      data: {\r\n        length: layer.vehicles.t0.length,\r\n        attributes: {\r\n          getTimeStart: { value: layer.vehicles.t0, size: 1 },\r\n          getTimeEnd: { value: layer.vehicles.t1, size: 1 },\r\n          getPathStart: { value: layer.vehicles.locO, size: 2 },\r\n          getPathEnd: { value: layer.vehicles.locD, size: 2 },\r\n        },\r\n      },\r\n      id: 'vehicles' + layerIndex,\r\n      // getIcon: (d: any) => 'vehicle',\r\n      getColor: [64, 96, 255], // (d: any) => props.colors[d.occ],\r\n      iconMoving: 'vehicle',\r\n      iconStill: 'diamond',\r\n      getSize: 20, // searchEnabled ? 56 : 44,\r\n      opacity: 1.0,\r\n      currentTime: simulationTime,\r\n      shadowEnabled: true,\r\n      iconAtlas: BASE_URL + '/images/icon-atlas.png',\r\n      iconMapping: ICON_MAPPING,\r\n      sizeScale: 1,\r\n      billboard: false,\r\n      pickable: true,\r\n      depthTest: true,\r\n      autoHighlight: false,\r\n      highlightColor: [255, 0, 255],\r\n      // onHover: setHoverInfo,\r\n      parameters: {\r\n        depthTest: false,\r\n      },\r\n      visible: !outOfRange,\r\n    })\r\n  })\r\n\r\n  const allLayers = [...pointLayers, ...vehicleLayers]\r\n\r\n  // initialViewState={initialViewState}\r\n  return (\r\n    <DeckGL\r\n      layers={allLayers}\r\n      controller={true}\r\n      useDevicePixels={true}\r\n      viewState={viewState}\r\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\r\n      pickingRadius={4}\r\n      onClick={getTooltip}\r\n      getTooltip={getTooltip}\r\n    >\r\n      {\r\n        /*\r\n        // @ts-ignore */\r\n        <StaticMap\r\n          mapStyle={globalStore.getters.mapStyle}\r\n          preventStyleDiffing={true}\r\n          mapboxApiAccessToken={MAPBOX_TOKEN}\r\n        />\r\n      }\r\n    </DeckGL>\r\n  )\r\n}\r\n","<template lang=\"pug\">\r\n.viz-plugin(oncontextmenu=\"return false\" :id=\"`id-${viewId}`\")\r\n\r\n  event-map.map-layer(v-if=\"!thumbnail && isLoaded\"\r\n    :viewId=\"viewId\"\r\n    :eventLayers=\"eventLayers\"\r\n    :network=\"network\"\r\n    :linkIdLookup=\"linkIdLookup\"\r\n    :timeFilter=\"timeFilter\"\r\n    :dark=\"this.$store.state.isDarkMode\"\r\n    :colors=\"this.colors\"\r\n    :breakpoints=\"this.breakpoints\"\r\n    :radius=\"this.guiConfig.radius\"\r\n    :mapIsIndependent=\"false\"\r\n    :simulationTime=\"timeFilter[1]\"\r\n  )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\" corner=\"bottom\")\r\n\r\n  .top-right\r\n    .gui-config(:id=\"configId\")\r\n\r\n  .bottom-right\r\n    .legend-area(v-if=\"legendStore\")\r\n      legend-box(:legendStore=\"legendStore\")\r\n\r\n  time-slider.time-slider-area(v-if=\"isLoaded\"\r\n    :range=\"timeRange\"\r\n    :activeTimeExtent=\"timeFilter\"\r\n    :labels=\"timeLabels\"\r\n    :isAnimating=\"isAnimating\"\r\n    @timeExtent=\"handleTimeSliderValues\"\r\n    @toggleAnimation=\"toggleAnimation\"\r\n    @drag=\"isAnimating=false\"\r\n  )\r\n\r\n  .message(v-if=\"!thumbnail && myState.statusMessage\")\r\n    p.status-message {{ myState.statusMessage }}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {\r\n      loading: 'Loading data...',\r\n      sorting: 'Sorting into bins...',\r\n      aggregate: 'Summary',\r\n      maxHeight: '3D Height',\r\n      showDetails: 'Show Details',\r\n      selection: 'Selection',\r\n      areas: 'Areas',\r\n      count: 'Count',\r\n      promptCRS: `Enter the coordinate reference system, e.g. EPSG:25832\\n\\nThese coordinates are not in long/lat format. To fix this permanently, convert them to long/lat or add \"# EPSG:xxxx\" to your CSV header`,\r\n    },\r\n    de: {\r\n      loading: 'Dateien laden...',\r\n      sorting: 'Sortieren...',\r\n      aggregate: 'Daten',\r\n      maxHeight: '3-D Höhe',\r\n      showDetails: 'Details anzeigen',\r\n      selection: 'Ausgewählt',\r\n      areas: 'Orte',\r\n      count: 'Anzahl',\r\n    },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport GUI from 'lil-gui'\r\nimport YAML from 'yaml'\r\nimport colormap from 'colormap'\r\n\r\nimport util from '@/js/util'\r\nimport globalStore from '@/store'\r\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\r\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport LegendBox from '@/components/viz-configurator/LegendBox.vue'\r\nimport LegendStore from '@/js/LegendStore'\r\nimport TimeSlider from '@/components/TimeSlider.vue'\r\nimport EventMap from './EventDeckMap'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\n\r\nimport MATSimEventStreamer from '@/workers/MATSimEventStreamer.worker.ts?worker'\r\n\r\nimport {\r\n  ColorScheme,\r\n  FileSystem,\r\n  LegendItem,\r\n  LegendItemType,\r\n  FileSystemConfig,\r\n  VisualizationPlugin,\r\n  Status,\r\n  REACT_VIEW_HANDLES,\r\n} from '@/Globals'\r\nimport DashboardDataManager, { NetworkLinks } from '@/js/DashboardDataManager'\r\n\r\ninterface VizDetail {\r\n  title: string\r\n  description?: string\r\n  file: string\r\n  projection: any\r\n  thumbnail?: string\r\n  center: any\r\n  zoom: number\r\n}\r\n\r\ninterface PointLayer {\r\n  color: Uint8Array\r\n  value: Float32Array\r\n  coordinates: Float32Array\r\n  time: Float32Array\r\n  timeRange: number[]\r\n}\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'EventViewerPlugin',\r\n  i18n,\r\n  components: {\r\n    CollapsiblePanel,\r\n    DrawingTool,\r\n    EventMap,\r\n    LegendBox,\r\n    TimeSlider,\r\n    ZoomButtons,\r\n  },\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    yamlConfig: String,\r\n    config: Object as any,\r\n    thumbnail: Boolean,\r\n    datamanager: { type: Object as PropType<DashboardDataManager> },\r\n  },\r\n  data: () => {\r\n    const colorRamps = ['bathymetry', 'electric', 'inferno', 'jet', 'magma', 'par', 'viridis']\r\n\r\n    return {\r\n      myDataManager: null as DashboardDataManager | null,\r\n      network: {\r\n        source: new Float32Array(),\r\n        dest: new Float32Array(),\r\n        linkIds: [],\r\n      } as NetworkLinks,\r\n      linkIdLookup: {} as any,\r\n      guiConfig: {\r\n        buckets: 7,\r\n        exponent: 4,\r\n        radius: 5,\r\n        'clip max': 100,\r\n        'color ramp': 'viridis',\r\n        flip: false,\r\n        colorRamps: colorRamps,\r\n      },\r\n      viewId: ('xyt-id-' + Math.floor(1e12 * Math.random())) as any,\r\n      configId: ('gui-config-' + Math.floor(1e12 * Math.random())) as any,\r\n      timeLabels: [0, 1] as any[],\r\n      startTime: 0,\r\n      isAnimating: false,\r\n      timeFilter: [0, 3599],\r\n      colors: [\r\n        [128, 128, 128],\r\n        [128, 128, 128],\r\n      ] as number[][],\r\n      breakpoints: [0],\r\n      range: [Infinity, -Infinity],\r\n      timeRange: [Infinity, -Infinity],\r\n      legendStore: null as LegendStore | null,\r\n      standaloneYAMLconfig: {\r\n        title: '',\r\n        description: '',\r\n        file: '',\r\n        projection: '',\r\n        thumbnail: '',\r\n        radius: 250,\r\n        maxHeight: 0,\r\n        center: null as any,\r\n        zoom: 9,\r\n      } as any,\r\n      YAMLrequirementsXY: { file: '' },\r\n      columnLookup: [] as number[],\r\n      gzipWorker: null as Worker | null,\r\n      vizDetails: {\r\n        title: '',\r\n        description: '',\r\n        file: '',\r\n        projection: '',\r\n        thumbnail: '',\r\n        center: null as any,\r\n        zoom: 9,\r\n      } as VizDetail,\r\n      myState: {\r\n        statusMessage: '',\r\n        subfolder: '',\r\n        yamlConfig: '',\r\n        thumbnail: false,\r\n      },\r\n      eventLayers: [] as any[],\r\n      isLoaded: false,\r\n      animator: null as any,\r\n      guiController: null as GUI | null,\r\n      resizer: null as ResizeObserver | null,\r\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\r\n      ANIMATE_SPEED: 0.25,\r\n      animationElapsedTime: 0,\r\n      animationClockTime: 0,\r\n    }\r\n  },\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n    urlThumbnail(): any {\r\n      return this.thumbnailUrl\r\n    },\r\n  },\r\n  watch: {\r\n    '$store.state.viewState'() {\r\n      if (REACT_VIEW_HANDLES[this.viewId]) REACT_VIEW_HANDLES[this.viewId]()\r\n    },\r\n  },\r\n  methods: {\r\n    handleTimeSliderValues(timeValues: any[]) {\r\n      this.animationElapsedTime = timeValues[0]\r\n      this.timeFilter = timeValues\r\n      this.timeLabels = [\r\n        this.convertSecondsToClockTimeMinutes(timeValues[0]),\r\n        this.convertSecondsToClockTimeMinutes(timeValues[1]),\r\n      ]\r\n    },\r\n\r\n    setupLogoMover() {\r\n      this.resizer = new ResizeObserver(this.moveLogo)\r\n      const deckmap = document.getElementById(`id-${this.viewId}`) as HTMLElement\r\n      this.resizer.observe(deckmap)\r\n    },\r\n\r\n    moveLogo() {\r\n      const deckmap = document.getElementById(`${this.viewId}`) as HTMLElement\r\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\r\n      if (logo) {\r\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\r\n        logo.style.right = right\r\n      }\r\n    },\r\n\r\n    setupGui() {\r\n      this.guiController = new GUI({\r\n        title: 'Color Settings',\r\n        injectStyles: true,\r\n        width: 200,\r\n        container: document.getElementById(this.configId) || undefined,\r\n      })\r\n\r\n      const colors = this.guiController // .addFolder('Colors')\r\n      colors.add(this.guiConfig, 'buckets', 2, 19, 1).onChange(this.setColors)\r\n      colors.add(this.guiConfig, 'exponent', 1, 10, 1).onChange(this.setColors)\r\n      colors.add(this.guiConfig, 'clip max', 0, 100, 1).onChange(this.setColors)\r\n      colors.add(this.guiConfig, 'radius', 1, 20, 1)\r\n      colors.add(this.guiConfig, 'color ramp', this.guiConfig.colorRamps).onChange(this.setColors)\r\n      colors.add(this.guiConfig, 'flip').onChange(this.setColors)\r\n\r\n      // const times = this.guiController.addFolder('Time')\r\n    },\r\n\r\n    async solveProjection() {\r\n      if (this.thumbnail) return\r\n\r\n      console.log('WHAT PROJECTION:')\r\n\r\n      try {\r\n        const text = await this.fileApi.getFileText(\r\n          this.myState.subfolder + '/' + this.myState.yamlConfig\r\n        )\r\n        this.vizDetails = YAML.parse(text)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    },\r\n\r\n    async getVizDetails() {\r\n      if (this.config) {\r\n        this.validateYAML()\r\n        this.vizDetails = Object.assign({}, this.config)\r\n        return\r\n      }\r\n\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n\r\n      if (hasYaml) {\r\n        await this.loadStandaloneYAMLConfig()\r\n      } else {\r\n        // console.log('NO YAML WTF')\r\n        this.setConfigForRawCSV()\r\n      }\r\n    },\r\n\r\n    setConfigForRawCSV() {\r\n      let projection = 'EPSG:4326' // Include \"# EPSG:xxx\" in header of CSV to set EPSG\r\n\r\n      // output_trips:\r\n      this.vizDetails = {\r\n        title: 'EVENTS: ' + this.myState.yamlConfig,\r\n        description: this.myState.yamlConfig,\r\n        file: this.myState.yamlConfig,\r\n        projection,\r\n        center: this.vizDetails.center,\r\n        zoom: this.vizDetails.zoom,\r\n      }\r\n      this.$emit('title', this.vizDetails.title || this.vizDetails.file)\r\n      return\r\n    },\r\n\r\n    async loadStandaloneYAMLConfig() {\r\n      if (!this.fileApi) return\r\n      try {\r\n        // might be a project config:\r\n        const filename =\r\n          this.myState.yamlConfig.indexOf('/') > -1\r\n            ? this.myState.yamlConfig\r\n            : this.myState.subfolder + '/' + this.myState.yamlConfig\r\n\r\n        const text = await this.fileApi.getFileText(filename)\r\n        this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\r\n        this.validateYAML()\r\n        this.setVizDetails()\r\n      } catch (err) {\r\n        const e = err as any\r\n        console.log('failed')\r\n\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg: `File not found`,\r\n          desc: `Could not find: ${this.myState.subfolder}/${this.myState.yamlConfig}`,\r\n        })\r\n      }\r\n    },\r\n\r\n    validateYAML() {\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n      let configuration\r\n\r\n      if (hasYaml) {\r\n        console.log('has yaml')\r\n        configuration = this.standaloneYAMLconfig\r\n      } else {\r\n        console.log('no yaml')\r\n        configuration = this.config\r\n      }\r\n\r\n      for (const key in this.YAMLrequirementsXY) {\r\n        if (key in configuration === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n\r\n      if (configuration.radius == 0) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Radius set to zero`,\r\n          desc: 'Radius can not be zero, preset value used instead. ',\r\n        })\r\n      }\r\n\r\n      if (configuration.zoom < 5 || configuration.zoom > 20) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Zoom is out of the recommended range `,\r\n          desc: 'Zoom levels should be between 5 and 20. ',\r\n        })\r\n      }\r\n    },\r\n\r\n    setVizDetails() {\r\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\r\n\r\n      const t = this.vizDetails.title ? this.vizDetails.title : 'EVENTS: ' + this.vizDetails.file\r\n      this.$emit('title', t)\r\n    },\r\n    async buildThumbnail() {\r\n      if (this.thumbnail && this.vizDetails.thumbnail) {\r\n        try {\r\n          const blob = await this.fileApi.getFileBlob(\r\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\r\n          )\r\n          const buffer = await blob.arrayBuffer()\r\n          const base64 = util.arrayBufferToBase64(buffer)\r\n          if (base64)\r\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      }\r\n    },\r\n\r\n    async streamEventFile(filename: string) {\r\n      this.myState.statusMessage = 'Loading file...'\r\n      let totalRows = 0\r\n      this.range = [Infinity, -Infinity]\r\n      this.timeRange = [Infinity, -Infinity]\r\n      this.animationElapsedTime = 0\r\n      this.timeFilter = [0, 59]\r\n\r\n      // get the raw unzipped arraybuffer\r\n      if (this.gzipWorker) this.gzipWorker.terminate()\r\n      this.eventLayers = []\r\n      this.gzipWorker = new MATSimEventStreamer()\r\n\r\n      const formatter = Intl.NumberFormat()\r\n\r\n      this.gzipWorker.onmessage = async (event: MessageEvent) => {\r\n        const message = event.data\r\n        if (message.status) {\r\n          this.myState.statusMessage = message.status\r\n        } else if (message.error) {\r\n          this.myState.statusMessage = message.error\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `XYT Loading Error`,\r\n            desc: `Error loading: ${this.myState.subfolder}/${this.vizDetails.file}`,\r\n          })\r\n        } else if (message.finished) {\r\n          this.finishedLoadingData(totalRows, message)\r\n        } else {\r\n          const events = message.events as any[]\r\n\r\n          console.log(events.length)\r\n\r\n          totalRows += events.length\r\n          this.myState.statusMessage = 'Loading ' + formatter.format(totalRows) + ' events'\r\n\r\n          // minmax all events\r\n          this.timeRange = [\r\n            Math.min(this.timeRange[0], events[0].time),\r\n            Math.max(this.timeRange[1], events[events.length - 1].time),\r\n          ]\r\n\r\n          // minmax vehicle trips specifically\r\n          this.timeRange = [\r\n            Math.min(this.timeRange[0], message.vehicleTrips[0].t0),\r\n            Math.max(this.timeRange[1], message.vehicleTrips[message.vehicleTrips.length - 1].t1),\r\n          ]\r\n\r\n          // .filter(row => row.link)\r\n          const linkEvents = events.map(row => {\r\n            return {\r\n              time: row.time,\r\n              link: row.link,\r\n            } as any\r\n          })\r\n\r\n          // POSITIONS ----\r\n          const positions = new Float32Array(2 * linkEvents.length).fill(NaN)\r\n          for (let i = 0; i < linkEvents.length; i++) {\r\n            const offset = 2 * this.linkIdLookup[linkEvents[i].link]\r\n            positions[i * 2] = this.network.source[offset]\r\n            positions[i * 2 + 1] = this.network.source[offset + 1]\r\n          }\r\n\r\n          // VEHICLES -----------\r\n          const numTrips = message.vehicleTrips.length\r\n          const tripData = {\r\n            locO: new Float32Array(2 * numTrips).fill(NaN),\r\n            locD: new Float32Array(2 * numTrips).fill(NaN),\r\n            t0: new Float32Array(numTrips).fill(NaN),\r\n            t1: new Float32Array(numTrips).fill(NaN),\r\n          }\r\n\r\n          for (let i = 0; i < numTrips; i++) {\r\n            const trip = message.vehicleTrips[i]\r\n            const offset = 2 * this.linkIdLookup[trip.link]\r\n            tripData.locO[i * 2 + 0] = this.network.source[0 + offset]\r\n            tripData.locO[i * 2 + 1] = this.network.source[1 + offset]\r\n            tripData.locD[i * 2 + 0] = this.network.dest[0 + offset]\r\n            tripData.locD[i * 2 + 1] = this.network.dest[1 + offset]\r\n            // enter/leave traffic happen in the middle of the link\r\n            if (i == 0) {\r\n              tripData.locO[i * 2 + 0] = 0.5 * (tripData.locO[i * 2 + 0] + tripData.locD[i * 2 + 0])\r\n              tripData.locO[i * 2 + 1] = 0.5 * (tripData.locO[i * 2 + 1] + tripData.locD[i * 2 + 1])\r\n            } else if (i == numTrips - 1) {\r\n              tripData.locD[i * 2 + 0] = 0.5 * (tripData.locO[i * 2 + 0] + tripData.locD[i * 2 + 0])\r\n              tripData.locD[i * 2 + 1] = 0.5 * (tripData.locO[i * 2 + 1] + tripData.locD[i * 2 + 1])\r\n            }\r\n            tripData.t0[i] = trip.t0\r\n            tripData.t1[i] = trip.t1\r\n          }\r\n\r\n          // ALL DONE --------\r\n\r\n          this.eventLayers.push({\r\n            events: events.slice(1, 2), // linkEvents.slice(1, 2),\r\n            positions,\r\n            vehicles: tripData,\r\n            times: message.times,\r\n          })\r\n\r\n          // zoom map on first load\r\n          // if (!totalRows) this.setFirstZoom(message.coordinates, rows)\r\n          // // save layer data\r\n          // totalRows += rows\r\n        }\r\n      }\r\n\r\n      this.gzipWorker.postMessage({\r\n        filePath: filename,\r\n        fileSystem: this.fileSystem,\r\n        projection: this.vizDetails.projection,\r\n      })\r\n    },\r\n\r\n    setFirstZoom(coordinates: any[], rows: number) {\r\n      const longitude = 0.5 * (coordinates[0] + coordinates[rows * 2 - 2])\r\n      const latitude = 0.5 * (coordinates[1] + coordinates[rows * 2 - 1])\r\n\r\n      if (Number.isFinite(longitude) && Number.isFinite(latitude)) {\r\n        globalStore.commit(\r\n          'setMapCamera',\r\n          Object.assign({}, globalStore.state.viewState, { longitude, latitude, zoom: 10 })\r\n        )\r\n      }\r\n    },\r\n\r\n    finishedLoadingData(totalRows: number, data: any) {\r\n      this.isLoaded = true\r\n      this.range = data.range\r\n      this.myState.statusMessage = ''\r\n      this.timeFilter = [this.timeRange[0], this.timeRange[0] + 59]\r\n\r\n      if (this.gzipWorker) this.gzipWorker.terminate()\r\n\r\n      this.setColors()\r\n      this.moveLogo()\r\n      // this.eventLayers = [...this.eventLayers]\r\n\r\n      console.log('ALL DONE', {\r\n        totalRows,\r\n        data: data.range,\r\n        time: this.timeRange,\r\n        layers: this.eventLayers.length,\r\n      })\r\n    },\r\n\r\n    toggleAnimation() {\r\n      this.isAnimating = !this.isAnimating\r\n      if (this.isAnimating) {\r\n        this.animationElapsedTime = this.timeFilter[0] - this.timeRange[0]\r\n        this.startTime = Date.now() - this.animationElapsedTime / this.ANIMATE_SPEED\r\n        this.animate()\r\n      }\r\n    },\r\n\r\n    setColors() {\r\n      const EXPONENT = this.guiConfig.exponent // powerFunction // 4 // log-e? not steep enough\r\n\r\n      let colors256 = colormap({\r\n        colormap: this.guiConfig['color ramp'],\r\n        nshades: 256,\r\n        format: 'rba',\r\n        alpha: 1,\r\n      }).map((c: number[]) => [c[0], c[1], c[2]])\r\n\r\n      if (this.guiConfig.flip) colors256 = colors256.reverse()\r\n\r\n      const step = 256 / (this.guiConfig.buckets - 1)\r\n      const colors = []\r\n      for (let i = 0; i < this.guiConfig.buckets - 1; i++) {\r\n        colors.push(colors256[Math.round(step * i)])\r\n      }\r\n      colors.push(colors256[255])\r\n\r\n      // figure out min and max\r\n      const max1 = Math.pow(this.range[1], 1 / EXPONENT)\r\n      const max2 = (max1 * this.guiConfig['clip max']) / 100.0\r\n      // const clippedMin = (this.range[1] * this.clipData[0]) / 100.0\r\n\r\n      // console.log({ max1, max2 })\r\n\r\n      const breakpoints = [] as number[]\r\n      for (let i = 1; i < this.guiConfig.buckets; i++) {\r\n        const raw = (max2 * i) / this.guiConfig.buckets\r\n        const breakpoint = Math.pow(raw, EXPONENT)\r\n        breakpoints.push(breakpoint)\r\n      }\r\n\r\n      // only update legend if we have the full dataset already\r\n      if (this.isLoaded) this.setLegend(colors, breakpoints)\r\n\r\n      this.colors = colors\r\n      this.breakpoints = breakpoints\r\n    },\r\n\r\n    setLegend(colors: any[], breakpoints: number[]) {\r\n      // hide the legend if there is no data to show.\r\n      if (this.range[1] - this.range[0] === 0) return\r\n\r\n      this.legendStore = new LegendStore()\r\n      this.legendStore.setLegendSection({\r\n        section: 'Legend',\r\n        column: 'Legend',\r\n        values: colors.map((rgb, index) => {\r\n          const breakpoint = breakpoints[index == 0 ? index : index - 1]\r\n          let label = '' + Math.round(1e6 * breakpoint) / 1e6\r\n          if (index == 0) label = '< ' + label\r\n          if (index == colors.length - 1) label = '> ' + label\r\n          return { label, value: rgb }\r\n        }),\r\n      })\r\n    },\r\n\r\n    async loadNetwork() {\r\n      if (!this.myDataManager) throw Error('event viewer: no datamanager')\r\n\r\n      let networkFilename = this.vizDetails.file.replace('events.xml', 'network.xml')\r\n      const network = await this.myDataManager.getRoadNetwork(\r\n        networkFilename,\r\n        this.myState.subfolder,\r\n        Object.assign({ projection: '25833' }, this.vizDetails)\r\n      )\r\n\r\n      const linkIdLookup = {} as any\r\n      let i = 0\r\n      for (const link of network.linkIds) {\r\n        linkIdLookup[`${link}`] = i\r\n        i++\r\n      }\r\n\r\n      return { network, linkIdLookup }\r\n    },\r\n\r\n    async loadFiles() {\r\n      const { network, linkIdLookup } = await this.loadNetwork()\r\n      this.network = network\r\n      this.linkIdLookup = linkIdLookup\r\n\r\n      let dataArray: any = []\r\n      if (!this.fileApi) return { dataArray }\r\n\r\n      try {\r\n        let filename = `${this.myState.subfolder}/${this.vizDetails.file}`\r\n        await this.streamEventFile(filename)\r\n      } catch (e) {\r\n        console.error(e)\r\n        this.myState.statusMessage = '' + e\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg: `Loading/Parsing Error`,\r\n          desc: 'Error loading/parsing: ${this.myState.subfolder}/${this.vizDetails.file}',\r\n        })\r\n      }\r\n    },\r\n\r\n    animate() {\r\n      if (!this.isAnimating) return\r\n\r\n      this.animationElapsedTime = this.ANIMATE_SPEED * (Date.now() - this.startTime)\r\n\r\n      this.animationClockTime = this.animationElapsedTime + this.timeRange[0]\r\n\r\n      if (this.animationClockTime > this.timeRange[1]) {\r\n        this.startTime = Date.now()\r\n        this.animationElapsedTime = 0 // this.timeRange[0]\r\n      }\r\n\r\n      const span = this.timeFilter[1] - this.timeFilter[0]\r\n      this.timeFilter = [this.animationClockTime, this.animationClockTime + span]\r\n\r\n      this.animator = window.requestAnimationFrame(this.animate)\r\n    },\r\n\r\n    convertSecondsToClockTimeMinutes(index: number) {\r\n      const h = Math.floor(index / 3600)\r\n      const m = Math.floor((index - h * 3600) / 60)\r\n      const s = index - h * 3600 - m * 60\r\n\r\n      const hms = { h: `${h}`, m: `${m}`.padStart(2, '0'), s: `${s}`.padStart(2, '0') }\r\n\r\n      return `${hms.h}:${hms.m}`\r\n    },\r\n  },\r\n\r\n  async mounted() {\r\n    this.$store.commit('setFullScreen', !this.thumbnail)\r\n    this.myState.thumbnail = this.thumbnail\r\n    this.myState.yamlConfig = this.yamlConfig || ''\r\n    this.myState.subfolder = this.subfolder\r\n\r\n    // DataManager might be passed in from the dashboard; or we might be\r\n    // in single-view mode, in which case we need to create one for ourselves\r\n    this.myDataManager = this.datamanager || new DashboardDataManager(this.root, this.subfolder)\r\n\r\n    await this.getVizDetails()\r\n    await this.buildThumbnail()\r\n\r\n    if (this.thumbnail) return\r\n\r\n    this.setupLogoMover()\r\n\r\n    // ----------------------------------------------------\r\n    // this.setupGui()\r\n    this.myState.statusMessage = `${this.$i18n.t('loading')}`\r\n\r\n    if (!this.isLoaded) await this.loadFiles()\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // MUST erase the React view handle to prevent gigantic memory leak!\r\n    REACT_VIEW_HANDLES[this.viewId] = undefined\r\n    delete REACT_VIEW_HANDLES[this.viewId]\r\n\r\n    try {\r\n      if (this.gzipWorker) {\r\n        this.gzipWorker.postMessage({ terminate: true })\r\n        this.gzipWorker.terminate()\r\n      }\r\n      if (this.guiController) this.guiController.destroy()\r\n    } catch (e) {\r\n      console.warn(e)\r\n    }\r\n\r\n    if (this.animator) window.cancelAnimationFrame(this.animator)\r\n\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.viz-plugin {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: $thumbnailHeight;\r\n  background: var(--bgMapPanel);\r\n}\r\n\r\n.message {\r\n  z-index: 5;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: auto auto 0 0;\r\n  background-color: var(--bgPanel);\r\n  padding: 0rem 0.5rem;\r\n  border-radius: 0;\r\n\r\n  a {\r\n    color: white;\r\n    text-decoration: none;\r\n\r\n    &.router-link-exact-active {\r\n      color: white;\r\n    }\r\n  }\r\n\r\n  p {\r\n    color: var(--textFancy);\r\n    font-size: 1.2rem;\r\n    font-weight: normal;\r\n    line-height: 1.75rem;\r\n    margin: auto 0.5rem auto 0;\r\n    padding: 0 0;\r\n  }\r\n}\r\n\r\n.map-layer {\r\n  pointer-events: auto;\r\n}\r\n\r\n.drawing-tool {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.bottom-right {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  margin: auto 7px 15rem auto;\r\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\r\n}\r\n\r\n.legend-area {\r\n  background-color: var(--bgPanel);\r\n  border: 1px solid var(--bgPanel2);\r\n}\r\n\r\n.time-slider-area {\r\n  position: absolute;\r\n  bottom: 2.5rem;\r\n  left: 0;\r\n  right: 0;\r\n  margin: 0 8rem 0 0.5rem;\r\n  filter: $filterShadow;\r\n}\r\n\r\n.buckets {\r\n  color: var(--text);\r\n  padding: 4px 4px 4px 4px;\r\n  display: flex;\r\n}\r\n\r\n.ramp-selector {\r\n  background-color: var(--bgBold);\r\n}\r\n\r\n.configurator {\r\n  user-select: none;\r\n  background-color: var(--bgPanel);\r\n  margin-top: 2rem;\r\n}\r\n\r\n.clip-slider {\r\n  margin: 0 0.5rem;\r\n}\r\n\r\n.top-right {\r\n  background-color: var(--bgPanel2);\r\n  color: white;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: 5;\r\n  border-left: 1px solid #66669940;\r\n  border-bottom: 1px solid #66669940;\r\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\r\n}\r\n\r\n* > .number {\r\n  background-color: yellow;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n  .message {\r\n    padding: 0.5rem 0.5rem;\r\n  }\r\n}\r\n</style>\r\n","\r\n.viz-plugin(oncontextmenu=\"return false\" :id=\"`id-${viewId}`\")\r\n\r\n  event-map.map-layer(v-if=\"!thumbnail && isLoaded\"\r\n    :viewId=\"viewId\"\r\n    :eventLayers=\"eventLayers\"\r\n    :network=\"network\"\r\n    :linkIdLookup=\"linkIdLookup\"\r\n    :timeFilter=\"timeFilter\"\r\n    :dark=\"this.$store.state.isDarkMode\"\r\n    :colors=\"this.colors\"\r\n    :breakpoints=\"this.breakpoints\"\r\n    :radius=\"this.guiConfig.radius\"\r\n    :mapIsIndependent=\"false\"\r\n    :simulationTime=\"timeFilter[1]\"\r\n  )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\" corner=\"bottom\")\r\n\r\n  .top-right\r\n    .gui-config(:id=\"configId\")\r\n\r\n  .bottom-right\r\n    .legend-area(v-if=\"legendStore\")\r\n      legend-box(:legendStore=\"legendStore\")\r\n\r\n  time-slider.time-slider-area(v-if=\"isLoaded\"\r\n    :range=\"timeRange\"\r\n    :activeTimeExtent=\"timeFilter\"\r\n    :labels=\"timeLabels\"\r\n    :isAnimating=\"isAnimating\"\r\n    @timeExtent=\"handleTimeSliderValues\"\r\n    @toggleAnimation=\"toggleAnimation\"\r\n    @drag=\"isAnimating=false\"\r\n  )\r\n\r\n  .message(v-if=\"!thumbnail && myState.statusMessage\")\r\n    p.status-message {{ myState.statusMessage }}\r\n\r\n"],"names":["ICON_MAPPING","marker","x","y","width","height","mask","info","vehicle","diamond","dataFilter","DataFilterExtension","filterSize","INITIAL_VIEW","pitch","zoom","bearing","longitude","latitude","MyComponent","defineComponent","name","i18n","messages","en","loading","sorting","aggregate","maxHeight","showDetails","selection","areas","count","promptCRS","de","components","CollapsiblePanel","DrawingTool","EventMap","viewId","eventLayers","network","linkIdLookup","timeFilter","dark","colors","breakpoints","radius","mapIsIndependent","simulationTime","viewState","setViewState","useState","exports","getTooltip","element","index","REACT_VIEW_HANDLES","globalStore","state","allLayers","map","layer","layerIndex","outOfRange","times","length","ScatterplotLayer","data","attributes","getFilterValue","value","size","getPosition","positions","autoHighlight","extensions","id","filled","filterRange","getRadius","getFillColor","highlightColor","opacity","parameters","depthTest","pickable","radiusScale","stroked","updateTriggers","visible","vehicles","t0","t1","MovingIconsLayer","getTimeStart","getTimeEnd","getPathStart","locO","getPathEnd","locD","getColor","iconMoving","iconStill","getSize","currentTime","shadowEnabled","iconAtlas","BASE_URL","iconMapping","sizeScale","billboard","DeckGL","layers","controller","useDevicePixels","onViewStateChange","handleViewState","view","e","center","commit","pickingRadius","onClick","StaticMap","mapStyle","getters","preventStyleDiffing","mapboxApiAccessToken","MAPBOX_TOKEN","LegendBox","TimeSlider","ZoomButtons","props","root","type","String","required","subfolder","yamlConfig","config","Object","thumbnail","Boolean","datamanager","myDataManager","source","Float32Array","dest","linkIds","guiConfig","buckets","exponent","flip","colorRamps","Math","floor","random","configId","timeLabels","startTime","isAnimating","range","Infinity","timeRange","legendStore","standaloneYAMLconfig","title","description","file","projection","YAMLrequirementsXY","columnLookup","gzipWorker","vizDetails","myState","statusMessage","isLoaded","animator","guiController","resizer","thumbnailUrl","ANIMATE_SPEED","animationElapsedTime","animationClockTime","computed","fileApi","HTTPFileSystem","this","fileSystem","svnProject","$store","svnProjects","filter","a","slug","console","log","Error","urlThumbnail","watch","methods","handleTimeSliderValues","timeValues","convertSecondsToClockTimeMinutes","setupLogoMover","ResizeObserver","moveLogo","deckmap","document","getElementById","observe","logo","querySelector","right","clientWidth","style","setupGui","GUI","injectStyles","container","add","onChange","setColors","solveProjection","text","getFileText","YAML","parse","error","getVizDetails","validateYAML","assign","RegExp","test","loadStandaloneYAMLConfig","setConfigForRawCSV","$emit","filename","indexOf","setVizDetails","err","Status","ERROR","msg","desc","configuration","key","WARNING","t","buildThumbnail","blob","getFileBlob","buffer","arrayBuffer","base64","util","arrayBufferToBase64","streamEventFile","totalRows","terminate","MATSimEventStreamer","formatter","Intl","NumberFormat","onmessage","async","event","message","status","finished","finishedLoadingData","events","format","min","time","max","vehicleTrips","linkEvents","row","link","fill","NaN","i","offset","numTrips","tripData","trip","push","slice","postMessage","filePath","setFirstZoom","coordinates","rows","Number","isFinite","toggleAnimation","Date","now","animate","EXPONENT","colors256","colormap","nshades","alpha","c","reverse","step","round","max2","pow","raw","breakpoint","setLegend","LegendStore","setLegendSection","section","column","values","rgb","label","loadNetwork","networkFilename","replace","getRoadNetwork","loadFiles","dataArray","span","window","requestAnimationFrame","h","m","s","hms","padStart","mounted","DashboardDataManager","$i18n","beforeDestroy","destroy","warn","cancelAnimationFrame","_vm","_h","$createElement","_c","_self","staticClass","attrs","oncontextmenu","isDarkMode","_e","corner","activeTimeExtent","labels","on","timeExtent","drag","$event","_v","_s"],"mappings":"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"}