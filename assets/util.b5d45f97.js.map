{"version":3,"file":"util.b5d45f97.js","sources":["../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../node_modules/strnum/strnum.js","../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../../node_modules/fast-xml-parser/src/fxp.js","../../node_modules/fflate/esm/browser.js","../../src/js/util.ts"],"sourcesContent":["'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ entityName ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nmodule.exports = readDocType;","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.isFirefox && (tagName === \"link\" || tagName == \"node\")) console.log(tagName)\r\n\r\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup ){\n            listTagVal += this.j2x(item, level + 1).val;\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          listTagVal += this.buildTextValNode(item, key, '', level);\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, '', level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    if (attrStr && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\n// see fleb note\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new u32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return [b, r];\n};\nvar _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 0; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, buf, st) {\n    // source length\n    var sl = dat.length;\n    if (!sl || (st && st.f && !st.l))\n        return buf || new u8(0);\n    // have to estimate size\n    var noBuf = !buf || st;\n    // no state\n    var noSt = !st || st.i;\n    if (!st)\n        st = {};\n    // Assumes roughly 33% compression ratio average\n    if (!buf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (noBuf)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >>> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17;\n        if (noBuf)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (noBuf)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                for (; bt < end; bt += 4) {\n                    buf[bt] = buf[bt - dt];\n                    buf[bt + 1] = buf[bt + 1 - dt];\n                    buf[bt + 2] = buf[bt + 2 - dt];\n                    buf[bt + 3] = buf[bt + 3 - dt];\n                }\n                bt = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    return bt == buf.length ? buf : slc(buf, 0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >>> 8;\n    d[o + 2] |= v >>> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return [et, 0];\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return [v, 1];\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return [new u8(tr), mbt];\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return [cl.subarray(0, cli), s];\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >>> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];\n    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];\n    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        lcfreq[lclt[i] & 31]++;\n    for (var i = 0; i < lcdt.length; ++i)\n        lcfreq[lcdt[i] & 31]++;\n    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n    if (flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        if (syms[i] > 255) {\n            var len = (syms[i] >>> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];\n            var dst = syms[i] & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n    var s = dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var pos = 0;\n    if (!lvl || s < 8) {\n        for (var i = 0; i <= s; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[pos >> 3] = lst;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n    }\n    else {\n        var opt = deo[lvl - 1];\n        var n = opt >>> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = new u16(32768), head = new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new u32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos\n        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n        for (; i < s; ++i) {\n            // hash value\n            // deopt when i > s - 3 - at end, deopt acceptable\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && rem > 423) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = (i - dif + j + 32768) & 32767;\n                                    var pti = prev[ti];\n                                    var cd = (ti - pti + 32768) & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += (imod - pimod + 32768) & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one Uint32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        // this is the easiest way to avoid needing to maintain state\n        if (!lst && pos & 7)\n            pos = wfblk(w, pos + 1, et);\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Alder32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return [fnStr, td];\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    var _a;\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];\n        ch[id] = wcln(fns[m], fnStr, td_1);\n    }\n    var td = mrg({}, ch[id][1]);\n    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gu8]; };\nvar bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zlv]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get u8\nvar gu8 = function (o) { return o && o.size && new u8(o.size); };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += d[10] | (d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return ((d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) | (d[l - 1] << 24)) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);\n};\n// zlib valid\nvar zlv = function (d) {\n    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if (d[1] & 32)\n        err(6, 'invalid zlib data: preset dictionaries not supported');\n};\nfunction AsyncCmpStrm(opts, cb) {\n    if (!cb && typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n// zlib footer: -4 to -0 is Adler32\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (!cb && typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, !f), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.d = final;\n        this.p(chunk, final || false);\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an inflation stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Inflate(cb) {\n        this.s = {};\n        this.p = new u8(0);\n        this.ondata = cb;\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        var l = this.p.length;\n        var n = new u8(l + c.length);\n        n.set(this.p), n.set(c, l), this.p = n;\n    };\n    Inflate.prototype.c = function (final) {\n        this.d = this.s.i = final || false;\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.o, this.s);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous inflation stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncInflate(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, 0, function () {\n            var strm = new Inflate();\n            onmessage = astrm(strm);\n        }, 7);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, out) {\n    return inflt(data, out);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        this.c.p(c);\n        this.l += c.length;\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a GUNZIP stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Gunzip(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            var s = this.p.length > 3 ? gzs(this.p) : 4;\n            if (s >= this.p.length && !final)\n                return;\n            this.p = this.p.subarray(s), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 8)\n                err(6, 'invalid gzip data');\n            this.p = this.p.subarray(0, -8);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous GUNZIP stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncGunzip(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, 0, function () {\n            var strm = new Gunzip();\n            onmessage = astrm(strm);\n        }, 9);\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, out) {\n    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        this.c.p(c);\n        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates a Zlib decompression stream\n     * @param cb The callback to call whenever data is inflated\n     */\n    function Unzlib(cb) {\n        this.v = 1;\n        Inflate.call(this, cb);\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 2 && !final)\n                return;\n            this.p = this.p.subarray(2), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous Zlib decompression stream\n     * @param cb The callback to call whenever data is deflated\n     */\n    function AsyncUnzlib(cb) {\n        this.ondata = cb;\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, 0, function () {\n            var strm = new Unzlib();\n            onmessage = astrm(strm);\n        }, 11);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, out) {\n    return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    /**\n     * Creates a decompression stream\n     * @param cb The callback to call whenever data is decompressed\n     */\n    function Decompress(cb) {\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                var _this_1 = this;\n                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(cb)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(cb)\n                        : new this.Z(cb);\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    /**\n   * Creates an asynchronous decompression stream\n   * @param cb The callback to call whenever data is decompressed\n   */\n    function AsyncDecompress(cb) {\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, out) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, out)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, out)\n            : unzlibSync(data, out);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return [r, slc(d, i - 1)];\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), ch = _a[0], np = _a[1];\n        if (final) {\n            if (np.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = np;\n        this.ondata(ch, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td)\n        return td.decode(dat);\n    else {\n        var _a = dutf8(dat), out = _a[0], ext = _a[1];\n        if (ext.length)\n            err(8);\n        return out;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c == null && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1)), b += 4;\n    if (c != null) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this_1 = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this_1.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this_1 = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this_1.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this_1.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this_1.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this_1.ondata(err, dat, final);\n                    _this_1.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this_1 = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this_1.d & 1))\n                        return;\n                    _this_1.u.splice(-1, 1);\n                    _this_1.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, f.c, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this_1 = this;\n        this.i = new Inflate(function (dat, final) {\n            _this_1.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this_1 = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this_1.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this_1.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this_1 = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this_1.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this_1.k[0] == chks_3 && _this_1.c)\n                                        _this_1.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295;\n        if (z) {\n            e = b4(data, e - 12);\n            if (b4(data, e) != 0x6064B50) {\n                cbd(err(13, 0, 1), null);\n                return tAll;\n            }\n            c = lft = b4(data, e + 32);\n            o = b4(data, e + 48);\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    if (sc < 320000) {\n                        try {\n                            cbl(null, inflateSync(infl, new u8(su)));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295;\n    if (z) {\n        e = b4(data, e - 12);\n        if (b4(data, e) != 0x6064B50)\n            err(13);\n        c = b4(data, e + 32);\n        o = b4(data, e + 48);\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","import micromatch from 'micromatch'\r\nimport { XMLParser } from 'fast-xml-parser'\r\nimport { decompressSync } from 'fflate'\r\n\r\n/**\r\n * Useful for converting loaded PNG images to CSS\r\n * @param buffer input (e.g. PNG content)\r\n * @returns base64-converted output\r\n */\r\nexport function arrayBufferToBase64(buffer: any) {\r\n  let binary = ''\r\n  const bytes = new Uint8Array(buffer)\r\n  const len = bytes.byteLength\r\n  for (let i = 0; i < len; i++) {\r\n    binary += String.fromCharCode(bytes[i])\r\n  }\r\n  return window.btoa(binary)\r\n}\r\n\r\n/**\r\n * Concat multiple typed arrays into one.\r\n * @param arrays a list of  typed arrays\r\n * @returns\r\n */\r\nexport function mergeTypedArrays(arrays: Array<any>[]): Array<any> {\r\n  if (arrays.length == 0) return new Array()\r\n  if (arrays.length == 1) return arrays[0]\r\n\r\n  const total = arrays.map(a => a.length).reduce((t, n) => t + n)\r\n\r\n  const c = Object.getPrototypeOf(arrays[0]).constructor\r\n  const result = new c(total)\r\n\r\n  let n = 0\r\n  for (const arr of arrays) {\r\n    result.set(arr, n)\r\n    n += arr.length\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n/**\r\n * Debounce any function for better UI responsiveness\r\n * @param fn function to debounce\r\n * @param ms milliseconds to wait\r\n * @returns wrapped function\r\n */\r\nexport function debounce(fn: any, ms: number) {\r\n  let timer: any\r\n  return (...args: any) => {\r\n    clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      timer = null\r\n      //@ts-ignore\r\n      fn.apply(this, args)\r\n    }, ms)\r\n  }\r\n}\r\n\r\nexport function findMatchingGlobInFiles(filenames: string[], glob: string): string[] {\r\n  // first see if file itself is in this folder\r\n  if (filenames.indexOf(glob) > -1) return [glob]\r\n\r\n  // return globs in this folder\r\n  const matches = micromatch(filenames, glob)\r\n  if (matches.length) return matches\r\n\r\n  // nothing!\r\n  return []\r\n}\r\n\r\nexport async function parseXML(xml: string, settings: any = {}) {\r\n  // This uses the fast-xml-parser library, which is the least-quirky\r\n  // of all the terrible XML libraries.\r\n  //\r\n  // - Element attributes are stored directly in the element as \"$attributeName\"\r\n  //\r\n  // - Items with just one element are stored as is; but you can\r\n  //   force a path to be always-array with \"alwaysArray: ['my.path.to.element]\"\r\n  //\r\n  // - Order is not preserved; like items are stored as arrays. For matsim, this\r\n  //   is only a problem for plans (I think?) but you can recreate the plan order\r\n  //   since act and leg elements always alternate. (Or use \"preserveOrder: true\"\r\n  //   but that creates LOTS of one-item arrays everywhere. Sad.)\r\n\r\n  const defaultConfig = {\r\n    ignoreAttributes: false,\r\n    preserveOrder: false,\r\n    attributeNamePrefix: '$',\r\n    isArray: undefined as any,\r\n  }\r\n\r\n  // Allow user to pass in an array of \"always as array\" XML paths:\r\n  if (settings.alwaysArray) {\r\n    defaultConfig.isArray = (name: string, jpath: string) => {\r\n      if (settings.alwaysArray.indexOf(jpath) !== -1) return true\r\n    }\r\n  } else {\r\n    delete defaultConfig.isArray\r\n  }\r\n\r\n  const options = Object.assign(defaultConfig, settings)\r\n  const parser = new XMLParser(options)\r\n\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const result = parser.parse(xml)\r\n      resolve(result)\r\n    } catch (err) {\r\n      reject(err)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * This recursive function gunzips the buffer. It is recursive because\r\n * some combinations of subversion, nginx, and various user browsers\r\n * can single- or double-gzip .gz files on the wire. It's insane but true.\r\n */\r\nexport function gUnzip(buffer: ArrayBuffer): any {\r\n  const u8 = new Uint8Array(buffer)\r\n\r\n  // GZIP always starts with a magic number, hex 0x8b1f\r\n  const header = new Uint16Array(buffer, 0, 2)\r\n\r\n  if (header[0] === 0x8b1f) {\r\n    try {\r\n      const result = decompressSync(u8)\r\n      return result\r\n    } catch (e) {\r\n      console.error('eee', e)\r\n    }\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\nexport default { arrayBufferToBase64, debounce, findMatchingGlobInFiles, gUnzip, parseXML }\r\n"],"names":["nameStartChar","nameRegexp","regexName","RegExp","exports","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","match","exec","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","util","require$$0","defaultOptions","allowBooleanAttributes","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validator","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","msg","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","preserveOrder","attributeNamePrefix","attributesGroupName","textNodeName","ignoreAttributes","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","hex","leadingZeros","eNotation","tagValueProcessor","val2","attributeValueProcessor","stopNodes","alwaysCreateTextNode","isArray","commentPropName","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","jPath","attrs","OptionsBuilder","buildOptions","xmlNode","constructor","this","child","add","key","addChild","node","readEntityExp","entityName2","Error","isComment","isEntity","isElement","isAttlist","isNotation","DocTypeReader","entities","hasBody","comment","exp","entityName","val","regx","hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","decimalPoint","require$$1","readDocType","require$$2","toNumber","str","trimmedStr","skipLike","test","sign","numTrimmedByZeros","numStr","trimZeros","num","search","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","replaceEntitiesValue","newval","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","lastTagName","lastIndexOf","propIndex","tagsNodeStack","tagData","readTagExp","childNode","tagExp","attrExpPresent","endIndex","docTypeEntities","isFirefox","console","log","lastTag","isItStopNode","tagContent","result2","readStopNodeData","entity","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","openTagCount","shouldParse","OrderedObjParser_1","apos","gt","lt","quot","space","cent","pound","yen","euro","copyright","reg","inr","compress","arr","text","compressedObj","tagObj","property","propName","newJpath","isLeaf","isLeafTag","assignAttributes","Array","propName$1","attrMap","jpath","atrrName","propCount","node2json","prettify","OrderedObjParser","require$$3","XMLParser_1","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","arrToStr","indentation","xmlStr","isPreviousElementTag","newJPath","tagText","isStopNode","attStr2","attr_to_str","tempInd","piTextNodeName","newIdentation","indentBy","tagStart","tagValue","suppressUnpairedNode","suppressEmptyNode","endsWith","includes","attr","attrVal","suppressBooleanAttributes","textValue","buildFromOrderedJs","jArray","format","oneListGroup","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","level","j2x","buildTextValNode","buildObjectNode","repeat","name","startsWith","prototype","build","jObj","arrayNodeName","Date","buildAttrPairStr","arrLen","listTagVal","j","item","Ks","L","closeTag","tagEndExp","piClosingChar","fxp","XMLParser","XMLValidator","XMLBuilder","u8","Uint8Array","u16","Uint16Array","u32","Uint32Array","fleb","fdeb","clim","freb","eb","b","r","_a","fl","revfl","fd","rev","x","hMap","cd","mb","s","l","co","le","rvb","sv","r_1","m","flt","fdt","flrm","fdrm","max","bits","d","p","o","bits16","ec","ind","nt","e","captureStackTrace","inflt","dat","buf","st","sl","f","noBuf","noSt","cbuf","l2","bl","nbuf","Math","set","final","pos","bt","lm","dm","lbt","dbt","n","tbts","type","subarray","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","c","dt","lms","dms","lpos","sym","dsym","end","BYTES_PER_ELEMENT","slc","et","gunzipSync","out","flg","zs","gzs","unzlibSync","decompressSync","inflateSync","td","TextDecoder","decode","stream","arrayBufferToBase64","buffer","binary","bytes","byteLength","String","fromCharCode","btoa","mergeTypedArrays","arrays","total","reduce","n2","getPrototypeOf","findMatchingGlobInFiles","filenames","glob","micromatch","async","parseXML","xml","settings","defaultConfig","alwaysArray","parser","Promise","resolve","reject","err2","gUnzip","u82","error","debounce","fn","ms","timer","args","clearTimeout","setTimeout","apply"],"mappings":"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"}