{"version":3,"file":"bar.276f7c8b.js","sources":["../../src/dash-panels/bar.vue","../../src/dash-panels/bar.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\nVuePlotly.myplot(\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n  :class=\"className\"\r\n)\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport { FileSystemConfig, Status, BG_COLOR_DASHBOARD, UI_FONT } from '@/Globals'\r\nimport DashboardDataManager, { FilterDefinition } from '@/js/DashboardDataManager'\r\nimport VuePlotly from '@/components/VuePlotly.vue'\r\nimport { buildCleanTitle } from './_allPanels'\r\n\r\nimport globalStore from '@/store'\r\n\r\nexport default defineComponent({\r\n  name: 'BarChartPanel',\r\n  components: { VuePlotly },\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    files: { type: Array, required: true },\r\n    config: { type: Object as any, required: true },\r\n    cardTitle: { type: String, required: true },\r\n    cardId: String,\r\n    datamanager: Object as PropType<DashboardDataManager>,\r\n  },\r\n  data: () => {\r\n    return {\r\n      globalState: globalStore.state,\r\n      id: 'bar-' + Math.floor(1e12 * Math.random()),\r\n      plotID: Math.floor(1e12 * Math.random()).toString(),\r\n      className: '',\r\n      // dataSet is either x,y or allRows[]\r\n      dataSet: {} as { x?: any[]; y?: any[]; allRows?: any },\r\n      YAMLrequirementsBar: { dataset: '', x: '', columns: '' },\r\n      layout: {\r\n        barmode: 'overlay',\r\n        bargap: 0.08,\r\n        height: 300,\r\n        margin: { t: 8, b: 0, l: 0, r: 0, pad: 2 },\r\n        font: {\r\n          color: '#444444',\r\n          family: UI_FONT,\r\n        },\r\n        xaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 12 },\r\n          animate: true,\r\n        },\r\n        yaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 16 },\r\n          animate: true,\r\n        },\r\n        legend: {\r\n          orientation: 'v',\r\n          x: 1,\r\n          y: 1,\r\n        },\r\n      },\r\n\r\n      data: [] as any[],\r\n\r\n      options: {\r\n        responsive: true,\r\n        displaylogo: false,\r\n        modeBarButtonsToRemove: [\r\n          'pan2d',\r\n          'zoom2d',\r\n          'select2d',\r\n          'lasso2d',\r\n          'zoomIn2d',\r\n          'zoomOut2d',\r\n          'autoScale2d',\r\n          'hoverClosestCartesian',\r\n          'hoverCompareCartesian',\r\n          'resetScale2d',\r\n          'toggleSpikelines',\r\n          'resetViewMapbox',\r\n        ],\r\n        toImageButtonOptions: {\r\n          format: 'png', // one of png, svg, jpeg, webp\r\n          filename: 'bar-chart',\r\n          width: null,\r\n          height: null,\r\n        },\r\n      },\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.updateLayout()\r\n    this.updateTheme()\r\n    this.dataSet = await this.loadData()\r\n    this.updateChart()\r\n\r\n    this.options.toImageButtonOptions.filename = buildCleanTitle(this.cardTitle, this.subfolder)\r\n\r\n    this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\r\n    this.$emit('isLoaded')\r\n\r\n    this.checkWarningsAndErrors()\r\n  },\r\n  beforeDestroy() {\r\n    this.datamanager?.removeFilterListener(this.config, this.handleFilterChanged)\r\n  },\r\n\r\n  watch: {\r\n    'globalState.isDarkMode'() {\r\n      this.updateTheme()\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    changeDimensions(dimensions: { width: number; height: number }) {\r\n      this.layout = Object.assign({}, this.layout, dimensions)\r\n    },\r\n\r\n    checkWarningsAndErrors() {\r\n      // Check this plot for warnings and errors\r\n\r\n      var plotTitle = this.cardTitle\r\n      // warnings\r\n      // missing title\r\n      if (plotTitle.length == 0) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `The plot title is missing!`,\r\n          desc: \"Please add a plot title in the .yaml-file (title: 'Example title')\",\r\n        })\r\n      }\r\n      // errors\r\n    },\r\n\r\n    updateTheme() {\r\n      const colors = {\r\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\r\n      }\r\n      this.layout = Object.assign({}, this.layout, colors)\r\n    },\r\n\r\n    updateLayout() {\r\n      this.layout.xaxis.title.text = this.config.xAxisTitle || this.config.xAxisName || ''\r\n      this.layout.yaxis.title.text = this.config.yAxisTitle || this.config.yAxisName || ''\r\n    },\r\n\r\n    async handlePlotlyClick(click: any) {\r\n      try {\r\n        const { x, y, data } = click.points[0]\r\n\r\n        const filter = this.config.groupBy\r\n        const value = x\r\n\r\n        // TODO this.datamanager.setFilter(this.config.dataset, filter, value)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    },\r\n\r\n    async handleFilterChanged() {\r\n      if (!this.datamanager) return\r\n      try {\r\n        const { filteredRows } = this.datamanager.getFilteredDataset(this.config) as any\r\n\r\n        // is filter UN-selected?\r\n        if (!filteredRows) {\r\n          this.data = [this.data[0]]\r\n          this.data[0].opacity = 1.0\r\n          return\r\n        }\r\n\r\n        const fullDataCopy = Object.assign({}, this.data[0])\r\n\r\n        fullDataCopy.x = filteredRows.x\r\n        fullDataCopy.y = filteredRows.y\r\n        fullDataCopy.opacity = 1.0\r\n        fullDataCopy.name = 'Filtered'\r\n        // let plotly manage bar colors EXCEPT the filter\r\n        fullDataCopy.marker = { color: '#ffaf00' } // 3c6' }\r\n\r\n        this.data = [this.data[0], fullDataCopy]\r\n        this.data[0].opacity = 0.3\r\n        this.data[0].name = 'All'\r\n      } catch (e) {\r\n        const message = '' + e\r\n        console.log(message)\r\n        this.dataSet = {}\r\n      }\r\n    },\r\n\r\n    async loadData() {\r\n      if (!this.datamanager) return {}\r\n\r\n      try {\r\n        this.validateYAML()\r\n        let dataset = await this.datamanager.getDataset(this.config)\r\n\r\n        // no filter? we are done:\r\n        if (!this.config.filters) return dataset\r\n\r\n        // filter data before returning:\r\n        this.datamanager.addFilterListener(this.config, this.handleFilterChanged)\r\n\r\n        for (const [column, value] of Object.entries(this.config.filters)) {\r\n          const filter: FilterDefinition = {\r\n            dataset: this.config.dataset,\r\n            column: column,\r\n            value: value,\r\n            range: Array.isArray(value),\r\n          }\r\n          this.datamanager.setFilter(filter)\r\n        }\r\n\r\n        // empty for now; filtered data will come back later via handleFilterChanged async.\r\n        return { allRows: {} }\r\n      } catch (e) {\r\n        console.error('' + e)\r\n      }\r\n      return { allRows: {} }\r\n    },\r\n\r\n    validateYAML() {\r\n      console.log('in bars validation')\r\n\r\n      for (const key in this.YAMLrequirementsBar) {\r\n        if (key in this.config === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    updateChart() {\r\n      try {\r\n        if (this.config.groupBy) this.updateChartWithGroupBy()\r\n        else this.updateChartSimple()\r\n      } catch (e) {\r\n        const msg = '' + e\r\n        this.$store.commit('setStatus', { type: Status.ERROR, msg })\r\n      }\r\n    },\r\n\r\n    updateChartWithGroupBy() {\r\n      this.className = this.plotID // stacked bug-fix hack\r\n\r\n      // TODO: re-implement grouping\r\n\r\n      // const { x, y } = this.dataRows\r\n\r\n      // this.data = [\r\n      //   {\r\n      //     x,\r\n      //     y,\r\n      //     name: this.config.groupBy,\r\n      //     type: 'bar',\r\n      //     textinfo: 'label+percent',\r\n      //     textposition: 'inside',\r\n      //     automargin: true,\r\n      //     opacity: 1.0,\r\n      //   },\r\n      // ]\r\n    },\r\n\r\n    updateChartSimple() {\r\n      let x: any[] = []\r\n\r\n      var useOwnNames = false\r\n\r\n      const allRows = this.dataSet.allRows || ({} as any)\r\n      const columnNames = Object.keys(allRows)\r\n\r\n      if (!columnNames.length) return\r\n\r\n      // old configs called it \"usedCol\" --> now \"columns\"\r\n      let columns = this.config.columns || this.config.usedCol\r\n\r\n      // Or maybe user didn't specify: then use all the columns!\r\n      if (!columns && columnNames.length) {\r\n        columns = columnNames.filter(col => col !== this.config.x).sort()\r\n      }\r\n\r\n      // old legendname field\r\n      if (this.config.legendName) this.config.legendTitles = this.config.legendName\r\n      if (this.config.legendTitles?.length) useOwnNames = true\r\n\r\n      if (this.config.stacked) {\r\n        this.layout.barmode = 'stack'\r\n      } else {\r\n        this.layout.barmode = 'group'\r\n      }\r\n\r\n      if (this.config.stacked) this.className = this.plotID\r\n\r\n      const xColumn = allRows[this.config.x]\r\n\r\n      if (!xColumn) {\r\n        throw Error(`File ${this.config.dataset}: Could not find column ${this.config.x}`)\r\n      }\r\n\r\n      x = xColumn.values\r\n      if (this.config.skipFirstRow) x = x.slice(1)\r\n\r\n      for (let i = 0; i < columns.length; i++) {\r\n        const col = columns[i]\r\n        const legendName = useOwnNames ? this.config.legendTitles[i] ?? col : col\r\n\r\n        let values = allRows[col].values\r\n        if (this.config.skipFirstRow) values = values.slice(1)\r\n\r\n        // are durations in 00:00:00 format?\r\n        if (this.config.convertToSeconds) values = this.convertToSeconds(values)\r\n\r\n        this.data.push({\r\n          x: x,\r\n          y: values,\r\n          name: legendName,\r\n          type: 'bar',\r\n          textinfo: 'label+percent',\r\n          textposition: 'inside',\r\n          automargin: true,\r\n          opacity: 1.0,\r\n        })\r\n      }\r\n    },\r\n\r\n    convertToSeconds(values: any[]) {\r\n      values = values.map((v: string) => {\r\n        try {\r\n          const pieces = v.split(':')\r\n          const seconds = pieces.reduce((prev: any, curr: any) => parseInt(curr, 10) + prev * 60, 0)\r\n          return seconds\r\n        } catch (e) {\r\n          return 0\r\n        }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n//\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.myplot {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n}\r\n</style>\r\n","\r\nVuePlotly.myplot(\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n  :class=\"className\"\r\n)\r\n\r\n"],"names":["__vue2_script","defineComponent","name","components","VuePlotly","props","fileSystemConfig","type","Object","required","subfolder","String","files","Array","config","cardTitle","cardId","datamanager","data","globalState","globalStore","state","id","Math","floor","random","plotID","toString","className","dataSet","YAMLrequirementsBar","dataset","x","columns","layout","barmode","bargap","height","margin","t","b","l","r","pad","font","color","family","UI_FONT","xaxis","automargin","autorange","title","text","standoff","animate","yaxis","legend","orientation","y","options","responsive","displaylogo","modeBarButtonsToRemove","toImageButtonOptions","format","filename","width","mounted","this","updateLayout","updateTheme","loadData","updateChart","buildCleanTitle","$emit","resizer","changeDimensions","checkWarningsAndErrors","beforeDestroy","_a","removeFilterListener","handleFilterChanged","watch","methods","dimensions","assign","length","$store","commit","Status","WARNING","msg","desc","colors","paper_bgcolor","BG_COLOR_DASHBOARD","colorScheme","plot_bgcolor","isDarkMode","xAxisTitle","xAxisName","yAxisTitle","yAxisName","handlePlotlyClick","click","points","groupBy","e","console","error","filteredRows","getFilteredDataset","opacity","fullDataCopy","marker","message","log","validateYAML","getDataset","filters","addFilterListener","column","value","entries","filter","range","isArray","setFilter","allRows","key","ERROR","updateChartWithGroupBy","updateChartSimple","useOwnNames","columnNames","keys","usedCol","col","sort","legendName","legendTitles","stacked","xColumn","Error","values","skipFirstRow","slice","i","_b","convertToSeconds","push","textinfo","textposition","map","v","pieces","split","reduce","prev","curr","parseInt","_vm","_h","$createElement","_self","_c","staticClass","class","attrs"],"mappings":"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"}