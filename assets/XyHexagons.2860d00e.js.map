{"version":3,"file":"XyHexagons.2860d00e.js","sources":["../../node_modules/@deck.gl/layers/dist/esm/column-layer/column-geometry.js","../../node_modules/@deck.gl/layers/dist/esm/column-layer/column-layer.js","../../node_modules/@deck.gl/layers/dist/esm/column-layer/column-layer-vertex.glsl.js","../../node_modules/@deck.gl/layers/dist/esm/column-layer/column-layer-fragment.glsl.js","../../node_modules/@deck.gl/aggregation-layers/dist/esm/utils/aggregation-operation-utils.js","../../node_modules/@deck.gl/aggregation-layers/dist/esm/utils/prop-utils.js","../../node_modules/@deck.gl/aggregation-layers/dist/esm/aggregation-layer.js","../../node_modules/@deck.gl/aggregation-layers/dist/esm/utils/scale-utils.js","../../node_modules/@deck.gl/aggregation-layers/dist/esm/utils/bin-sorter.js","../../node_modules/@deck.gl/aggregation-layers/dist/esm/utils/cpu-aggregator.js","../../node_modules/d3-hexbin/src/hexbin.js","../../node_modules/@deck.gl/aggregation-layers/dist/esm/hexagon-layer/hexagon-layer.js","../../node_modules/@deck.gl/aggregation-layers/dist/esm/utils/color-utils.js","../../node_modules/@deck.gl/aggregation-layers/dist/esm/hexagon-layer/hexagon-aggregator.js","../../src/plugins/xy-hexagons/XyHexLayer.tsx","../../src/plugins/xy-hexagons/XyHexagons.vue","../../src/plugins/xy-hexagons/XyHexagons.vue?vue&type=template&lang.js"],"sourcesContent":["import { log } from '@deck.gl/core';\nimport { Geometry, uid } from '@luma.gl/core';\nimport { modifyPolygonWindingDirection, WINDING } from '@math.gl/polygon';\nexport default class ColumnGeometry extends Geometry {\n  constructor(props) {\n    const {\n      id = uid('column-geometry')\n    } = props;\n    const {\n      indices,\n      attributes\n    } = tesselateColumn(props);\n    super({ ...props,\n      id,\n      indices,\n      attributes\n    });\n  }\n\n}\n\nfunction tesselateColumn(props) {\n  const {\n    radius,\n    height = 1,\n    nradial = 10\n  } = props;\n  let {\n    vertices\n  } = props;\n\n  if (vertices) {\n    log.assert(vertices.length >= nradial);\n    vertices = vertices.flatMap(v => [v[0], v[1]]);\n    modifyPolygonWindingDirection(vertices, WINDING.COUNTER_CLOCKWISE);\n  }\n\n  const isExtruded = height > 0;\n  const vertsAroundEdge = nradial + 1;\n  const numVertices = isExtruded ? vertsAroundEdge * 3 + 1 : nradial;\n  const stepAngle = Math.PI * 2 / nradial;\n  const indices = new Uint16Array(isExtruded ? nradial * 3 * 2 : 0);\n  const positions = new Float32Array(numVertices * 3);\n  const normals = new Float32Array(numVertices * 3);\n  let i = 0;\n\n  if (isExtruded) {\n    for (let j = 0; j < vertsAroundEdge; j++) {\n      const a = j * stepAngle;\n      const vertexIndex = j % nradial;\n      const sin = Math.sin(a);\n      const cos = Math.cos(a);\n\n      for (let k = 0; k < 2; k++) {\n        positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n        positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n        positions[i + 2] = (1 / 2 - k) * height;\n        normals[i + 0] = vertices ? vertices[vertexIndex * 2] : cos;\n        normals[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin;\n        i += 3;\n      }\n    }\n\n    positions[i + 0] = positions[i - 3];\n    positions[i + 1] = positions[i - 2];\n    positions[i + 2] = positions[i - 1];\n    i += 3;\n  }\n\n  for (let j = isExtruded ? 0 : 1; j < vertsAroundEdge; j++) {\n    const v = Math.floor(j / 2) * Math.sign(0.5 - j % 2);\n    const a = v * stepAngle;\n    const vertexIndex = (v + nradial) % nradial;\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n    positions[i + 0] = vertices ? vertices[vertexIndex * 2] : cos * radius;\n    positions[i + 1] = vertices ? vertices[vertexIndex * 2 + 1] : sin * radius;\n    positions[i + 2] = height / 2;\n    normals[i + 2] = 1;\n    i += 3;\n  }\n\n  if (isExtruded) {\n    let index = 0;\n\n    for (let j = 0; j < nradial; j++) {\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 2;\n      indices[index++] = j * 2 + 0;\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 1;\n      indices[index++] = j * 2 + 3;\n    }\n  }\n\n  return {\n    indices,\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      }\n    }\n  };\n}\n//# sourceMappingURL=column-geometry.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, phongLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, isWebGL2, hasFeature, FEATURES } from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  diskResolution: {\n    type: 'number',\n    min: 4,\n    value: 20\n  },\n  vertices: null,\n  radius: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  angle: {\n    type: 'number',\n    value: 0\n  },\n  offset: {\n    type: 'array',\n    value: [0, 0]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true,\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    const {\n      gl\n    } = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines = {};\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const regenerateModels = changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n    let meanVertexDistance = 0;\n\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  _updateGeometry({\n    diskResolution,\n    vertices,\n    extruded,\n    stroked\n  }) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n    this.state.model.setProps({\n      geometry\n    });\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {\n      model,\n      fillVertexCount,\n      wireframeVertexCount,\n      edgeDistance\n    } = this.state;\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: angle / 180 * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    if (extruded && wireframe) {\n      model.setProps({\n        isIndexed: true\n      });\n      model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({\n        isStroke: true\n      }).draw();\n    }\n\n    if (filled) {\n      model.setProps({\n        isIndexed: false\n      });\n      model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({\n        isStroke: false\n      }).draw();\n    }\n\n    if (!extruded && stroked) {\n      model.setProps({\n        isIndexed: false\n      });\n      model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(5).setUniforms({\n        isStroke: true\n      }).draw();\n    }\n  }\n\n}\n\n_defineProperty(ColumnLayer, \"layerName\", 'ColumnLayer');\n\n_defineProperty(ColumnLayer, \"defaultProps\", defaultProps);\n//# sourceMappingURL=column-layer.js.map","export default \"#version 300 es\\n\\n#define SHADER_NAME column-layer-vertex-shader\\n\\nin vec3 positions;\\nin vec3 normals;\\n\\nin vec3 instancePositions;\\nin float instanceElevations;\\nin vec3 instancePositions64Low;\\nin vec4 instanceFillColors;\\nin vec4 instanceLineColors;\\nin float instanceStrokeWidths;\\n\\nin vec3 instancePickingColors;\\n\\n// Custom uniforms\\nuniform float opacity;\\nuniform float radius;\\nuniform float angle;\\nuniform vec2 offset;\\nuniform bool extruded;\\nuniform bool stroked;\\nuniform bool isStroke;\\nuniform float coverage;\\nuniform float elevationScale;\\nuniform float edgeDistance;\\nuniform float widthScale;\\nuniform float widthMinPixels;\\nuniform float widthMaxPixels;\\nuniform int radiusUnits;\\nuniform int widthUnits;\\n\\n// Result\\nout vec4 vColor;\\n#ifdef FLAT_SHADING\\nout vec4 position_commonspace;\\n#endif\\n\\nvoid main(void) {\\n  geometry.worldPosition = instancePositions;\\n\\n  vec4 color = isStroke ? instanceLineColors : instanceFillColors;\\n  // rotate primitive position and normal\\n  mat2 rotationMatrix = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\\n\\n  // calculate elevation, if 3d not enabled set to 0\\n  // cylindar gemoetry height are between -1.0 to 1.0, transform it to between 0, 1\\n  float elevation = 0.0;\\n  // calculate stroke offset\\n  float strokeOffsetRatio = 1.0;\\n\\n  if (extruded) {\\n    elevation = instanceElevations * (positions.z + 1.0) / 2.0 * elevationScale;\\n  } else if (stroked) {\\n    float widthPixels = clamp(\\n      project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),\\n      widthMinPixels, widthMaxPixels) / 2.0;\\n    float halfOffset = project_pixel_size(widthPixels) / project_size(edgeDistance * coverage * radius);\\n    if (isStroke) {\\n      strokeOffsetRatio -= sign(positions.z) * halfOffset;\\n    } else {\\n      strokeOffsetRatio -= halfOffset;\\n    }\\n  }\\n\\n  // if alpha == 0.0 or z < 0.0, do not render element\\n  float shouldRender = float(color.a > 0.0 && instanceElevations >= 0.0);\\n  float dotRadius = radius * coverage * shouldRender;\\n\\n  geometry.pickingColor = instancePickingColors;\\n\\n  // project center of column\\n  vec3 centroidPosition = vec3(instancePositions.xy, instancePositions.z + elevation);\\n  vec3 centroidPosition64Low = instancePositions64Low;\\n  vec2 offset = (rotationMatrix * positions.xy * strokeOffsetRatio + offset) * dotRadius;\\n  if (radiusUnits == UNIT_METERS) {\\n    offset = project_size(offset);\\n  }\\n  vec3 pos = vec3(offset, 0.);\\n  DECKGL_FILTER_SIZE(pos, geometry);\\n\\n  gl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64Low, pos, geometry.position);\\n  geometry.normal = project_normal(vec3(rotationMatrix * normals.xy, normals.z));\\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\\n\\n  // Light calculations\\n  if (extruded && !isStroke) {\\n#ifdef FLAT_SHADING\\n    position_commonspace = geometry.position;\\n    vColor = vec4(color.rgb, color.a * opacity);\\n#else\\n    vec3 lightColor = lighting_getLightColor(color.rgb, project_uCameraPosition, geometry.position.xyz, geometry.normal);\\n    vColor = vec4(lightColor, color.a * opacity);\\n#endif\\n  } else {\\n    vColor = vec4(color.rgb, color.a * opacity);\\n  }\\n  DECKGL_FILTER_COLOR(vColor, geometry);\\n}\\n\";\n//# sourceMappingURL=column-layer-vertex.glsl.js.map","export default \"#version 300 es\\n#define SHADER_NAME column-layer-fragment-shader\\n\\nprecision highp float;\\n\\nuniform vec3 project_uCameraPosition;\\nuniform bool extruded;\\nuniform bool isStroke;\\n\\nout vec4 fragColor;\\n\\nin vec4 vColor;\\n#ifdef FLAT_SHADING\\nin vec4 position_commonspace;\\n#endif\\n\\nvoid main(void) {\\n  fragColor = vColor;\\n#ifdef FLAT_SHADING\\n  if (extruded && !isStroke && !picking_uActive) {\\n    vec3 normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\\n    fragColor.rgb = lighting_getLightColor(vColor.rgb, project_uCameraPosition, position_commonspace.xyz, normal);\\n  }\\n#endif\\n  DECKGL_FILTER_COLOR(fragColor, geometry);\\n}\\n\";\n//# sourceMappingURL=column-layer-fragment.glsl.js.map","export const AGGREGATION_OPERATION = {\n  SUM: 1,\n  MEAN: 2,\n  MIN: 3,\n  MAX: 4\n};\n\nfunction sumReducer(accu, cur) {\n  return accu + cur;\n}\n\nfunction maxReducer(accu, cur) {\n  return cur > accu ? cur : accu;\n}\n\nfunction minReducer(accu, cur) {\n  return cur < accu ? cur : accu;\n}\n\nexport function getMean(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? accessor : null;\n  }\n\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(sumReducer, 0) / filtered.length : null;\n}\nexport function getSum(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? pts.length * accessor : null;\n  }\n\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(sumReducer, 0) : null;\n}\nexport function getMax(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? accessor : null;\n  }\n\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(maxReducer, -Infinity) : null;\n}\nexport function getMin(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? accessor : null;\n  }\n\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n  return filtered.length ? filtered.reduce(minReducer, Infinity) : null;\n}\nexport function getValueFunc(aggregation, accessor, context) {\n  const op = AGGREGATION_OPERATION[aggregation] || AGGREGATION_OPERATION.SUM;\n  accessor = wrapAccessor(accessor, context);\n\n  switch (op) {\n    case AGGREGATION_OPERATION.MIN:\n      return pts => getMin(pts, accessor);\n\n    case AGGREGATION_OPERATION.SUM:\n      return pts => getSum(pts, accessor);\n\n    case AGGREGATION_OPERATION.MEAN:\n      return pts => getMean(pts, accessor);\n\n    case AGGREGATION_OPERATION.MAX:\n      return pts => getMax(pts, accessor);\n\n    default:\n      return null;\n  }\n}\n\nfunction wrapAccessor(accessor, context = {}) {\n  if (Number.isFinite(accessor)) {\n    return accessor;\n  }\n\n  return pt => {\n    context.index = pt.index;\n    return accessor(pt.source, context);\n  };\n}\n\nexport function wrapGetValueFunc(getValue, context = {}) {\n  return pts => {\n    context.indices = pts.map(pt => pt.index);\n    return getValue(pts.map(pt => pt.source), context);\n  };\n}\n//# sourceMappingURL=aggregation-operation-utils.js.map","export function filterProps(props, filterKeys) {\n  const filteredProps = {};\n\n  for (const key in props) {\n    if (!filterKeys.includes(key)) {\n      filteredProps[key] = props[key];\n    }\n  }\n\n  return filteredProps;\n}\n//# sourceMappingURL=prop-utils.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, AttributeManager, _compareProps as compareProps } from '@deck.gl/core';\nimport { cssToDeviceRatio } from '@luma.gl/core';\nimport { filterProps } from './utils/prop-utils';\nexport default class AggregationLayer extends CompositeLayer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  initializeAggregationLayer(dimensions) {\n    super.initializeState(this.context);\n    this.setState({\n      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n    const {\n      changeFlags\n    } = opts;\n\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n\n      this.updateShaders(shaders);\n    }\n\n    this._updateAttributes();\n  }\n\n  updateAttributes(changedAttributes) {\n    this.setState({\n      changedAttributes\n    });\n  }\n\n  getAttributes() {\n    return this.getAttributeManager().getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    const {\n      viewport,\n      mousePosition,\n      gl\n    } = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {}\n\n  isAggregationDirty(updateOpts, params = {}) {\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = updateOpts;\n    const {\n      compareAll = false,\n      dimension\n    } = params;\n    const {\n      ignoreProps\n    } = this.state;\n    const {\n      props: dataProps,\n      accessors = []\n    } = dimension;\n    const {\n      updateTriggersChanged\n    } = changeFlags;\n\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: this.constructor._propTypes\n      });\n    }\n\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  isAttributeChanged(name) {\n    const {\n      changedAttributes\n    } = this.state;\n\n    if (!name) {\n      return !isObjectEmpty(changedAttributes);\n    }\n\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n}\n\n_defineProperty(AggregationLayer, \"layerName\", 'AggregationLayer');\n\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n\n  return isEmpty;\n}\n//# sourceMappingURL=aggregation-layer.js.map","import { log } from '@deck.gl/core';\nexport function getScale(domain, range, scaleFunction) {\n  const scale = scaleFunction;\n\n  scale.domain = () => domain;\n\n  scale.range = () => range;\n\n  return scale;\n}\nexport function getQuantizeScale(domain, range) {\n  const scaleFunction = value => quantizeScale(domain, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\nexport function getLinearScale(domain, range) {\n  const scaleFunction = value => linearScale(domain, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\nexport function getQuantileScale(domain, range) {\n  const sortedDomain = domain.sort(ascending);\n  let i = 0;\n  const n = Math.max(1, range.length);\n  const thresholds = new Array(n - 1);\n\n  while (++i < n) {\n    thresholds[i - 1] = threshold(sortedDomain, i / n);\n  }\n\n  const scaleFunction = value => thresholdsScale(thresholds, range, value);\n\n  scaleFunction.thresholds = () => thresholds;\n\n  return getScale(domain, range, scaleFunction);\n}\n\nfunction ascending(a, b) {\n  return a - b;\n}\n\nfunction threshold(domain, fraction) {\n  const domainLength = domain.length;\n\n  if (fraction <= 0 || domainLength < 2) {\n    return domain[0];\n  }\n\n  if (fraction >= 1) {\n    return domain[domainLength - 1];\n  }\n\n  const domainFraction = (domainLength - 1) * fraction;\n  const lowIndex = Math.floor(domainFraction);\n  const low = domain[lowIndex];\n  const high = domain[lowIndex + 1];\n  return low + (high - low) * (domainFraction - lowIndex);\n}\n\nfunction bisectRight(a, x) {\n  let lo = 0;\n  let hi = a.length;\n\n  while (lo < hi) {\n    const mid = lo + hi >>> 1;\n\n    if (ascending(a[mid], x) > 0) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n\n  return lo;\n}\n\nfunction thresholdsScale(thresholds, range, value) {\n  return range[bisectRight(thresholds, value)];\n}\n\nfunction ordinalScale(domain, domainMap, range, value) {\n  const key = \"\".concat(value);\n  let d = domainMap.get(key);\n\n  if (d === undefined) {\n    d = domain.push(value);\n    domainMap.set(key, d);\n  }\n\n  return range[(d - 1) % range.length];\n}\n\nexport function getOrdinalScale(domain, range) {\n  const domainMap = new Map();\n  const uniqueDomain = [];\n\n  for (const d of domain) {\n    const key = \"\".concat(d);\n\n    if (!domainMap.has(key)) {\n      domainMap.set(key, uniqueDomain.push(d));\n    }\n  }\n\n  const scaleFunction = value => ordinalScale(uniqueDomain, domainMap, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\nexport function quantizeScale(domain, range, value) {\n  const domainRange = domain[1] - domain[0];\n\n  if (domainRange <= 0) {\n    log.warn('quantizeScale: invalid domain, returning range[0]')();\n    return range[0];\n  }\n\n  const step = domainRange / range.length;\n  const idx = Math.floor((value - domain[0]) / step);\n  const clampIdx = Math.max(Math.min(idx, range.length - 1), 0);\n  return range[clampIdx];\n}\nexport function linearScale(domain, range, value) {\n  return (value - domain[0]) / (domain[1] - domain[0]) * (range[1] - range[0]) + range[0];\n}\n\nfunction notNullOrUndefined(d) {\n  return d !== undefined && d !== null;\n}\n\nexport function unique(values) {\n  const results = [];\n  values.forEach(v => {\n    if (!results.includes(v) && notNullOrUndefined(v)) {\n      results.push(v);\n    }\n  });\n  return results;\n}\n\nfunction getTruthyValues(data, valueAccessor) {\n  const values = typeof valueAccessor === 'function' ? data.map(valueAccessor) : data;\n  return values.filter(notNullOrUndefined);\n}\n\nexport function getLinearDomain(data, valueAccessor) {\n  const sorted = getTruthyValues(data, valueAccessor).sort();\n  return sorted.length ? [sorted[0], sorted[sorted.length - 1]] : [0, 0];\n}\nexport function getQuantileDomain(data, valueAccessor) {\n  return getTruthyValues(data, valueAccessor);\n}\nexport function getOrdinalDomain(data, valueAccessor) {\n  return unique(getTruthyValues(data, valueAccessor));\n}\nexport function getScaleDomain(scaleType, data, valueAccessor) {\n  switch (scaleType) {\n    case 'quantize':\n    case 'linear':\n      return getLinearDomain(data, valueAccessor);\n\n    case 'quantile':\n      return getQuantileDomain(data, valueAccessor);\n\n    case 'ordinal':\n      return getOrdinalDomain(data, valueAccessor);\n\n    default:\n      return getLinearDomain(data, valueAccessor);\n  }\n}\nexport function clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\nexport function getScaleFunctionByScaleType(scaleType) {\n  switch (scaleType) {\n    case 'quantize':\n      return getQuantizeScale;\n\n    case 'linear':\n      return getLinearScale;\n\n    case 'quantile':\n      return getQuantileScale;\n\n    case 'ordinal':\n      return getOrdinalScale;\n\n    default:\n      return getQuantizeScale;\n  }\n}\n//# sourceMappingURL=scale-utils.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nconst defaultGetValue = points => points.length;\n\nimport { clamp, getQuantileDomain, getOrdinalDomain } from './scale-utils';\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n\nconst defaultGetPoints = bin => bin.points;\n\nconst defaultGetIndex = bin => bin.index;\n\nconst ascending = (a, b) => a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\nexport default class BinSorter {\n  constructor(bins = [], props = defaultProps) {\n    _defineProperty(this, \"maxCount\", void 0);\n\n    _defineProperty(this, \"maxValue\", void 0);\n\n    _defineProperty(this, \"minValue\", void 0);\n\n    _defineProperty(this, \"totalCount\", void 0);\n\n    _defineProperty(this, \"aggregatedBins\", void 0);\n\n    _defineProperty(this, \"sortedBins\", void 0);\n\n    _defineProperty(this, \"binMap\", void 0);\n\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n\n    this._updateMinMaxValues();\n\n    this.binMap = this.getBinMap();\n  }\n\n  getAggregatedBins(bins, props) {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n    const hasFilter = typeof filterData === 'function';\n    const binCount = bins.length;\n    const aggregatedBins = [];\n    let index = 0;\n\n    for (let binIndex = 0; binIndex < binCount; binIndex++) {\n      const bin = bins[binIndex];\n      const points = getPoints(bin);\n      const i = getIndex(bin);\n      const filteredPoints = hasFilter ? points.filter(filterData) : points;\n      bin.filteredPoints = hasFilter ? filteredPoints : null;\n      const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n      if (value !== null && value !== undefined) {\n        aggregatedBins[index] = {\n          i: Number.isFinite(i) ? i : binIndex,\n          value,\n          counts: filteredPoints.length\n        };\n        index++;\n      }\n    }\n\n    return aggregatedBins;\n  }\n\n  _percentileToIndex(percentileRange) {\n    const len = this.sortedBins.length;\n\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n    const lowerIdx = Math.ceil(lower / 100 * (len - 1));\n    const upperIdx = Math.floor(upper / 100 * (len - 1));\n    return [lowerIdx, upperIdx];\n  }\n\n  getBinMap() {\n    const binMap = {};\n\n    for (const bin of this.aggregatedBins) {\n      binMap[bin.i] = bin;\n    }\n\n    return binMap;\n  }\n\n  _updateMinMaxValues() {\n    let maxCount = 0;\n    let maxValue = 0;\n    let minValue = MAX_32_BIT_FLOAT;\n    let totalCount = 0;\n\n    for (const x of this.aggregatedBins) {\n      maxCount = maxCount > x.counts ? maxCount : x.counts;\n      maxValue = maxValue > x.value ? maxValue : x.value;\n      minValue = minValue < x.value ? minValue : x.value;\n      totalCount += x.counts;\n    }\n\n    this.maxCount = maxCount;\n    this.maxValue = maxValue;\n    this.minValue = minValue;\n    this.totalCount = totalCount;\n  }\n\n  getValueRange(percentileRange) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n\n    if (!this.sortedBins.length) {\n      return [];\n    }\n\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n\n    if (!this.sortedBins.length) {\n      return [];\n    }\n\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value);\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n\n}\n//# sourceMappingURL=bin-sorter.js.map","import BinSorter from './bin-sorter';\nimport { getScaleFunctionByScaleType } from './scale-utils';\nimport { getValueFunc, wrapGetValueFunc } from './aggregation-operation-utils';\n\nfunction nop() {}\n\nconst dimensionSteps = ['getBins', 'getDomain', 'getScaleFunc'];\nconst defaultDimensions = [{\n  key: 'fillColor',\n  accessor: 'getFillColor',\n  pickingInfo: 'colorValue',\n  getBins: {\n    triggers: {\n      value: {\n        prop: 'getColorValue',\n        updateTrigger: 'getColorValue'\n      },\n      weight: {\n        prop: 'getColorWeight',\n        updateTrigger: 'getColorWeight'\n      },\n      aggregation: {\n        prop: 'colorAggregation'\n      },\n      filterData: {\n        prop: '_filterData',\n        updateTrigger: '_filterData'\n      }\n    }\n  },\n  getDomain: {\n    triggers: {\n      lowerPercentile: {\n        prop: 'lowerPercentile'\n      },\n      upperPercentile: {\n        prop: 'upperPercentile'\n      },\n      scaleType: {\n        prop: 'colorScaleType'\n      }\n    }\n  },\n  getScaleFunc: {\n    triggers: {\n      domain: {\n        prop: 'colorDomain'\n      },\n      range: {\n        prop: 'colorRange'\n      }\n    },\n    onSet: {\n      props: 'onSetColorDomain'\n    }\n  },\n  nullValue: [0, 0, 0, 0]\n}, {\n  key: 'elevation',\n  accessor: 'getElevation',\n  pickingInfo: 'elevationValue',\n  getBins: {\n    triggers: {\n      value: {\n        prop: 'getElevationValue',\n        updateTrigger: 'getElevationValue'\n      },\n      weight: {\n        prop: 'getElevationWeight',\n        updateTrigger: 'getElevationWeight'\n      },\n      aggregation: {\n        prop: 'elevationAggregation'\n      },\n      filterData: {\n        prop: '_filterData',\n        updateTrigger: '_filterData'\n      }\n    }\n  },\n  getDomain: {\n    triggers: {\n      lowerPercentile: {\n        prop: 'elevationLowerPercentile'\n      },\n      upperPercentile: {\n        prop: 'elevationUpperPercentile'\n      },\n      scaleType: {\n        prop: 'elevationScaleType'\n      }\n    }\n  },\n  getScaleFunc: {\n    triggers: {\n      domain: {\n        prop: 'elevationDomain'\n      },\n      range: {\n        prop: 'elevationRange'\n      }\n    },\n    onSet: {\n      props: 'onSetElevationDomain'\n    }\n  },\n  nullValue: -1\n}];\n\nconst defaultGetCellSize = props => props.cellSize;\n\nexport default class CPUAggregator {\n  constructor(opts) {\n    this.state = {\n      layerData: {},\n      dimensions: {}\n    };\n    this.changeFlags = {};\n    this.dimensionUpdaters = {};\n    this._getCellSize = opts.getCellSize || defaultGetCellSize;\n    this._getAggregator = opts.getAggregator;\n\n    this._addDimension(opts.dimensions || defaultDimensions);\n  }\n\n  static defaultDimensions() {\n    return defaultDimensions;\n  }\n\n  updateState(opts, aggregationParams) {\n    const {\n      oldProps,\n      props,\n      changeFlags\n    } = opts;\n    this.updateGetValueFuncs(oldProps, props, changeFlags);\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n    let aggregationDirty = false;\n\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      this.getAggregatedData(props, aggregationParams);\n      aggregationDirty = true;\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props, changeFlags) || [];\n      dimensionChanges.forEach(f => typeof f === 'function' && f());\n      aggregationDirty = true;\n    }\n\n    this.setState({\n      aggregationDirty\n    });\n    return this.state;\n  }\n\n  setState(updateObject) {\n    this.state = { ...this.state,\n      ...updateObject\n    };\n  }\n\n  setDimensionState(key, updateObject) {\n    this.setState({\n      dimensions: { ...this.state.dimensions,\n        [key]: { ...this.state.dimensions[key],\n          ...updateObject\n        }\n      }\n    });\n  }\n\n  normalizeResult(result = {}) {\n    if (result.hexagons) {\n      return {\n        data: result.hexagons,\n        ...result\n      };\n    } else if (result.layerData) {\n      return {\n        data: result.layerData,\n        ...result\n      };\n    }\n\n    return result;\n  }\n\n  getAggregatedData(props, aggregationParams) {\n    const aggregator = this._getAggregator(props);\n\n    const result = aggregator(props, aggregationParams);\n    this.setState({\n      layerData: this.normalizeResult(result)\n    });\n    this.changeFlags = {\n      layerData: true\n    };\n    this.getSortedBins(props);\n  }\n\n  updateGetValueFuncs(oldProps, props, changeFlags) {\n    for (const key in this.dimensionUpdaters) {\n      const {\n        value,\n        weight,\n        aggregation\n      } = this.dimensionUpdaters[key].getBins.triggers;\n      let getValue = props[value.prop];\n      const getValueChanged = this.needUpdateDimensionStep(this.dimensionUpdaters[key].getBins, oldProps, props, changeFlags);\n\n      if (getValueChanged) {\n        if (getValue) {\n          getValue = wrapGetValueFunc(getValue, {\n            data: props.data\n          });\n        } else {\n          getValue = getValueFunc(props[aggregation.prop], props[weight.prop], {\n            data: props.data\n          });\n        }\n      }\n\n      if (getValue) {\n        this.setDimensionState(key, {\n          getValue\n        });\n      }\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return this._getCellSize(oldProps) !== this._getCellSize(props) || this._getAggregator(oldProps) !== this._getAggregator(props) || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition);\n  }\n\n  addDimension(dimensions) {\n    this._addDimension(dimensions);\n  }\n\n  _addDimension(dimensions = []) {\n    dimensions.forEach(dimension => {\n      const {\n        key\n      } = dimension;\n      this.dimensionUpdaters[key] = this.getDimensionUpdaters(dimension);\n      this.state.dimensions[key] = {\n        getValue: null,\n        domain: null,\n        sortedBins: null,\n        scaleFunc: nop\n      };\n    });\n  }\n\n  getDimensionUpdaters({\n    key,\n    accessor,\n    pickingInfo,\n    getBins,\n    getDomain,\n    getScaleFunc,\n    nullValue\n  }) {\n    return {\n      key,\n      accessor,\n      pickingInfo,\n      getBins: {\n        updater: this.getDimensionSortedBins,\n        ...getBins\n      },\n      getDomain: {\n        updater: this.getDimensionValueDomain,\n        ...getDomain\n      },\n      getScaleFunc: {\n        updater: this.getDimensionScale,\n        ...getScaleFunc\n      },\n      attributeAccessor: this.getSubLayerDimensionAttribute(key, nullValue)\n    };\n  }\n\n  needUpdateDimensionStep(dimensionStep, oldProps, props, changeFlags) {\n    return Object.values(dimensionStep.triggers).some(item => {\n      if (item.updateTrigger) {\n        return changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged[item.updateTrigger]);\n      }\n\n      return oldProps[item.prop] !== props[item.prop];\n    });\n  }\n\n  getDimensionChanges(oldProps, props, changeFlags) {\n    const updaters = [];\n\n    for (const key in this.dimensionUpdaters) {\n      const needUpdate = dimensionSteps.find(step => this.needUpdateDimensionStep(this.dimensionUpdaters[key][step], oldProps, props, changeFlags));\n\n      if (needUpdate) {\n        updaters.push(this.dimensionUpdaters[key][needUpdate].updater.bind(this, props, this.dimensionUpdaters[key]));\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getUpdateTriggers(props) {\n    const _updateTriggers = props.updateTriggers || {};\n\n    const updateTriggers = {};\n\n    for (const key in this.dimensionUpdaters) {\n      const {\n        accessor\n      } = this.dimensionUpdaters[key];\n      updateTriggers[accessor] = {};\n      dimensionSteps.forEach(step => {\n        Object.values(this.dimensionUpdaters[key][step].triggers).forEach(({\n          prop,\n          updateTrigger\n        }) => {\n          if (updateTrigger) {\n            const fromProp = _updateTriggers[updateTrigger];\n\n            if (typeof fromProp === 'object' && !Array.isArray(fromProp)) {\n              Object.assign(updateTriggers[accessor], fromProp);\n            } else if (fromProp !== undefined) {\n              updateTriggers[accessor][prop] = fromProp;\n            }\n          } else {\n            updateTriggers[accessor][prop] = props[prop];\n          }\n        });\n      });\n    }\n\n    return updateTriggers;\n  }\n\n  getSortedBins(props) {\n    for (const key in this.dimensionUpdaters) {\n      this.getDimensionSortedBins(props, this.dimensionUpdaters[key]);\n    }\n  }\n\n  getDimensionSortedBins(props, dimensionUpdater) {\n    const {\n      key\n    } = dimensionUpdater;\n    const {\n      getValue\n    } = this.state.dimensions[key];\n    const sortedBins = new BinSorter(this.state.layerData.data || [], {\n      getValue,\n      filterData: props._filterData\n    });\n    this.setDimensionState(key, {\n      sortedBins\n    });\n    this.getDimensionValueDomain(props, dimensionUpdater);\n  }\n\n  getDimensionValueDomain(props, dimensionUpdater) {\n    const {\n      getDomain,\n      key\n    } = dimensionUpdater;\n    const {\n      triggers: {\n        lowerPercentile,\n        upperPercentile,\n        scaleType\n      }\n    } = getDomain;\n    const valueDomain = this.state.dimensions[key].sortedBins.getValueDomainByScale(props[scaleType.prop], [props[lowerPercentile.prop], props[upperPercentile.prop]]);\n    this.setDimensionState(key, {\n      valueDomain\n    });\n    this.getDimensionScale(props, dimensionUpdater);\n  }\n\n  getDimensionScale(props, dimensionUpdater) {\n    const {\n      key,\n      getScaleFunc,\n      getDomain\n    } = dimensionUpdater;\n    const {\n      domain,\n      range\n    } = getScaleFunc.triggers;\n    const {\n      scaleType\n    } = getDomain.triggers;\n    const {\n      onSet\n    } = getScaleFunc;\n    const dimensionRange = props[range.prop];\n    const dimensionDomain = props[domain.prop] || this.state.dimensions[key].valueDomain;\n    const getScaleFunction = getScaleFunctionByScaleType(scaleType && props[scaleType.prop]);\n    const scaleFunc = getScaleFunction(dimensionDomain, dimensionRange);\n\n    if (typeof onSet === 'object' && typeof props[onSet.props] === 'function') {\n      props[onSet.props](scaleFunc.domain());\n    }\n\n    this.setDimensionState(key, {\n      scaleFunc\n    });\n  }\n\n  getSubLayerDimensionAttribute(key, nullValue) {\n    return cell => {\n      const {\n        sortedBins,\n        scaleFunc\n      } = this.state.dimensions[key];\n      const bin = sortedBins.binMap[cell.index];\n\n      if (bin && bin.counts === 0) {\n        return nullValue;\n      }\n\n      const cv = bin && bin.value;\n      const domain = scaleFunc.domain();\n      const isValueInDomain = cv >= domain[0] && cv <= domain[domain.length - 1];\n      return isValueInDomain ? scaleFunc(cv) : nullValue;\n    };\n  }\n\n  getSubLayerAccessors(props) {\n    const accessors = {};\n\n    for (const key in this.dimensionUpdaters) {\n      const {\n        accessor\n      } = this.dimensionUpdaters[key];\n      accessors[accessor] = this.getSubLayerDimensionAttribute(props, key);\n    }\n\n    return accessors;\n  }\n\n  getPickingInfo({\n    info\n  }) {\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      const cell = this.state.layerData.data[info.index];\n      const binInfo = {};\n\n      for (const key in this.dimensionUpdaters) {\n        const {\n          pickingInfo\n        } = this.dimensionUpdaters[key];\n        const {\n          sortedBins\n        } = this.state.dimensions[key];\n        const value = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;\n        binInfo[pickingInfo] = value;\n      }\n\n      object = Object.assign(binInfo, cell, {\n        points: cell.filteredPoints || cell.points\n      });\n    }\n\n    info.picked = Boolean(object);\n    info.object = object;\n    return info;\n  }\n\n  getAccessor(dimensionKey) {\n    if (!this.dimensionUpdaters.hasOwnProperty(dimensionKey)) {\n      return nop;\n    }\n\n    return this.dimensionUpdaters[dimensionKey].attributeAccessor;\n  }\n\n}\n//# sourceMappingURL=cpu-aggregator.js.map","var thirdPi = Math.PI / 3,\n    angles = [0, thirdPi, 2 * thirdPi, 3 * thirdPi, 4 * thirdPi, 5 * thirdPi];\n\nfunction pointX(d) {\n  return d[0];\n}\n\nfunction pointY(d) {\n  return d[1];\n}\n\nexport default function() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1,\n      x = pointX,\n      y = pointY,\n      r,\n      dx,\n      dy;\n\n  function hexbin(points) {\n    var binsById = {}, bins = [], i, n = points.length;\n\n    for (i = 0; i < n; ++i) {\n      if (isNaN(px = +x.call(null, point = points[i], i, points))\n          || isNaN(py = +y.call(null, point, i, points))) continue;\n\n      var point,\n          px,\n          py,\n          pj = Math.round(py = py / dy),\n          pi = Math.round(px = px / dx - (pj & 1) / 2),\n          py1 = py - pj;\n\n      if (Math.abs(py1) * 3 > 1) {\n        var px1 = px - pi,\n            pi2 = pi + (px < pi ? -1 : 1) / 2,\n            pj2 = pj + (py < pj ? -1 : 1),\n            px2 = px - pi2,\n            py2 = py - pj2;\n        if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;\n      }\n\n      var id = pi + \"-\" + pj, bin = binsById[id];\n      if (bin) bin.push(point);\n      else {\n        bins.push(bin = binsById[id] = [point]);\n        bin.x = (pi + (pj & 1) / 2) * dx;\n        bin.y = pj * dy;\n      }\n    }\n\n    return bins;\n  }\n\n  function hexagon(radius) {\n    var x0 = 0, y0 = 0;\n    return angles.map(function(angle) {\n      var x1 = Math.sin(angle) * radius,\n          y1 = -Math.cos(angle) * radius,\n          dx = x1 - x0,\n          dy = y1 - y0;\n      x0 = x1, y0 = y1;\n      return [dx, dy];\n    });\n  }\n\n  hexbin.hexagon = function(radius) {\n    return \"m\" + hexagon(radius == null ? r : +radius).join(\"l\") + \"z\";\n  };\n\n  hexbin.centers = function() {\n    var centers = [],\n        j = Math.round(y0 / dy),\n        i = Math.round(x0 / dx);\n    for (var y = j * dy; y < y1 + r; y += dy, ++j) {\n      for (var x = i * dx + (j & 1) * dx / 2; x < x1 + dx / 2; x += dx) {\n        centers.push([x, y]);\n      }\n    }\n    return centers;\n  };\n\n  hexbin.mesh = function() {\n    var fragment = hexagon(r).slice(0, 4).join(\"l\");\n    return hexbin.centers().map(function(p) { return \"M\" + p + \"m\" + fragment; }).join(\"\");\n  };\n\n  hexbin.x = function(_) {\n    return arguments.length ? (x = _, hexbin) : x;\n  };\n\n  hexbin.y = function(_) {\n    return arguments.length ? (y = _, hexbin) : y;\n  };\n\n  hexbin.radius = function(_) {\n    return arguments.length ? (r = +_, dx = r * 2 * Math.sin(thirdPi), dy = r * 1.5, hexbin) : r;\n  };\n\n  hexbin.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], hexbin) : [x1 - x0, y1 - y0];\n  };\n\n  hexbin.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], hexbin) : [[x0, y0], [x1, y1]];\n  };\n\n  return hexbin.radius(1);\n}\n","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { log } from '@deck.gl/core';\nimport { ColumnLayer } from '@deck.gl/layers';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { pointToHexbin } from './hexagon-aggregator';\nimport CPUAggregator from '../utils/cpu-aggregator';\nimport AggregationLayer from '../aggregation-layer';\n\nfunction nop() {}\n\nconst defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: null\n  },\n  getColorWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  colorAggregation: 'SUM',\n  lowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  upperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  colorScaleType: 'quantize',\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: null\n  },\n  getElevationWeight: {\n    type: 'accessor',\n    value: 1\n  },\n  elevationAggregation: 'SUM',\n  elevationLowerPercentile: {\n    type: 'number',\n    value: 0,\n    min: 0,\n    max: 100\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    value: 100,\n    min: 0,\n    max: 100\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  elevationScaleType: 'linear',\n  onSetElevationDomain: nop,\n  radius: {\n    type: 'number',\n    value: 1000,\n    min: 1\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  material: true,\n  _filterData: {\n    type: 'function',\n    value: null,\n    optional: true\n  }\n};\nexport default class HexagonLayer extends AggregationLayer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  initializeState() {\n    const cpuAggregator = new CPUAggregator({\n      getAggregator: props => props.hexagonAggregator,\n      getCellSize: props => props.radius\n    });\n    this.state = {\n      cpuAggregator,\n      aggregatorState: cpuAggregator.state,\n      vertices: null\n    };\n    const attributeManager = this.getAttributeManager();\n    attributeManager.add({\n      positions: {\n        size: 3,\n        type: 5130,\n        accessor: 'getPosition'\n      }\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.propsOrDataChanged) {\n      const aggregatorState = this.state.cpuAggregator.updateState(opts, {\n        viewport: this.context.viewport,\n        attributes: this.getAttributes()\n      });\n\n      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {\n        const {\n          hexagonVertices\n        } = aggregatorState.layerData || {};\n        this.setState({\n          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)\n        });\n      }\n\n      this.setState({\n        aggregatorState\n      });\n    }\n  }\n\n  convertLatLngToMeterOffset(hexagonVertices) {\n    const {\n      viewport\n    } = this.context;\n\n    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {\n      const vertex0 = hexagonVertices[0];\n      const vertex3 = hexagonVertices[3];\n      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];\n      const centroidFlat = viewport.projectFlat(centroid);\n      const {\n        metersPerUnit\n      } = viewport.getDistanceScales(centroid);\n      const vertices = hexagonVertices.map(vt => {\n        const vtFlat = viewport.projectFlat(vt);\n        return [(vtFlat[0] - centroidFlat[0]) * metersPerUnit[0], (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]];\n      });\n      return vertices;\n    }\n\n    log.error('HexagonLayer: hexagonVertices needs to be an array of 6 points')();\n    return null;\n  }\n\n  getPickingInfo({\n    info\n  }) {\n    return this.state.cpuAggregator.getPickingInfo({\n      info\n    });\n  }\n\n  _onGetSublayerColor(cell) {\n    return this.state.cpuAggregator.getAccessor('fillColor')(cell);\n  }\n\n  _onGetSublayerElevation(cell) {\n    return this.state.cpuAggregator.getAccessor('elevation')(cell);\n  }\n\n  _getSublayerUpdateTriggers() {\n    return this.state.cpuAggregator.getUpdateTriggers(this.props);\n  }\n\n  renderLayers() {\n    const {\n      elevationScale,\n      extruded,\n      coverage,\n      material,\n      transitions\n    } = this.props;\n    const {\n      aggregatorState,\n      vertices\n    } = this.state;\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n    const updateTriggers = this._getSublayerUpdateTriggers();\n\n    const geometry = vertices ? {\n      vertices,\n      radius: 1\n    } : {\n      radius: aggregatorState.layerData.radiusCommon || 1,\n      radiusUnits: 'common',\n      angle: 90\n    };\n    return new SubLayerClass({ ...geometry,\n      diskResolution: 6,\n      elevationScale,\n      extruded,\n      coverage,\n      material,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      getElevation: this._onGetSublayerElevation.bind(this),\n      transitions: transitions && {\n        getFillColor: transitions.getColorValue || transitions.getColorWeight,\n        getElevation: transitions.getElevationValue || transitions.getElevationWeight\n      }\n    }, this.getSubLayerProps({\n      id: 'hexagon-cell',\n      updateTriggers\n    }), {\n      data: aggregatorState.layerData.data\n    });\n  }\n\n}\n\n_defineProperty(HexagonLayer, \"layerName\", 'HexagonLayer');\n\n_defineProperty(HexagonLayer, \"defaultProps\", defaultProps);\n//# sourceMappingURL=hexagon-layer.js.map","export const defaultColorRange = [[255, 255, 178], [254, 217, 118], [254, 178, 76], [253, 141, 60], [240, 59, 32], [189, 0, 38]];\nexport function colorRangeToFlatArray(colorRange, normalize = false, ArrayType = Float32Array) {\n  let flatArray;\n\n  if (Number.isFinite(colorRange[0])) {\n    flatArray = new ArrayType(colorRange);\n  } else {\n    flatArray = new ArrayType(colorRange.length * 4);\n    let index = 0;\n\n    for (let i = 0; i < colorRange.length; i++) {\n      const color = colorRange[i];\n      flatArray[index++] = color[0];\n      flatArray[index++] = color[1];\n      flatArray[index++] = color[2];\n      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n    }\n  }\n\n  if (normalize) {\n    for (let i = 0; i < flatArray.length; i++) {\n      flatArray[i] /= 255;\n    }\n  }\n\n  return flatArray;\n}\n//# sourceMappingURL=color-utils.js.map","import { hexbin } from 'd3-hexbin';\nimport { createIterable, log } from '@deck.gl/core';\nexport function pointToHexbin(props, aggregationParams) {\n  const {\n    data,\n    radius\n  } = props;\n  const {\n    viewport,\n    attributes\n  } = aggregationParams;\n  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;\n  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);\n  const screenPoints = [];\n  const {\n    iterable,\n    objectInfo\n  } = createIterable(data);\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n\n  for (const object of iterable) {\n    objectInfo.index++;\n    const posIndex = objectInfo.index * size;\n    const position = [positions[posIndex], positions[posIndex + 1]];\n    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);\n\n    if (arrayIsFinite) {\n      screenPoints.push({\n        screenCoord: viewport.projectFlat(position),\n        source: object,\n        index: objectInfo.index\n      });\n    } else {\n      log.warn('HexagonLayer: invalid position')();\n    }\n  }\n\n  const newHexbin = hexbin().radius(radiusCommon).x(d => d.screenCoord[0]).y(d => d.screenCoord[1]);\n  const hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map((hex, index) => ({\n      position: viewport.unprojectFlat([hex.x, hex.y]),\n      points: hex,\n      index\n    })),\n    radiusCommon\n  };\n}\nexport function getPointsCenter(data, aggregationParams) {\n  const {\n    attributes\n  } = aggregationParams;\n  const positions = attributes.positions.value;\n  const {\n    size\n  } = attributes.positions.getAccessor();\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let i;\n\n  for (i = 0; i < size * data.length; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);\n\n    if (arrayIsFinite) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  return [minX, minY, maxX, maxY].every(Number.isFinite) ? [(minX + maxX) / 2, (minY + maxY) / 2] : null;\n}\nexport function getRadiusInCommon(radius, viewport, center) {\n  const {\n    unitsPerMeter\n  } = viewport.getDistanceScales(center);\n  return radius * unitsPerMeter[0];\n}\n//# sourceMappingURL=hexagon-aggregator.js.map","import React, { useState, useMemo, useEffect } from 'react'\r\nimport DeckGL from '@deck.gl/react'\r\nimport { StaticMap, InteractiveMap } from 'react-map-gl'\r\nimport { ArcLayer } from '@deck.gl/layers'\r\nimport { HexagonLayer } from '@deck.gl/aggregation-layers'\r\nimport colormap from 'colormap'\r\n\r\nimport globalStore from '@/store'\r\nimport { MAPBOX_TOKEN, REACT_VIEW_HANDLES } from '@/Globals'\r\n\r\nconst material = {\r\n  ambient: 0.64,\r\n  diffuse: 0.6,\r\n  shininess: 32,\r\n  specularColor: [51, 51, 51],\r\n}\r\n\r\nconst INITIAL_VIEW = {\r\n  zoom: 10,\r\n  longitude: 13.45,\r\n  latitude: 52.5,\r\n  pitch: 0,\r\n  bearing: 0,\r\n}\r\n\r\n// LAYER --------------------------------------------------------\r\nexport default function Layer({\r\n  viewId = 0,\r\n  colorRamp = 'chlorophyll',\r\n  coverage = 0.65,\r\n  dark = false,\r\n  data = { raw: new Float32Array(0), length: 0 },\r\n  extrude = true,\r\n  highlights = [],\r\n  mapIsIndependent = false,\r\n  maxHeight = 200,\r\n  metric = 'Count',\r\n  radius = 100,\r\n  selectedHexStats = { rows: 0, numHexagons: 0, selectedHexagonIds: [] },\r\n  upperPercentile = 100,\r\n  onClick = {} as any,\r\n}) {\r\n  // manage SimWrapper centralized viewState - for linked maps\r\n  const [viewState, setViewState] = useState(INITIAL_VIEW)\r\n\r\n  REACT_VIEW_HANDLES[viewId] = (view: any) => {\r\n    if (view) {\r\n      setViewState(view)\r\n    } else {\r\n      setViewState(globalStore.state.viewState)\r\n    }\r\n  }\r\n\r\n  function handleViewState(view: any) {\r\n    if (!view.latitude) return\r\n\r\n    if (!view.center) view.center = [0, 0]\r\n    view.center[0] = view.longitude\r\n    view.center[1] = view.latitude\r\n    setViewState(view)\r\n\r\n    if (!mapIsIndependent) globalStore.commit('setMapCamera', view)\r\n  }\r\n\r\n  const colors = colormap({\r\n    colormap: colorRamp,\r\n    nshades: 10,\r\n    format: 'rba',\r\n    alpha: 1,\r\n  }).map((c: number[]) => [c[0], c[1], c[2]])\r\n\r\n  function getTooltip({ object }: any) {\r\n    if (!object || !object.position || !object.position.length) {\r\n      return null\r\n    }\r\n\r\n    const lat = object.position[1]\r\n    const lng = object.position[0]\r\n    const count = object.points.length\r\n\r\n    return {\r\n      html: `\\\r\n        <b>${highlights.length ? 'Count' : metric}: ${count} </b><br/>\r\n        ${Number.isFinite(lat) ? lat.toFixed(4) : ''} / ${\r\n        Number.isFinite(lng) ? lng.toFixed(4) : ''\r\n      }\r\n      `,\r\n      style: dark\r\n        ? { color: '#ccc', backgroundColor: '#2a3c4f' }\r\n        : { color: '#223', backgroundColor: 'white' },\r\n    }\r\n  }\r\n\r\n  function handleClick(target: any, event: any) {\r\n    onClick(target, event)\r\n  }\r\n\r\n  // is data filtered or not?\r\n  let rows = null\r\n  if (highlights.length) {\r\n    rows = highlights.map(row => row[1])\r\n  } else if (!data.length) {\r\n    rows = null\r\n  } else {\r\n    rows = {\r\n      length: data.length,\r\n      attributes: {\r\n        getPosition: { value: data.raw, size: 2 },\r\n      },\r\n    }\r\n  }\r\n\r\n  const layers = [\r\n    new ArcLayer({\r\n      id: 'arc-layer',\r\n      data: highlights,\r\n      getSourcePosition: (d: any) => d[0],\r\n      getTargetPosition: (d: any) => d[1],\r\n      pickable: false,\r\n      opacity: 0.4,\r\n      getHeight: 0,\r\n      getWidth: 1,\r\n      getSourceColor: dark ? [144, 96, 128] : [192, 192, 240],\r\n      getTargetColor: dark ? [144, 96, 128] : [192, 192, 240],\r\n    }),\r\n    new HexagonLayer({\r\n      id: 'hexlayer',\r\n      data: rows,\r\n      getPosition: highlights.length ? (d: any) => d : null,\r\n      colorRange: dark ? colors.slice(1) : colors.reverse().slice(1),\r\n      coverage,\r\n      autoHighlight: true,\r\n      elevationRange: [0, maxHeight],\r\n      elevationScale: data && data.length ? 50 : 0,\r\n      extruded: extrude,\r\n      selectedHexStats,\r\n      // hexagonAggregator: pointToHexbin,\r\n      pickable: true,\r\n      opacity: 0.7, // dark && highlights.length ? 0.6 : 0.8,\r\n      radius,\r\n      upperPercentile,\r\n      material,\r\n      transitions: {\r\n        elevationScale: { type: 'interpolation', duration: 1000 },\r\n        opacity: { type: 'interpolation', duration: 200 },\r\n      },\r\n    }),\r\n  ]\r\n\r\n  return (\r\n    <DeckGL\r\n      layers={layers}\r\n      controller={true}\r\n      useDevicePixels={false}\r\n      viewState={viewState}\r\n      getTooltip={getTooltip}\r\n      onClick={handleClick}\r\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\r\n    >\r\n      {\r\n        /*\r\n        // @ts-ignore */\r\n        <StaticMap\r\n          mapStyle={globalStore.getters.mapStyle}\r\n          preventStyleDiffing={true}\r\n          mapboxApiAccessToken={MAPBOX_TOKEN}\r\n        />\r\n      }\r\n    </DeckGL>\r\n  )\r\n}\r\n","<template lang=\"pug\">\r\n.xy-hexagons(:class=\"{'hide-thumbnail': !thumbnail}\" oncontextmenu=\"return false\" :id=\"`id-${id}`\")\r\n\r\n  xy-hex-deck-map.hex-layer(\r\n    v-if=\"!thumbnail && isLoaded\"\r\n    v-bind=\"mapProps\"\r\n  )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\")\r\n  drawing-tool.drawing-tool(v-if=\"!thumbnail\")\r\n\r\n  .left-side(v-if=\"isLoaded && !thumbnail && vizDetails.title\")\r\n    collapsible-panel(direction=\"left\" :locked=\"true\")\r\n      .panel-items(v-if=\"hexStats\" style=\"color: #c0f;\")\r\n        p.big(style=\"margin-top: 2rem;\") {{ $t('selection') }}:\r\n        h3(style=\"margin-top: -1rem;\") {{ $t('areas') }}: {{ hexStats.numHexagons }}, {{ $t('count') }}: {{ hexStats.rows }}\r\n        button.button(style=\"color: #c0f; border-color: #c0f\" @click=\"handleShowSelectionButton\") {{ $t('showDetails') }}\r\n\r\n  .control-panel(v-if=\"isLoaded && !thumbnail && !myState.statusMessage\")\r\n        //- :class=\"{'is-dashboard': config !== undefined }\"\r\n\r\n        .panel-item(v-for=\"group in Object.keys(aggregations)\" :key=\"group\")\r\n          p.speed-label {{ group }}\r\n          button.button.is-small.aggregation-button(\r\n            v-for=\"element,i in aggregations[group]\"\r\n            :key=\"i\"\r\n            :style=\"{'margin-bottom': '0.25rem', 'color': activeAggregation===`${group}~${i}` ? 'white' : buttonColors[i], 'border': `1px solid ${buttonColors[i]}`, 'border-right': `0.4rem solid ${buttonColors[i]}`,'border-radius': '4px', 'background-color': activeAggregation===`${group}~${i}` ? buttonColors[i] : $store.state.isDarkMode ? '#333':'white'}\"\r\n            @click=\"handleOrigDest(group,i)\") {{ element.title }}\r\n\r\n        .panel-item.right\r\n          p.speed-label {{ $t('maxHeight') }}: {{ vizDetails.maxHeight }}\r\n          vue-slider.speed-slider(v-model=\"vizDetails.maxHeight\"\r\n            :min=\"0\" :max=\"250\" :interval=\"5\"\r\n            :duration=\"0\" :dotSize=\"12\"\r\n            tooltip=\"none\"\r\n          )\r\n\r\n          p.speed-label Hex Radius: {{ vizDetails.radius }}\r\n          vue-slider.speed-slider(v-model=\"vizDetails.radius\"\r\n            :min=\"50\" :max=\"1000\" :interval=\"5\"\r\n            :duration=\"0\" :dotSize=\"12\"\r\n            tooltip=\"none\"\r\n          )\r\n\r\n  .message(v-if=\"!thumbnail && myState.statusMessage\")\r\n    p.status-message {{ myState.statusMessage }}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {\r\n      loading: 'Loading data...',\r\n      sorting: 'Sorting into bins...',\r\n      aggregate: 'Summary',\r\n      maxHeight: '3D Height',\r\n      showDetails: 'Show Details',\r\n      selection: 'Selection',\r\n      areas: 'Areas',\r\n      count: 'Count',\r\n    },\r\n    de: {\r\n      loading: 'Dateien laden...',\r\n      sorting: 'Sortieren...',\r\n      aggregate: 'Daten',\r\n      maxHeight: '3-D Höhe',\r\n      showDetails: 'Details anzeigen',\r\n      selection: 'Ausgewählt',\r\n      areas: 'Orte',\r\n      count: 'Anzahl',\r\n    },\r\n  },\r\n}\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport VueSlider from 'vue-slider-component'\r\nimport { ToggleButton } from 'vue-js-toggle-button'\r\nimport YAML from 'yaml'\r\n\r\nimport util from '@/js/util'\r\nimport globalStore from '@/store'\r\nimport { REACT_VIEW_HANDLES } from '@/Globals'\r\n\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\n\r\nimport CSVParserWorker from './CsvGzipParser.worker.ts?worker'\r\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\r\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\nimport XyHexDeckMap from './XyHexLayer'\r\n\r\nimport {\r\n  ColorScheme,\r\n  FileSystem,\r\n  LegendItem,\r\n  LegendItemType,\r\n  FileSystemConfig,\r\n  VisualizationPlugin,\r\n  Status,\r\n} from '@/Globals'\r\n\r\ninterface Aggregations {\r\n  [heading: string]: {\r\n    title: string\r\n    x: string\r\n    y: string\r\n  }[]\r\n}\r\n\r\ninterface VizDetail {\r\n  title: string\r\n  description?: string\r\n  file: string\r\n  projection: any\r\n  thumbnail?: string\r\n  elements?: string\r\n  aggregations: Aggregations\r\n  radius: number\r\n  maxHeight: number\r\n  center: any\r\n  zoom: number\r\n  mapIsIndependent?: boolean\r\n}\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'XyHexagonsPlugin',\r\n  i18n,\r\n  components: {\r\n    CollapsiblePanel,\r\n    DrawingTool,\r\n    XyHexDeckMap,\r\n    VueSlider,\r\n    ToggleButton,\r\n    ZoomButtons,\r\n  },\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    yamlConfig: String,\r\n    config: Object,\r\n    thumbnail: Boolean,\r\n  },\r\n  data: () => {\r\n    const colorRamps = ['bathymetry', 'par', 'chlorophyll', 'magma']\r\n    return {\r\n      id: `id-${Math.floor(1e12 * Math.random())}` as any,\r\n      standaloneYAMLconfig: {\r\n        title: '',\r\n        description: '',\r\n        file: '',\r\n        projection: '',\r\n        thumbnail: '',\r\n        aggregations: {},\r\n        radius: 250,\r\n        maxHeight: 0,\r\n        center: null as any,\r\n        zoom: 9,\r\n        mapIsIndependent: false,\r\n      },\r\n      YAMLrequirementsXY: { file: '', aggregations: {} },\r\n      colorRamps,\r\n      buttonColors: ['#5E8AAE', '#BF7230', '#269367', '#9C439C'],\r\n      aggregations: {} as Aggregations,\r\n      columnLookup: [] as number[],\r\n      gzipWorker: null as Worker | null,\r\n      colorRamp: colorRamps[0],\r\n      globalState: globalStore.state,\r\n      vizDetails: {\r\n        title: '',\r\n        description: '',\r\n        file: '',\r\n        projection: '',\r\n        thumbnail: '',\r\n        aggregations: {},\r\n        radius: 250,\r\n        maxHeight: 0,\r\n        center: null as any,\r\n        zoom: 9,\r\n      } as VizDetail,\r\n      myState: {\r\n        statusMessage: '',\r\n        subfolder: '',\r\n        yamlConfig: '',\r\n        thumbnail: false,\r\n      },\r\n      rowCache: {} as {\r\n        [id: string]: { raw: Float32Array; length: number; coordColumns: number[] }\r\n      },\r\n      requests: { raw: new Float32Array(0), length: 0 } as { raw: Float32Array; length: number },\r\n      highlightedTrips: [] as any[],\r\n      searchTerm: '',\r\n      searchEnabled: false,\r\n      isLoaded: false,\r\n      activeAggregation: '',\r\n      isHighlightingZone: false,\r\n      multiSelectedHexagons: {} as { [index: string]: any[] },\r\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\r\n      hexStats: null as null | {\r\n        rows: number\r\n        numHexagons: number\r\n        selectedHexagonIds: any[]\r\n      },\r\n      resizer: null as ResizeObserver | null,\r\n    }\r\n  },\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    urlThumbnail(): any {\r\n      return this.thumbnailUrl\r\n    },\r\n\r\n    buttonLabel(): string {\r\n      const [group, offset] = this.activeAggregation.split('~') as any[]\r\n      return this.aggregations[group][offset].title\r\n    },\r\n    extrudeTowers(): boolean {\r\n      return this.vizDetails.maxHeight > 0\r\n    },\r\n\r\n    mapProps(): any {\r\n      return {\r\n        viewId: this.id,\r\n        colorRamp: this.colorRamp,\r\n        coverage: 0.65,\r\n        dark: this.$store.state.isDarkMode,\r\n        data: this.requests,\r\n        extrude: this.extrudeTowers,\r\n        highlights: this.highlightedTrips,\r\n        mapIsIndependent: this.vizDetails.mapIsIndependent,\r\n        maxHeight: this.vizDetails.maxHeight,\r\n        metric: this.buttonLabel,\r\n        radius: this.vizDetails.radius,\r\n        selectedHexStats: this.hexStats,\r\n        upperPercentile: 100,\r\n        onClick: this.handleClick,\r\n      }\r\n    },\r\n    textColor(): any {\r\n      const lightmode = {\r\n        text: '#3498db',\r\n        bg: '#eeeef480',\r\n      }\r\n\r\n      const darkmode = {\r\n        text: 'white',\r\n        bg: '#181518aa',\r\n      }\r\n\r\n      return this.$store.state.colorScheme === ColorScheme.DarkMode ? darkmode : lightmode\r\n    },\r\n  },\r\n  watch: {\r\n    extrudeTowers() {\r\n      if (this.extrudeTowers && this.globalState.viewState.pitch == 0) {\r\n        globalStore.commit(\r\n          'setMapCamera',\r\n          Object.assign({}, this.globalState.viewState, { pitch: 10 })\r\n        )\r\n      }\r\n    },\r\n    '$store.state.viewState'() {\r\n      if (this.vizDetails.mapIsIndependent) return\r\n      if (REACT_VIEW_HANDLES[this.id]) REACT_VIEW_HANDLES[this.id]()\r\n    },\r\n  },\r\n  methods: {\r\n    handleClick(target: any, event: any) {\r\n      console.log({ target, event })\r\n      if (!target.layer) this.handleEmptyClick()\r\n      else this.handleHexClick(target, event)\r\n    },\r\n\r\n    handleEmptyClick() {\r\n      this.flipViewToShowInvertedData({})\r\n    },\r\n\r\n    handleHexClick(pickedObject: any, event: any) {\r\n      if (!event.srcEvent.shiftKey) {\r\n        this.multiSelectedHexagons = {}\r\n        this.hexStats = null\r\n        this.flipViewToShowInvertedData(pickedObject)\r\n        return\r\n      }\r\n\r\n      // SHIFT!!\r\n      const index = pickedObject?.object?.index\r\n      if (index !== undefined) {\r\n        if (index in this.multiSelectedHexagons) {\r\n          delete this.multiSelectedHexagons[index]\r\n        } else {\r\n          this.multiSelectedHexagons[index] = pickedObject.object.points\r\n        }\r\n        this.hexStats = this.selectedHexagonStatistics()\r\n      }\r\n    },\r\n\r\n    flipViewToShowInvertedData(pickedObject: any) {\r\n      if (this.isHighlightingZone) {\r\n        // force highlight off if user clicked on a second hex\r\n        this.isHighlightingZone = false\r\n      } else if (!pickedObject.object) {\r\n        // force highlight off if user clicked away\r\n        this.isHighlightingZone = false\r\n      } else {\r\n        this.isHighlightingZone = true\r\n      }\r\n\r\n      const parts = this.activeAggregation.split('~') // an unlikely unicode\r\n\r\n      let suffix = 0\r\n      let revSuffix = 0\r\n\r\n      // set up the hexagons\r\n      if (!this.isHighlightingZone) {\r\n        // reset the view\r\n        this.hexStats = null\r\n        this.multiSelectedHexagons = {}\r\n        this.handleOrigDest(parts[0], parseInt(parts[1]))\r\n      } else {\r\n        // select the anti-view\r\n        suffix = parseInt(parts[1])\r\n        revSuffix = suffix % 2 ? suffix - 1 : suffix + 1\r\n\r\n        const origKey = `${parts[0]}${suffix}`\r\n        const origArray = this.rowCache[origKey]\r\n\r\n        const key = `${parts[0]}${revSuffix}`\r\n        const inverseArray = this.rowCache[key]\r\n\r\n        const arcFilteredRows: any = []\r\n\r\n        for (const row of pickedObject.object.points) {\r\n          const zoffset = row.index * 2\r\n          const coords = [inverseArray.raw[zoffset], inverseArray.raw[zoffset + 1]]\r\n\r\n          arcFilteredRows.push([\r\n            // from\r\n            [origArray.raw[zoffset], origArray.raw[zoffset + 1]],\r\n            // to\r\n            coords,\r\n          ])\r\n          this.highlightedTrips = arcFilteredRows\r\n        }\r\n\r\n        if (this.hexStats) this.hexStats.selectedHexagonIds = []\r\n        this.multiSelectedHexagons = {}\r\n\r\n        this.colorRamp = this.colorRamps[revSuffix]\r\n      }\r\n\r\n      // set up the connecting arc-lines\r\n      if (!this.isHighlightingZone) {\r\n        this.highlightedTrips = []\r\n      } else {\r\n        // this.highlightedTrips = arcFilteredRows\r\n      }\r\n    },\r\n\r\n    async handleOrigDest(groupName: string, number: number) {\r\n      const cacheKey = groupName + number\r\n\r\n      this.hexStats = null\r\n      this.multiSelectedHexagons = {}\r\n\r\n      // const xytitle = this.aggregations[groupName][number]\r\n      // const x = this.columnLookup.indexOf(xytitle.x)\r\n      // const y = this.columnLookup.indexOf(xytitle.y)\r\n\r\n      this.highlightedTrips = []\r\n      this.activeAggregation = `${groupName}~${number}`\r\n\r\n      // get element offsets in data array\r\n      // const col = this.aggregations[item]\r\n      // this.whichCoords = { x, y }\r\n\r\n      // this.requests = this.rawRequests.map(r => [r[x], r[y]]).filter(z => z[0] && z[1])\r\n      // this.requests = this.rawRequests\r\n      this.requests = this.rowCache[cacheKey]\r\n      this.colorRamp = this.colorRamps[number]\r\n    },\r\n\r\n    async solveProjection() {\r\n      if (this.thumbnail) return\r\n\r\n      console.log('WHAT PROJECTION:')\r\n\r\n      try {\r\n        const text = await this.fileApi.getFileText(\r\n          this.myState.subfolder + '/' + this.myState.yamlConfig\r\n        )\r\n        this.vizDetails = YAML.parse(text)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    },\r\n\r\n    async getVizDetails() {\r\n      if (this.config) {\r\n        this.validateYAML()\r\n        this.vizDetails = Object.assign({}, this.config) as VizDetail\r\n        this.setRadiusAndHeight()\r\n        return\r\n      }\r\n\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n\r\n      if (hasYaml) {\r\n        await this.loadStandaloneYAMLConfig()\r\n      } else {\r\n        this.loadOutputTripsConfig()\r\n      }\r\n    },\r\n\r\n    loadOutputTripsConfig() {\r\n      let projection = 'EPSG:31468' // 'EPSG:25832', // 'EPSG:31468', // TODO: fix\r\n      if (!this.myState.thumbnail) {\r\n        projection = prompt('Enter projection: e.g. \"EPSG:31468\"') || 'EPSG:31468'\r\n        if (!!parseInt(projection, 10)) projection = 'EPSG:' + projection\r\n      }\r\n\r\n      this.vizDetails = {\r\n        title: 'Output Trips',\r\n        description: this.myState.yamlConfig,\r\n        file: this.myState.yamlConfig,\r\n        projection,\r\n        aggregations: {\r\n          'Trip Summary': [\r\n            { title: 'Origins', x: 'start_x', y: 'start_y' },\r\n            { title: 'Destinations', x: 'end_x', y: 'end_y' },\r\n          ],\r\n        },\r\n        radius: this.vizDetails.radius,\r\n        maxHeight: this.vizDetails.maxHeight,\r\n        center: this.vizDetails.center,\r\n        zoom: this.vizDetails.zoom,\r\n      }\r\n      this.$emit('title', this.vizDetails.title)\r\n      // this.solveProjection()\r\n      return\r\n    },\r\n\r\n    setRadiusAndHeight() {\r\n      if (!this.vizDetails.radius) this.vizDetails.radius = 250\r\n\r\n      if (!this.vizDetails.maxHeight) this.vizDetails.maxHeight = 0\r\n    },\r\n\r\n    async loadStandaloneYAMLConfig() {\r\n      try {\r\n        // might be a project config:\r\n        const filename =\r\n          this.myState.yamlConfig.indexOf('/') > -1\r\n            ? this.myState.yamlConfig\r\n            : this.myState.subfolder + '/' + this.myState.yamlConfig\r\n\r\n        const text = await this.fileApi.getFileText(filename)\r\n        this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\r\n        this.validateYAML()\r\n        this.setVizDetails()\r\n      } catch (err) {\r\n        const e = err as any\r\n        console.log('failed')\r\n\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg: `File not found`,\r\n          desc: `Could not find: ${this.myState.subfolder}/${this.myState.yamlConfig}`,\r\n        })\r\n      }\r\n    },\r\n\r\n    validateYAML() {\r\n      console.log('in yaml validation 2')\r\n\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n      let configuration = {} as any\r\n\r\n      if (hasYaml) {\r\n        console.log('has yaml')\r\n        configuration = this.standaloneYAMLconfig\r\n      } else {\r\n        console.log('no yaml')\r\n        configuration = this.config\r\n      }\r\n\r\n      for (const key in this.YAMLrequirementsXY) {\r\n        if (!(key in configuration)) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `${this.yamlConfig}: missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n\r\n      if (configuration.radius == 0) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Radius set to zero`,\r\n          desc: 'Radius can not be zero, preset value used instead. ',\r\n        })\r\n      }\r\n\r\n      if (configuration.zoom < 5 || configuration.zoom > 20) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Zoom is out of the recommended range `,\r\n          desc: 'Zoom levels should be between 5 and 20. ',\r\n        })\r\n      }\r\n    },\r\n\r\n    setVizDetails() {\r\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\r\n\r\n      this.setRadiusAndHeight()\r\n\r\n      const t = this.vizDetails.title ? this.vizDetails.title : 'Hex Aggregation'\r\n      this.$emit('title', t)\r\n    },\r\n\r\n    async buildThumbnail() {\r\n      if (this.thumbnail && this.vizDetails.thumbnail) {\r\n        try {\r\n          const blob = await this.fileApi.getFileBlob(\r\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\r\n          )\r\n          const buffer = await blob.arrayBuffer()\r\n          const base64 = util.arrayBufferToBase64(buffer)\r\n          if (base64)\r\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      }\r\n    },\r\n    handleShowSelectionButton() {\r\n      const arrays = Object.values(this.multiSelectedHexagons)\r\n      let points: any[] = []\r\n      arrays.map(a => (points = points.concat(a)))\r\n\r\n      const pickedObject = { object: { points } }\r\n      this.flipViewToShowInvertedData(pickedObject)\r\n    },\r\n\r\n    selectedHexagonStatistics(): {\r\n      rows: number\r\n      numHexagons: number\r\n      selectedHexagonIds: any[]\r\n    } | null {\r\n      const selectedHexes = Object.keys(this.multiSelectedHexagons).map(a => parseInt(a))\r\n      if (!selectedHexes.length) return null\r\n\r\n      const arrays = Object.values(this.multiSelectedHexagons)\r\n      const ll = arrays.reduce((a: number, v: any) => a + v.length, 0)\r\n\r\n      return { rows: ll, numHexagons: selectedHexes.length, selectedHexagonIds: selectedHexes }\r\n    },\r\n\r\n    async setMapCenter() {\r\n      const data = Object.values(this.rowCache)[0].raw\r\n\r\n      // If user gave us the center, use it\r\n      if (this.vizDetails.center) {\r\n        if (typeof this.vizDetails.center == 'string') {\r\n          this.vizDetails.center = this.vizDetails.center.split(',').map(Number)\r\n        }\r\n\r\n        const view = {\r\n          longitude: this.vizDetails.center[0],\r\n          latitude: this.vizDetails.center[1],\r\n          bearing: 0,\r\n          pitch: 0,\r\n          zoom: this.vizDetails.zoom || 10, // use 10 default if we don't have a zoom\r\n          jump: false, // move the map no matter what\r\n        }\r\n\r\n        // bounce our map\r\n        if (REACT_VIEW_HANDLES[this.id]) REACT_VIEW_HANDLES[this.id](view)\r\n\r\n        return\r\n      }\r\n\r\n      // user didn't give us the center, so calculate it\r\n      if (!data.length) return\r\n\r\n      let samples = 0\r\n      let longitude = 0\r\n      let latitude = 0\r\n\r\n      const numLinks = data.length / 2\r\n\r\n      const gap = 512\r\n      for (let i = 0; i < numLinks; i += gap) {\r\n        longitude += data[i * 2]\r\n        latitude += data[i * 2 + 1]\r\n        samples++\r\n      }\r\n\r\n      longitude = longitude / samples\r\n      latitude = latitude / samples\r\n\r\n      const currentView = this.$store.state.viewState\r\n\r\n      if (longitude && latitude) {\r\n        this.$store.commit('setMapCamera', {\r\n          longitude,\r\n          latitude,\r\n          bearing: currentView.bearing,\r\n          pitch: currentView.pitch,\r\n          zoom: this.vizDetails.zoom || currentView.zoom,\r\n          jump: false,\r\n        })\r\n      }\r\n    },\r\n\r\n    setupLogoMover() {\r\n      this.resizer = new ResizeObserver(this.moveLogo)\r\n      const deckmap = document.getElementById(`id-${this.id}`) as HTMLElement\r\n      this.resizer.observe(deckmap)\r\n    },\r\n\r\n    moveLogo() {\r\n      const deckmap = document.getElementById(`id-${this.id}`) as HTMLElement\r\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\r\n      if (logo) {\r\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\r\n        logo.style.right = right\r\n      }\r\n    },\r\n\r\n    async parseCSVFile(filename: string) {\r\n      this.myState.statusMessage = 'Loading file...'\r\n\r\n      // get the raw unzipped arraybuffer\r\n      this.gzipWorker = new CSVParserWorker()\r\n\r\n      this.gzipWorker.onmessage = async (buffer: MessageEvent) => {\r\n        if (buffer.data.status) {\r\n          this.myState.statusMessage = buffer.data.status\r\n        } else if (buffer.data.error) {\r\n          this.myState.statusMessage = buffer.data.error\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `Loading Error`,\r\n            desc: 'Error loading: ${this.myState.subfolder}/${this.vizDetails.file}',\r\n          })\r\n        } else {\r\n          const { rowCache, columnLookup } = buffer.data\r\n          if (this.gzipWorker) this.gzipWorker.terminate()\r\n          this.dataIsLoaded({ rowCache, columnLookup })\r\n        }\r\n      }\r\n\r\n      this.gzipWorker.postMessage({\r\n        filepath: filename,\r\n        fileSystem: this.fileSystem,\r\n        aggregations: this.vizDetails.aggregations,\r\n        projection: this.vizDetails.projection,\r\n      })\r\n    },\r\n\r\n    dataIsLoaded({ rowCache, columnLookup }: any) {\r\n      this.columnLookup = columnLookup\r\n      this.rowCache = rowCache\r\n\r\n      const agg = this.activeAggregation.replaceAll('~', '')\r\n      this.requests = this.rowCache[agg]\r\n\r\n      this.setMapCenter()\r\n      this.moveLogo()\r\n      this.myState.statusMessage = ''\r\n    },\r\n\r\n    async loadFiles() {\r\n      let dataArray: any = []\r\n      if (!this.fileApi) return { dataArray }\r\n\r\n      try {\r\n        let filename = `${this.myState.subfolder}/${this.vizDetails.file}`\r\n        await this.parseCSVFile(filename)\r\n      } catch (e) {\r\n        console.error(e)\r\n        this.myState.statusMessage = '' + e\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg: `Loading/Parsing Error`,\r\n          desc: 'Error loading/parsing: ${this.myState.subfolder}/${this.vizDetails.file}',\r\n        })\r\n      }\r\n    },\r\n  },\r\n  async mounted() {\r\n    this.$store.commit('setFullScreen', !this.thumbnail)\r\n\r\n    this.myState.thumbnail = this.thumbnail\r\n    this.myState.yamlConfig = this.yamlConfig || ''\r\n    this.myState.subfolder = this.subfolder\r\n\r\n    await this.getVizDetails()\r\n\r\n    if (this.thumbnail) return\r\n\r\n    this.setupLogoMover()\r\n\r\n    this.myState.statusMessage = `${this.$i18n.t('loading')}`\r\n    this.aggregations = this.vizDetails.aggregations\r\n\r\n    // console.log('loading files')\r\n    await this.loadFiles()\r\n\r\n    // this.mapState.center = this.findCenter(this.rawRequests)\r\n\r\n    this.buildThumbnail()\r\n\r\n    this.isLoaded = true\r\n    this.handleOrigDest(Object.keys(this.aggregations)[0], 0) // show first data\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // MUST erase the React view handle to prevent gigantic memory leak!\r\n    REACT_VIEW_HANDLES[this.id] = undefined\r\n    delete REACT_VIEW_HANDLES[this.id]\r\n\r\n    try {\r\n      if (this.gzipWorker) {\r\n        this.gzipWorker.terminate()\r\n      }\r\n    } catch (e) {\r\n      console.warn(e)\r\n    }\r\n\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.xy-hexagons {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: $thumbnailHeight;\r\n  background: url('assets/thumbnail.jpg') center / cover no-repeat;\r\n  z-index: -1;\r\n}\r\n\r\n.xy-hexagons.hide-thumbnail {\r\n  background: none;\r\n  z-index: 0;\r\n}\r\n\r\n.message {\r\n  z-index: 5;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  box-shadow: 0px 2px 10px #22222222;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: auto auto 0 0;\r\n  background-color: var(--bgPanel);\r\n  padding: 0.5rem 1.5rem;\r\n\r\n  a {\r\n    color: white;\r\n    text-decoration: none;\r\n\r\n    &.router-link-exact-active {\r\n      color: white;\r\n    }\r\n  }\r\n\r\n  p {\r\n    font-size: 1.2rem;\r\n    line-height: 1.5rem;\r\n    font-weight: normal;\r\n    color: var(--textFancy);\r\n  }\r\n}\r\n\r\n.speed-block {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.legend-block {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.speed-slider {\r\n  min-width: 6rem;\r\n}\r\n\r\n.status-message {\r\n  font-size: 1.5rem;\r\n  line-height: 1.75rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.big {\r\n  padding: 0.5rem 0;\r\n  font-size: 1.5rem;\r\n  line-height: 1.7rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.left-side {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 0.8rem;\r\n  pointer-events: auto;\r\n  margin: 0 0 0 0;\r\n}\r\n\r\n.control-panel {\r\n  position: absolute;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: 0.8rem;\r\n  margin: 0 0 0.5rem 0.5rem;\r\n  pointer-events: auto;\r\n  background-color: var(--bgPanel);\r\n  padding: 0.5rem 0.5rem;\r\n  filter: drop-shadow(0px 2px 4px #22222233);\r\n}\r\n\r\n.is-dashboard {\r\n  position: static;\r\n  margin: 0 0;\r\n  padding: 0.25rem 0 0 0;\r\n  filter: unset;\r\n  background-color: unset;\r\n}\r\n\r\n.hex-layer {\r\n  pointer-events: auto;\r\n}\r\n\r\n.speed-label {\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.tooltip {\r\n  padding: 5rem 5rem;\r\n  background-color: #ccc;\r\n}\r\n\r\n.panel-items {\r\n  margin: 0.5rem 0.5rem;\r\n}\r\n\r\n.panel-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-right: 1rem;\r\n}\r\n\r\n.right {\r\n  margin-left: auto;\r\n}\r\n\r\ninput {\r\n  border: none;\r\n  background-color: #235;\r\n  color: #ccc;\r\n}\r\n\r\n.row {\r\n  display: 'grid';\r\n  grid-template-columns: 'auto 1fr';\r\n}\r\n\r\n.drawing-tool {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n  .message {\r\n    padding: 0.5rem 0.5rem;\r\n  }\r\n\r\n  .right-side {\r\n    font-size: 0.7rem;\r\n  }\r\n\r\n  .big {\r\n    padding: 0 0rem;\r\n    margin-top: 0.5rem;\r\n    font-size: 1.3rem;\r\n    line-height: 2rem;\r\n  }\r\n}\r\n</style>\r\n","\r\n.xy-hexagons(:class=\"{'hide-thumbnail': !thumbnail}\" oncontextmenu=\"return false\" :id=\"`id-${id}`\")\r\n\r\n  xy-hex-deck-map.hex-layer(\r\n    v-if=\"!thumbnail && isLoaded\"\r\n    v-bind=\"mapProps\"\r\n  )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\")\r\n  drawing-tool.drawing-tool(v-if=\"!thumbnail\")\r\n\r\n  .left-side(v-if=\"isLoaded && !thumbnail && vizDetails.title\")\r\n    collapsible-panel(direction=\"left\" :locked=\"true\")\r\n      .panel-items(v-if=\"hexStats\" style=\"color: #c0f;\")\r\n        p.big(style=\"margin-top: 2rem;\") {{ $t('selection') }}:\r\n        h3(style=\"margin-top: -1rem;\") {{ $t('areas') }}: {{ hexStats.numHexagons }}, {{ $t('count') }}: {{ hexStats.rows }}\r\n        button.button(style=\"color: #c0f; border-color: #c0f\" @click=\"handleShowSelectionButton\") {{ $t('showDetails') }}\r\n\r\n  .control-panel(v-if=\"isLoaded && !thumbnail && !myState.statusMessage\")\r\n        //- :class=\"{'is-dashboard': config !== undefined }\"\r\n\r\n        .panel-item(v-for=\"group in Object.keys(aggregations)\" :key=\"group\")\r\n          p.speed-label {{ group }}\r\n          button.button.is-small.aggregation-button(\r\n            v-for=\"element,i in aggregations[group]\"\r\n            :key=\"i\"\r\n            :style=\"{'margin-bottom': '0.25rem', 'color': activeAggregation===`${group}~${i}` ? 'white' : buttonColors[i], 'border': `1px solid ${buttonColors[i]}`, 'border-right': `0.4rem solid ${buttonColors[i]}`,'border-radius': '4px', 'background-color': activeAggregation===`${group}~${i}` ? buttonColors[i] : $store.state.isDarkMode ? '#333':'white'}\"\r\n            @click=\"handleOrigDest(group,i)\") {{ element.title }}\r\n\r\n        .panel-item.right\r\n          p.speed-label {{ $t('maxHeight') }}: {{ vizDetails.maxHeight }}\r\n          vue-slider.speed-slider(v-model=\"vizDetails.maxHeight\"\r\n            :min=\"0\" :max=\"250\" :interval=\"5\"\r\n            :duration=\"0\" :dotSize=\"12\"\r\n            tooltip=\"none\"\r\n          )\r\n\r\n          p.speed-label Hex Radius: {{ vizDetails.radius }}\r\n          vue-slider.speed-slider(v-model=\"vizDetails.radius\"\r\n            :min=\"50\" :max=\"1000\" :interval=\"5\"\r\n            :duration=\"0\" :dotSize=\"12\"\r\n            tooltip=\"none\"\r\n          )\r\n\r\n  .message(v-if=\"!thumbnail && myState.statusMessage\")\r\n    p.status-message {{ myState.statusMessage }}\r\n\r\n"],"names":["ColumnGeometry","Geometry","constructor","props","id","uid","indices","attributes","radius","height","nradial","vertices","log","assert","length","flatMap","v","modifyPolygonWindingDirection","WINDING","COUNTER_CLOCKWISE","isExtruded","vertsAroundEdge","numVertices","stepAngle","Math","PI","Uint16Array","positions","Float32Array","normals","i","j","a","vertexIndex","sin","cos","k","floor","sign","index","POSITION","size","value","NORMAL","tesselateColumn","super","__spreadProps","DEFAULT_COLOR","defaultProps","diskResolution","type","min","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","Layer","getShaders","gl","this","context","transpileToGLSL100","isWebGL2","defines","useDerivatives","flatShading","hasFeature","FEATURES","GLSL_DERIVATIVES","FLAT_SHADING","vs","fs","modules","project32","phongLighting","gouraudLighting","picking","initializeState","getAttributeManager","addInstanced","instancePositions","fp64","use64bitPositions","transition","accessor","instanceElevations","instanceFillColors","colorFormat","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","params","oldProps","changeFlags","regenerateModels","extensionsChanged","_this$state$model","state","model","delete","_getModel","invalidateAll","_updateGeometry","getGeometry","hasThinkness","geometry","meanVertexDistance","p","sqrt","setState","edgeDistance","Model","__spreadValues","isInstanced","fillVertexCount","wireframeVertexCount","setProps","draw","uniforms","setUniforms","UNIT","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","setVertexCount","setDrawMode","isStroke","_defineProperty","AGGREGATION_OPERATION","SUM","MEAN","MIN","MAX","sumReducer","accu","cur","maxReducer","minReducer","getValueFunc","aggregation","op","isFinite","pt","source","wrapAccessor","pts","filtered","map","filter","reduce","Infinity","getMin","getSum","getMean","getMax","wrapGetValueFunc","getValue","filterProps","filterKeys","filteredProps","key","includes","AggregationLayer","CompositeLayer","args","initializeAggregationLayer","dimensions","ignoreProps","_propTypes","data","opts","shaders","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","updateAttributes","changedAttributes","getAttributes","getShaderAttributes","getModuleSettings","viewport","mousePosition","Object","assign","create","pickingActive","devicePixelRatio","cssToDeviceRatio","isAggregationDirty","updateOpts","compareAll","dimension","dataProps","accessors","updateTriggersChanged","dataChanged","all","compareProps","newProps","propTypes","name","isAttributeChanged","obj","isEmpty","isObjectEmpty","_getAttributeManager","AttributeManager","stats","getScale","domain","range","scaleFunction","scale","getQuantizeScale","domainRange","warn","step","idx","clampIdx","quantizeScale","getLinearScale","linearScale","getQuantileScale","sortedDomain","sort","ascending","n","thresholds","Array","threshold","lo","hi","mid","bisectRight","thresholdsScale","ascending$1","b","fraction","domainLength","domainFraction","lowIndex","low","getOrdinalScale","domainMap","Map","uniqueDomain","d","concat","has","set","push","get","ordinalScale","notNullOrUndefined","getTruthyValues","valueAccessor","getOrdinalDomain","values","results","forEach","unique","defaultGetValue","points","defaultGetPoints","bin","defaultGetIndex","NaN","getPoints","getIndex","filterData","BinSorter","bins","aggregatedBins","getAggregatedBins","_updateMinMaxValues","binMap","getBinMap","hasFilter","binCount","binIndex","filteredPoints","counts","_percentileToIndex","percentileRange","len","sortedBins","lower","upper","clamp","ceil","maxCount","maxValue","minValue","totalCount","getValueRange","lowerIdx","upperIdx","isArray","idxRange","getValueDomainByScale","indexEdge","_getScaleDomain","scaleType","slice","nop$1","dimensionSteps","defaultDimensions","pickingInfo","getBins","triggers","prop","updateTrigger","weight","getDomain","lowerPercentile","upperPercentile","getScaleFunc","onSet","nullValue","defaultGetCellSize","cellSize","CPUAggregator","layerData","dimensionUpdaters","_getCellSize","getCellSize","_getAggregator","getAggregator","_addDimension","aggregationParams","updateGetValueFuncs","reprojectNeeded","needsReProjectPoints","aggregationDirty","getAggregatedData","getDimensionChanges","f","updateObject","setDimensionState","normalizeResult","result","hexagons","aggregator","getSortedBins","needUpdateDimensionStep","addDimension","getDimensionUpdaters","scaleFunc","nop","updater","getDimensionSortedBins","getDimensionValueDomain","getDimensionScale","attributeAccessor","getSubLayerDimensionAttribute","dimensionStep","some","item","updaters","needUpdate","find","bind","getUpdateTriggers","_updateTriggers","updateTriggers","fromProp","dimensionUpdater","_filterData","valueDomain","dimensionRange","dimensionDomain","getScaleFunctionByScaleType","getScaleFunction","cell","cv","getSubLayerAccessors","getPickingInfo","info","object","picked","binInfo","Boolean","getAccessor","dimensionKey","hasOwnProperty","thirdPi","angles","pointX","pointY","colorDomain","colorRange","getColorValue","getColorWeight","colorAggregation","colorScaleType","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","getElevationWeight","elevationAggregation","elevationLowerPercentile","elevationUpperPercentile","elevationScaleType","onSetElevationDomain","hexagonAggregator","centerLngLat","minX","minY","maxX","maxY","y","every","getPointsCenter","radiusCommon","center","unitsPerMeter","getDistanceScales","getRadiusInCommon","screenPoints","iterable","objectInfo","createIterable","posIndex","screenCoord","projectFlat","r","dx","dy","x0","y0","x1","y1","hexbin2","binsById","isNaN","px","call","point","py","pj","round","pi","py1","abs","px1","pi2","pj2","px2","py2","hexagon","x02","y02","x12","y12","dx2","dy2","join","centers","y2","x2","mesh","fragment","_","arguments","extent","hexbin","newHexbin","hex","unprojectFlat","optional","HexagonLayer","cpuAggregator","aggregatorState","add","propsOrDataChanged","hexagonVertices","convertLatLngToMeterOffset","vertex0","vertex3","centroid","centroidFlat","metersPerUnit","vt","vtFlat","error","_onGetSublayerColor","_onGetSublayerElevation","_getSublayerUpdateTriggers","renderLayers","material2","transitions","SubLayerClass","getSubLayerClass","getSubLayerProps","ambient","diffuse","shininess","specularColor","INITIAL_VIEW","zoom","longitude","latitude","pitch","bearing","MyComponent","defineComponent","i18n","messages","en","loading","sorting","aggregate","maxHeight","showDetails","selection","areas","count","de","components","CollapsiblePanel","DrawingTool","XyHexDeckMap","viewId","colorRamp","dark","raw","extrude","highlights","mapIsIndependent","metric","selectedHexStats","rows","numHexagons","selectedHexagonIds","onClick","viewState","setViewState","useState","exports","REACT_VIEW_HANDLES","view","globalStore","colors","colormap","nshades","format","alpha","c","row","layers","ArcLayer","getSourcePosition","getTargetPosition","pickable","opacity","getHeight","getWidth","getSourceColor","getTargetColor","reverse","autoHighlight","duration","DeckGL","controller","useDevicePixels","getTooltip","lat","lng","html","toFixed","style","color","backgroundColor","target","event","onViewStateChange","handleViewState","e","commit","StaticMap","mapStyle","getters","preventStyleDiffing","mapboxApiAccessToken","MAPBOX_TOKEN","VueSlider","ToggleButton","ZoomButtons","root","String","required","subfolder","yamlConfig","config","thumbnail","colorRamps","random","standaloneYAMLconfig","title","description","file","projection","aggregations","YAMLrequirementsXY","buttonColors","columnLookup","gzipWorker","globalState","vizDetails","myState","statusMessage","rowCache","requests","highlightedTrips","searchTerm","searchEnabled","isLoaded","activeAggregation","isHighlightingZone","multiSelectedHexagons","thumbnailUrl","hexStats","resizer","computed","fileApi","HTTPFileSystem","fileSystem","svnProject","$store","svnProjects","slug","console","Error","urlThumbnail","buttonLabel","group","split","extrudeTowers","mapProps","isDarkMode","handleClick","textColor","colorScheme","ColorScheme","DarkMode","text","bg","watch","methods","layer","handleHexClick","handleEmptyClick","flipViewToShowInvertedData","pickedObject","srcEvent","shiftKey","_a","selectedHexagonStatistics","parts","suffix","revSuffix","parseInt","origKey","origArray","inverseArray","arcFilteredRows","zoffset","coords","handleOrigDest","groupName","number","cacheKey","solveProjection","getFileText","YAML","parse","getVizDetails","validateYAML","setRadiusAndHeight","RegExp","test","loadStandaloneYAMLConfig","loadOutputTripsConfig","prompt","$emit","filename","indexOf","setVizDetails","err","Status","ERROR","msg","desc","configuration","WARNING","t","buildThumbnail","blob","getFileBlob","buffer","arrayBuffer","base64","util","arrayBufferToBase64","handleShowSelectionButton","arrays","selectedHexes","keys","setMapCenter","jump","samples","numLinks","currentView","setupLogoMover","ResizeObserver","moveLogo","deckmap","document","getElementById","observe","logo","querySelector","right","clientWidth","parseCSVFile","CSVParserWorker","onmessage","async","status","terminate","dataIsLoaded","postMessage","filepath","agg","replaceAll","loadFiles","dataArray","mounted","$i18n","beforeDestroy","_vm","_h","$createElement","_c","_self","staticClass","class","attrs","oncontextmenu","_b","_e","direction","locked","staticStyle","_v","_s","$t","on","click","_l","element","border","$event","interval","dotSize","tooltip","callback","$$v","$set","expression"],"mappings":"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"}