{"version":3,"file":"line.f6a2c715.js","sources":["../../src/dash-panels/line.vue","../../src/dash-panels/line.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\nVuePlotly.myplot(\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport DashboardDataManager, { FilterDefinition } from '@/js/DashboardDataManager'\r\nimport VuePlotly from '@/components/VuePlotly.vue'\r\n\r\nimport { FileSystemConfig, Status, BG_COLOR_DASHBOARD, UI_FONT } from '@/Globals'\r\nimport globalStore from '@/store'\r\nimport { buildCleanTitle } from './_allPanels'\r\n\r\nexport default defineComponent({\r\n  name: 'LineChartPanel',\r\n  components: { VuePlotly },\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    files: { type: Array, required: true },\r\n    config: { type: Object as any, required: true },\r\n    cardTitle: { type: String, required: true },\r\n    cardId: String,\r\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\r\n  },\r\n  data: () => {\r\n    return {\r\n      globalState: globalStore.state,\r\n      // dataSet is either x,y or allRows[]\r\n      dataSet: {} as { x?: any[]; y?: any[]; allRows?: any },\r\n      id: ('line-' + Math.floor(1e12 * Math.random())) as any,\r\n      YAMLrequirementsLine: { dataset: '', x: '' },\r\n      YAMLdeprecations: ['usedCol'],\r\n      layout: {\r\n        height: 300,\r\n        margin: { t: 8, b: 0, l: 0, r: 0, pad: 2 },\r\n        font: {\r\n          color: '#444444',\r\n          family: UI_FONT,\r\n        },\r\n        xaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 12 },\r\n          animate: true,\r\n        },\r\n        yaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 16 },\r\n          animate: true,\r\n          rangemode: 'tozero',\r\n        },\r\n        legend: {\r\n          orientation: 'v',\r\n          x: 1,\r\n          y: 1,\r\n        },\r\n      },\r\n      data: [] as any[],\r\n      options: {\r\n        displaylogo: false,\r\n        responsive: true,\r\n        modeBarButtonsToRemove: [\r\n          'pan2d',\r\n          'zoom2d',\r\n          'select2d',\r\n          'lasso2d',\r\n          'zoomIn2d',\r\n          'zoomOut2d',\r\n          'autoScale2d',\r\n          'hoverClosestCartesian',\r\n          'hoverCompareCartesian',\r\n          'resetScale2d',\r\n          'toggleSpikelines',\r\n          'resetViewMapbox',\r\n        ],\r\n        toImageButtonOptions: {\r\n          format: 'png', // one of png, svg, jpeg, webp\r\n          filename: 'line-chart',\r\n          width: null,\r\n          height: null,\r\n        },\r\n      },\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.updateTheme()\r\n    this.options.toImageButtonOptions.filename = buildCleanTitle(this.cardTitle, this.subfolder)\r\n\r\n    this.dataSet = await this.loadData()\r\n    this.updateChart()\r\n\r\n    this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\r\n    this.$emit('isLoaded')\r\n  },\r\n  beforeDestroy() {\r\n    this.datamanager?.removeFilterListener(this.config, this.handleFilterChanged)\r\n  },\r\n\r\n  watch: {\r\n    'globalState.isDarkMode'() {\r\n      this.updateTheme()\r\n    },\r\n  },\r\n  methods: {\r\n    changeDimensions(dimensions: { width: number; height: number }) {\r\n      this.layout = Object.assign({}, this.layout, dimensions)\r\n    },\r\n\r\n    handleFilterChanged() {\r\n      if (!this.datamanager) return\r\n\r\n      const { filteredRows } = this.datamanager.getFilteredDataset(this.config) as any\r\n\r\n      if (!filteredRows || !filteredRows.length) {\r\n        this.dataSet = { allRows: {} }\r\n      } else {\r\n        const allRows = {} as any\r\n\r\n        const keys = Object.keys(filteredRows[0])\r\n        keys.forEach(key => (allRows[key] = { name: key, values: [] as any }))\r\n\r\n        filteredRows.forEach((row: any) => {\r\n          keys.forEach(key => allRows[key].values.push(row[key]))\r\n        })\r\n        this.dataSet = { allRows }\r\n      }\r\n\r\n      this.updateChart()\r\n    },\r\n\r\n    updateTheme() {\r\n      const colors = {\r\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\r\n      }\r\n      this.layout = Object.assign({}, this.layout, colors)\r\n    },\r\n\r\n    async loadData() {\r\n      try {\r\n        this.validateYAML()\r\n        let dataset = await this.datamanager.getDataset(this.config)\r\n\r\n        // no filter? we are done\r\n        if (!this.config.filters) return dataset\r\n\r\n        // filter data before returning:\r\n        this.datamanager.addFilterListener(this.config, this.handleFilterChanged)\r\n\r\n        for (const [column, value] of Object.entries(this.config.filters)) {\r\n          const filter: FilterDefinition = {\r\n            dataset: this.config.dataset,\r\n            column: column,\r\n            value: value,\r\n            range: Array.isArray(value),\r\n          }\r\n          this.datamanager.setFilter(filter)\r\n        }\r\n        // empty for now; filtered data will come back later via handleFilterChanged async.\r\n        return { allRows: {} }\r\n      } catch (e) {\r\n        console.error('' + e)\r\n      }\r\n      return { allRows: {} }\r\n    },\r\n\r\n    validateYAML() {\r\n      console.log('in line validation')\r\n\r\n      for (const key in this.YAMLrequirementsLine) {\r\n        if (key in this.config === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `line chart: missing required key: ${key}`,\r\n            desc: JSON.stringify(this.config),\r\n          })\r\n        }\r\n      }\r\n\r\n      for (const deprecated of this.YAMLdeprecations) {\r\n        if (this.config[deprecated]) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.WARNING,\r\n            msg: `line chart: deprecated field: ${deprecated}`,\r\n            desc: JSON.stringify(this.config),\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    updateChart() {\r\n      this.layout.xaxis.title.text = this.config.xAxisTitle || this.config.xAxisName || ''\r\n      this.layout.yaxis.title.text = this.config.yAxisTitle || this.config.yAxisName || ''\r\n\r\n      try {\r\n        if (this.config.groupBy) this.updateChartWithGroupBy()\r\n        else this.updateChartSimple()\r\n      } catch (e) {\r\n        const msg = '' + e\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg,\r\n          desc: 'Add a desription...',\r\n        })\r\n      }\r\n    },\r\n\r\n    updateChartWithGroupBy() {\r\n      // tba\r\n    },\r\n\r\n    updateChartSimple() {\r\n      let useOwnNames = false\r\n\r\n      // old configs called it \"usedCol\" --> now \"columns\"\r\n      let columns = this.config.columns || this.config.usedCol\r\n\r\n      // old legendname field\r\n      if (this.config.legendName) this.config.legendTitles = this.config.legendName\r\n      if (this.config.legendTitles?.length) useOwnNames = true\r\n\r\n      const allRows = this.dataSet.allRows || ({} as any)\r\n      const columnNames = Object.keys(allRows)\r\n\r\n      if (!columnNames.length) return\r\n\r\n      let x = allRows[this.config.x].values || []\r\n      if (this.config.skipFirstRow) x = x.slice(1)\r\n\r\n      // Or maybe user didn't specify: then use all the columns!\r\n      if (!columns && columnNames.length) {\r\n        columns = columnNames.filter(col => col !== this.config.x).sort()\r\n      }\r\n\r\n      const lines = [] as any[]\r\n\r\n      for (let i = 0; i < columns.length; i++) {\r\n        const col = columns[i]\r\n        const legendName = useOwnNames ? this.config.legendTitles[i] ?? col : col\r\n\r\n        let values = allRows[col].values\r\n        if (this.config.skipFirstRow) values = values.slice(1)\r\n\r\n        // are durations in 00:00:00 format?\r\n        if (this.config.convertToSeconds) values = this.convertToSeconds(values)\r\n\r\n        lines.push({\r\n          x: x,\r\n          y: values,\r\n          name: legendName,\r\n          type: 'line',\r\n          textinfo: 'label+percent',\r\n          textposition: 'inside',\r\n          automargin: false,\r\n        })\r\n      }\r\n      this.data = lines\r\n    },\r\n\r\n    convertToSeconds(values: any[]) {\r\n      values = values.map((v: string) => {\r\n        try {\r\n          const pieces = v.split(':')\r\n          const seconds = pieces.reduce((prev: any, curr: any) => parseInt(curr, 10) + prev * 60, 0)\r\n          return seconds\r\n        } catch (e) {\r\n          return 0\r\n        }\r\n      })\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.myplot {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n}\r\n</style>\r\n","\r\nVuePlotly.myplot(\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n"],"names":["__vue2_script","defineComponent","name","components","VuePlotly","props","fileSystemConfig","type","Object","required","subfolder","String","files","Array","config","cardTitle","cardId","datamanager","data","globalState","globalStore","state","dataSet","id","Math","floor","random","YAMLrequirementsLine","dataset","x","YAMLdeprecations","layout","height","margin","t","b","l","r","pad","font","color","family","UI_FONT","xaxis","automargin","autorange","title","text","standoff","animate","yaxis","rangemode","legend","orientation","y","options","displaylogo","responsive","modeBarButtonsToRemove","toImageButtonOptions","format","filename","width","mounted","this","updateTheme","buildCleanTitle","loadData","updateChart","$emit","resizer","changeDimensions","beforeDestroy","_a","removeFilterListener","handleFilterChanged","watch","methods","dimensions","assign","filteredRows","getFilteredDataset","length","allRows","keys","forEach","key","values","row","push","colors","paper_bgcolor","BG_COLOR_DASHBOARD","colorScheme","plot_bgcolor","isDarkMode","validateYAML","getDataset","filters","addFilterListener","column","value","entries","filter","range","isArray","setFilter","e","console","error","log","$store","commit","Status","ERROR","msg","desc","JSON","stringify","deprecated","WARNING","xAxisTitle","xAxisName","yAxisTitle","yAxisName","groupBy","updateChartWithGroupBy","updateChartSimple","useOwnNames","columns","usedCol","legendName","legendTitles","columnNames","skipFirstRow","slice","col","sort","lines","i","_b","convertToSeconds","textinfo","textposition","map","v","pieces","split","reduce","prev","curr","parseInt","_vm","_h","$createElement","_self","_c","staticClass","attrs"],"mappings":"gSAoBA,IAAAA,EAAAC,EAAA,CACAC,KAAA,iBACAC,WAAA,CAAAC,UAAAA,GACAC,MAAA,CACAC,iBAAA,CAAAC,KAAAC,OAAAC,UAAA,GACAC,UAAA,CAAAH,KAAAI,OAAAF,UAAA,GACAG,MAAA,CAAAL,KAAAM,MAAAJ,UAAA,GACAK,OAAA,CAAAP,KAAAC,OAAAC,UAAA,GACAM,UAAA,CAAAR,KAAAI,OAAAF,UAAA,GACAO,OAAAL,OACAM,YAAA,CAAAV,KAAAC,OAAAC,UAAA,IAEAS,KAAA,KACA,CACAC,YAAAC,EAAAC,MAEAC,QAAA,GACAC,GAAA,QAAAC,KAAAC,MAAA,KAAAD,KAAAE,UACAC,qBAAA,CAAAC,QAAA,GAAAC,EAAA,IACAC,iBAAA,CAAA,WACAC,OAAA,CACAC,OAAA,IACAC,OAAA,CAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,IAAA,GACAC,KAAA,CACAC,MAAA,UACAC,OAAAC,GAEAC,MAAA,CACAC,YAAA,EACAC,WAAA,EACAC,MAAA,CAAAC,KAAA,GAAAC,SAAA,IACAC,SAAA,GAEAC,MAAA,CACAN,YAAA,EACAC,WAAA,EACAC,MAAA,CAAAC,KAAA,GAAAC,SAAA,IACAC,SAAA,EACAE,UAAA,UAEAC,OAAA,CACAC,YAAA,IACAxB,EAAA,EACAyB,EAAA,IAGApC,KAAA,GACAqC,QAAA,CACAC,aAAA,EACAC,YAAA,EACAC,uBAAA,CACA,QACA,SACA,WACA,UACA,WACA,YACA,cACA,wBACA,wBACA,eACA,mBACA,mBAEAC,qBAAA,CACAC,OAAA,MACAC,SAAA,aACAC,MAAA,KACA9B,OAAA,SAAA+B,gBAMAC,KAAAC,cACAD,KAAAT,QAAAI,qBAAAE,SAAAK,EAAAF,KAAAjD,UAAAiD,KAAAtD,WAEAsD,KAAA1C,cAAA0C,KAAAG,WACAH,KAAAI,cAEAJ,KAAAK,MAAA,oBAAA,CAAA9C,GAAAyC,KAAAhD,OAAAsD,QAAAN,KAAAO,mBACAP,KAAAK,MAAA,aAEAG,sBACA,OAAAC,EAAAT,KAAA/C,cAAAwD,EAAAC,qBAAAV,KAAAlD,OAAAkD,KAAAW,sBAGAC,MAAA,CACA,2BACAZ,KAAAC,gBAGAY,QAAA,CACAN,iBAAAO,GACAd,KAAAjC,OAAAvB,OAAAuE,OAAA,GAAAf,KAAAjC,OAAA+C,IAGAH,sBACA,IAAAX,KAAA/C,YAAA,OAEA,MAAA+D,aAAAA,GAAAhB,KAAA/C,YAAAgE,mBAAAjB,KAAAlD,QAEA,GAAAkE,GAAAA,EAAAE,OAEA,CACA,MAAAC,EAAA,GAEAC,EAAA5E,OAAA4E,KAAAJ,EAAA,IACAI,EAAAC,SAAAC,GAAAH,EAAAG,GAAA,CAAApF,KAAAoF,EAAAC,OAAA,MAEAP,EAAAK,SAAAG,IACAJ,EAAAC,SAAAC,GAAAH,EAAAG,GAAAC,OAAAE,KAAAD,EAAAF,SAEAtB,KAAA1C,QAAA,CAAA6D,QAAAA,QAVAnB,KAAA1C,QAAA,CAAA6D,QAAA,IAaAnB,KAAAI,eAGAH,cACA,MAAAyB,EAAA,CACAC,cAAAC,EAAA5B,KAAA7C,YAAA0E,aACAC,aAAAF,EAAA5B,KAAA7C,YAAA0E,aACAtD,KAAA,CAAAC,MAAAwB,KAAA7C,YAAA4E,WAAA,UAAA,YAEA/B,KAAAjC,OAAAvB,OAAAuE,OAAA,GAAAf,KAAAjC,OAAA2D,IAAAvB,iBAIA,IACAH,KAAAgC,eACA,IAAApE,QAAAoC,KAAA/C,YAAAgF,WAAAjC,KAAAlD,QAGA,IAAAkD,KAAAlD,OAAAoF,QAAA,OAAAtE,EAGAoC,KAAA/C,YAAAkF,kBAAAnC,KAAAlD,OAAAkD,KAAAW,qBAEA,IAAA,MAAAyB,EAAAC,KAAA7F,OAAA8F,QAAAtC,KAAAlD,OAAAoF,SAAA,CACA,MAAAK,EAAA,CACA3E,QAAAoC,KAAAlD,OAAAc,QACAwE,OAAAA,EACAC,MAAAA,EACAG,MAAA3F,MAAA4F,QAAAJ,IAEArC,KAAA/C,YAAAyF,UAAAH,GAGA,MAAA,CAAApB,QAAA,IAAA,MACAwB,GACAC,QAAAC,MAAA,GAAAF,GAEA,MAAA,CAAAxB,QAAA,KAGAa,eACAY,QAAAE,IAAA,sBAEA,IAAA,MAAAxB,KAAAtB,KAAArC,qBACA2D,KAAAtB,KAAAlD,SAAA,GACAkD,KAAA+C,OAAAC,OAAA,YAAA,CACAzG,KAAA0G,EAAAC,MACAC,IAAA,qCAAA7B,IACA8B,KAAAC,KAAAC,UAAAtD,KAAAlD,UAKA,IAAA,MAAAyG,KAAAvD,KAAAlC,iBACAkC,KAAAlD,OAAAyG,IACAvD,KAAA+C,OAAAC,OAAA,YAAA,CACAzG,KAAA0G,EAAAO,QACAL,IAAA,iCAAAI,IACAH,KAAAC,KAAAC,UAAAtD,KAAAlD,WAMAsD,cACAJ,KAAAjC,OAAAY,MAAAG,MAAAC,KAAAiB,KAAAlD,OAAA2G,YAAAzD,KAAAlD,OAAA4G,WAAA,GACA1D,KAAAjC,OAAAmB,MAAAJ,MAAAC,KAAAiB,KAAAlD,OAAA6G,YAAA3D,KAAAlD,OAAA8G,WAAA,GAEA,IACA5D,KAAAlD,OAAA+G,QAAA7D,KAAA8D,yBACA9D,KAAA+D,oBAAA,MACApB,GACA,MAAAQ,EAAA,GAAAR,EACA3C,KAAA+C,OAAAC,OAAA,YAAA,CACAzG,KAAA0G,EAAAC,MACAC,IAAAA,EACAC,KAAA,0BAKAU,2BAIAC,4BACA,IAAAC,GAAA,EAGAC,EAAAjE,KAAAlD,OAAAmH,SAAAjE,KAAAlD,OAAAoH,QAGAlE,KAAAlD,OAAAqH,aAAAnE,KAAAlD,OAAAsH,aAAApE,KAAAlD,OAAAqH,aACA,OAAA1D,EAAAT,KAAAlD,OAAAsH,mBAAA,EAAA3D,EAAAS,UAAA8C,GAAA,GAEA,MAAA7C,EAAAnB,KAAA1C,QAAA6D,SAAA,GACAkD,EAAA7H,OAAA4E,KAAAD,GAEA,IAAAkD,EAAAnD,OAAA,OAEA,IAAArD,EAAAsD,EAAAnB,KAAAlD,OAAAe,GAAA0D,QAAA,GACAvB,KAAAlD,OAAAwH,eAAAzG,EAAAA,EAAA0G,MAAA,KAGAN,GAAAI,EAAAnD,SACA+C,EAAAI,EAAA9B,QAAAiC,GAAAA,IAAAxE,KAAAlD,OAAAe,IAAA4G,QAGA,MAAAC,EAAA,GAEA,IAAA,IAAAC,EAAA,EAAAA,EAAAV,EAAA/C,OAAAyD,IAAA,CACA,MAAAH,EAAAP,EAAAU,GACAR,EAAAH,GAAA,OAAAY,EAAA5E,KAAAlD,OAAAsH,aAAAO,MAAAH,EAEA,IAAAjD,EAAAJ,EAAAqD,GAAAjD,OACAvB,KAAAlD,OAAAwH,eAAA/C,EAAAA,EAAAgD,MAAA,IAGAvE,KAAAlD,OAAA+H,mBAAAtD,EAAAvB,KAAA6E,iBAAAtD,IAEAmD,EAAAjD,KAAA,CACA5D,EAAAA,EACAyB,EAAAiC,EACArF,KAAAiI,EACA5H,KAAA,OACAuI,SAAA,gBACAC,aAAA,SACAnG,YAAA,IAGAoB,KAAA9C,KAAAwH,GAGAG,iBAAAtD,GACAA,EAAAA,EAAAyD,KAAAC,IACA,IACA,MAAAC,EAAAD,EAAAE,MAAA,KAEA,OADAD,EAAAE,QAAA,CAAAC,EAAAC,IAAAC,SAAAD,EAAA,IAAA,GAAAD,GAAA,GACA,MACA1C,GACA,OAAA,gCCpRa,WACX,IAAI6C,EAAIxF,KACJyF,EAAGD,EAAIE,eAGX,OAFOF,EAAIG,MAAMC,IAAIH,GAEX,YAAa,CACrBI,YAAa,SACbC,MAAO,CACL5I,KAAQsI,EAAItI,KACZa,OAAUyH,EAAIzH,OACdwB,QAAWiG,EAAIjG,QACfhC,GAAMiI,EAAIjI,QAKM"}