{"version":3,"file":"index.d3193298.js","sources":["../../node_modules/markdown-it/lib/common/entities.js","../../node_modules/uc.micro/categories/P/regex.js","../../node_modules/mdurl/encode.js","../../node_modules/mdurl/decode.js","../../node_modules/mdurl/parse.js","../../node_modules/mdurl/index.js","../../node_modules/mdurl/format.js","../../node_modules/uc.micro/properties/Any/regex.js","../../node_modules/uc.micro/categories/Cc/regex.js","../../node_modules/uc.micro/categories/Z/regex.js","../../node_modules/uc.micro/index.js","../../node_modules/uc.micro/categories/Cf/regex.js","../../node_modules/markdown-it/lib/common/utils.js","../../node_modules/markdown-it/lib/helpers/parse_link_destination.js","../../node_modules/markdown-it/lib/helpers/parse_link_title.js","../../node_modules/markdown-it/lib/helpers/index.js","../../node_modules/markdown-it/lib/helpers/parse_link_label.js","../../node_modules/markdown-it/lib/renderer.js","../../node_modules/markdown-it/lib/ruler.js","../../node_modules/markdown-it/lib/rules_core/normalize.js","../../node_modules/markdown-it/lib/rules_core/linkify.js","../../node_modules/markdown-it/lib/rules_core/replacements.js","../../node_modules/markdown-it/lib/rules_core/smartquotes.js","../../node_modules/markdown-it/lib/token.js","../../node_modules/markdown-it/lib/rules_core/state_core.js","../../node_modules/markdown-it/lib/parser_core.js","../../node_modules/markdown-it/lib/rules_core/block.js","../../node_modules/markdown-it/lib/rules_core/inline.js","../../node_modules/markdown-it/lib/rules_block/table.js","../../node_modules/markdown-it/lib/rules_block/blockquote.js","../../node_modules/markdown-it/lib/rules_block/hr.js","../../node_modules/markdown-it/lib/rules_block/list.js","../../node_modules/markdown-it/lib/rules_block/reference.js","../../node_modules/markdown-it/lib/common/html_re.js","../../node_modules/markdown-it/lib/rules_block/html_block.js","../../node_modules/markdown-it/lib/common/html_blocks.js","../../node_modules/markdown-it/lib/rules_block/heading.js","../../node_modules/markdown-it/lib/rules_block/state_block.js","../../node_modules/markdown-it/lib/parser_block.js","../../node_modules/markdown-it/lib/rules_block/code.js","../../node_modules/markdown-it/lib/rules_block/fence.js","../../node_modules/markdown-it/lib/rules_block/lheading.js","../../node_modules/markdown-it/lib/rules_block/paragraph.js","../../node_modules/markdown-it/lib/rules_inline/text.js","../../node_modules/markdown-it/lib/rules_inline/escape.js","../../node_modules/markdown-it/lib/rules_inline/newline.js","../../node_modules/markdown-it/lib/rules_inline/strikethrough.js","../../node_modules/markdown-it/lib/rules_inline/emphasis.js","../../node_modules/markdown-it/lib/rules_inline/link.js","../../node_modules/markdown-it/lib/rules_inline/image.js","../../node_modules/markdown-it/lib/rules_inline/autolink.js","../../node_modules/markdown-it/lib/rules_inline/html_inline.js","../../node_modules/markdown-it/lib/rules_inline/entity.js","../../node_modules/markdown-it/lib/rules_inline/balance_pairs.js","../../node_modules/markdown-it/lib/rules_inline/state_inline.js","../../node_modules/markdown-it/lib/parser_inline.js","../../node_modules/markdown-it/lib/rules_inline/backticks.js","../../node_modules/markdown-it/lib/rules_inline/text_collapse.js","../../node_modules/linkify-it/index.js","../../node_modules/linkify-it/lib/re.js","../../node_modules/punycode/punycode.es6.js","../../node_modules/markdown-it/lib/index.js","../../node_modules/markdown-it/lib/presets/default.js","../../node_modules/markdown-it/lib/presets/zero.js","../../node_modules/markdown-it/lib/presets/commonmark.js","../../node_modules/markdown-it/index.js"],"sourcesContent":["// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/lib/maps/entities.json');\n","module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","// Parse link destination\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return result; }\n      if (code === 0x3C /* < */) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break; }\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n      if (level > 32) { return result; }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      langAttrs = '',\n      highlighted, i, arr, tmpAttrs, tmpToken;\n\n  if (info) {\n    arr = info.split(/(\\s+)/g);\n    langName = arr[0];\n    langAttrs = arr.slice(2).join('');\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice();\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    } else if (tokens[i].type === 'softbreak') {\n      result += '\\n';\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Normalize input string\n\n'use strict';\n\n\n// https://spec.commonmark.org/0.29/#line-ending\nvar NEWLINES_RE  = /\\r\\n?|\\n/g;\nvar NULL_RE      = /\\0/g;\n\n\nmodule.exports = function normalize(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * Additional information:\n   *\n   * - Info string for \"fence\" tokens\n   * - The value \"auto\" for autolink \"link_open\" and \"link_close\" tokens\n   * - The string value of the item marker for ordered-list \"list_item_open\" tokens\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","// GFM table, https://github.github.com/gfm/#tables-extension-\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.tShift[line],\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      isEscaped = false,\n      lastPos = 0,\n      current = '';\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos));\n        current = '';\n        lastPos = pos + 1;\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1);\n        lastPos = pos;\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */);\n    pos++;\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(current + str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines, oldParentType, terminate,\n      terminatorRules, firstCh, secondCh;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  firstCh = state.src.charCodeAt(pos++);\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }\n\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  secondCh = state.src.charCodeAt(pos++);\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false;\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText);\n  if (columns.length && columns[0] === '') columns.shift();\n  if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  columnCount = columns.length;\n  if (columnCount === 0 || columnCount !== aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'table';\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) { break; }\n    lineText = getLine(state, nextLine).trim();\n    if (!lineText) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText);\n    if (columns.length && columns[0] === '') columns.shift();\n    if (columns.length && columns[columns.length - 1] === '') columns.pop();\n\n    if (nextLine === startLine + 2) {\n      token     = state.push('tbody_open', 'tbody', 1);\n      token.map = tbodyLines = [ startLine + 2, 0 ];\n    }\n\n    token     = state.push('tr_open', 'tr', 1);\n    token.map = [ nextLine, nextLine + 1 ];\n\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  if (tbodyLines) {\n    token = state.push('tbody_close', 'tbody', -1);\n    tbodyLines[1] = nextLine;\n  }\n\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = nextLine;\n\n  state.parentType = oldParentType;\n  state.line = nextLine;\n  return true;\n};\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      isOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // set offset past spaces and \">\"\n  initial = offset = state.sCount[startLine] + 1;\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    isOutdented = state.sCount[nextLine] < state.blkIndent;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      initial = offset = state.sCount[nextLine] + 1;\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldListIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[startLine] - state.listIndent >= 4 &&\n      state.sCount[startLine] < state.blkIndent) {\n    return false;\n  }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1);\n    }\n\n    // change current state, then restore it after parser subcall\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n      start = state.bMarks[nextLine] + state.tShift[nextLine];\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?][\\\\s\\\\S]*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent (for example, if we are\n                       // inside a list, it would be positioned after list marker)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n';\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, ws, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        ws = pmax - 1;\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;\n\n        state.pending = state.pending.slice(0, ws);\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token:  state.tokens.length - 1,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      max = delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      token,\n      href = '',\n      title = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos;\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str;\n        pos = res.pos;\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos);\n          if (!isSpace(code) && code !== 0x0A) { break; }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\nvar AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var url, fullUrl, token, ch, start, max,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  start = state.pos;\n  max = state.posMax;\n\n  for (;;) {\n    if (++pos >= max) return false;\n\n    ch = state.src.charCodeAt(pos);\n\n    if (ch === 0x3C /* < */) return false;\n    if (ch === 0x3E /* > */) break;\n  }\n\n  url = state.src.slice(start + 1, pos);\n\n  if (AUTOLINK_RE.test(url)) {\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  if (EMAIL_RE.test(url)) {\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += url.length + 2;\n    return true;\n  }\n\n  return false;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23 /* # */) {\n      match = state.src.slice(pos).match(DIGITAL_RE);\n      if (match) {\n        if (!silent) {\n          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) { state.pending += entities[match[1]]; }\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) { state.pending += '&'; }\n  state.pos++;\n  return true;\n};\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nfunction processDelimiters(state, delimiters) {\n  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,\n      isOddMatch, lastJump,\n      openersBottom = {},\n      max = delimiters.length;\n\n  if (!max) return;\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  var headerIdx = 0;\n  var lastTokenIdx = -2; // needs any value lower than -1\n  var jumps = [];\n\n  for (closerIdx = 0; closerIdx < max; closerIdx++) {\n    closer = delimiters[closerIdx];\n\n    jumps.push(0);\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx;\n    }\n\n    lastTokenIdx = closer.token;\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [ -1, -1, -1, -1, -1, -1 ];\n    }\n\n    minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];\n\n    openerIdx = headerIdx - jumps[headerIdx] - 1;\n\n    newMinOpenerIdx = openerIdx;\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      opener = delimiters[openerIdx];\n\n      if (opener.marker !== closer.marker) continue;\n\n      if (opener.open && opener.end < 0) {\n\n        isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?\n            jumps[openerIdx - 1] + 1 :\n            0;\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n          jumps[openerIdx] = lastJump;\n\n          closer.open  = false;\n          opener.end   = closerIdx;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2;\n          break;\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;\n    }\n  }\n}\n\n\nmodule.exports = function link_pairs(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  processDelimiters(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  [ 'text_collapse',   require('./rules_inline/text_collapse') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","// Parse backticks\n\n'use strict';\n\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n  openerLength = marker.length;\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker;\n    state.pos += openerLength;\n    return true;\n  }\n\n  matchStart = matchEnd = pos;\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    closerLength = matchEnd - matchStart;\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        token     = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart;\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true;\n\n  if (!silent) state.pending += marker;\n  state.pos += openerLength;\n  return true;\n};\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nmodule.exports = function text_collapse(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n","'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in \"google search\" links (#66, #81).\n                                     // github has ... in commit range links,\n                                     // Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // - params separator\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]).|' +\n          (opts && opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          ',(?!' + re.src_ZCc + ').|' +       // allow `,,,` in paths\n          ';(?!' + re.src_ZCc + ').|' +       // allow `;` if not followed by space-like char\n          '\\\\!+(?!' + re.src_ZCc + '|[!]).|' +  // allow `!!!` in paths, but not at the end\n          '\\\\?(?!' + re.src_ZCc + '|[?]).' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  default: require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","'use strict';\n\n\nmodule.exports = require('./lib/');\n"],"names":["entities","regex","encodeCache","encode$1","string","exclude","keepEscaped","i","l","code3","nextCode","cache","result","encode","defaultChars","ch","String","fromCharCode","test","push","toString","toUpperCase","slice","length","charCodeAt","getEncodeCache","encodeURIComponent","componentChars","encode_1","decodeCache","decode$1","decode","getDecodeCache","replace","seq","b1","b2","b3","b4","chr","parseInt","decode_1","Url","this","protocol","slashes","auth","port","hostname","hash","search","pathname","protocolPattern","portPattern","simplePathPattern","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","hostlessProtocol","javascript","slashedProtocol","http","https","ftp","gopher","file","prototype","parse","url","slashesDenoteHost","lowerProto","hec","rest","trim","split","simplePath","exec","proto","toLowerCase","substr","match","atSign","hostEnd","indexOf","lastIndexOf","host","parseHost","ipv6Hostname","hostparts","part2","newpart","j","k","validParts","notHost","bit","unshift","join","qm","u","mdurl","require$$0","require$$1","format","require$$3","uc_micro","Any","Cc","Cf","P","Z","require$$4","_hasOwnProperty","Object","hasOwnProperty","has2","object","key","call","isValidEntityCode2","c","fromCodePoint2","surrogate1","surrogate2","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","source","DIGITAL_ENTITY_TEST_RE","entities2","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","REGEXP_ESCAPE_RE","UNICODE_PUNCT_RE","exports","lib","require$$2","ucmicro","assign","obj","sources","Array","arguments","forEach","TypeError","keys","isString","_class2","has","unescapeMd","str","unescapeAll","match2","escaped","entity3","name","replaceEntityPattern","isValidEntityCode","fromCodePoint","escapeHtml","arrayReplaceAt","src","pos","newElements","isSpace","isWhiteSpace","isMdAsciiPunct","isPunctChar","escapeRE","normalizeReference","helpers","parseLinkLabel","state","start","disableNested","level","found","marker2","prevPos","labelEnd","max","posMax","oldPos","md","inline","skipToken","parseLinkDestination","ok","lines","parseLinkTitle","default_rules","Renderer$1","rules","code_inline","tokens","idx","options","env","slf","token2","renderAttrs","content","code_block","fence","highlighted","arr","tmpAttrs","tmpToken","info","langName","langAttrs","highlight","attrIndex","attrs","langPrefix","image","renderInlineAsText","children","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","Renderer","nextToken","needLf","hidden","block","nesting","tag","type","renderInline","len","render","renderer","Ruler$3","__rules__","__cache__","Ruler","__find__","__compile__","self","chains","rule","enabled","alt","altName","chain","fn","at","index","opt","Error","before","beforeName","ruleName","splice","after","afterName","enable","list3","ignoreInvalid","isArray","enableOnly","disable","getRules","chainName","ruler","NEWLINES_RE","NULL_RE","isLinkClose","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","p","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","QUOTE_TEST_RE","QUOTE_RE","replaceAt","process_inlines","text3","t","thisLevel","item","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","canOpen","canClose","isSingle","stack","openQuote","closeQuote","OUTER","lastIndex","single","quotes","token","Token$3","map","markup","meta","Token","attrPush","attrData","attrSet","value","attrGet","attrJoin","StateCore","inlineMode","state_core","_rules","tok","currentToken","nodes","ln","lastPos","htmlLinkLevel","fullUrl","urlText","links","blockTokens","linkify","pretest","normalizeLink","validateLink","schema","normalizeLinkText","blkIdx","typographer","Core","process","State","require$$7","parser_core","getLine","line","bMarks","tShift","eMarks","escapedSplit","isEscaped","current","substring","skipBulletListMarker","startLine","skipOrderedListMarker","open_tag","close_tag","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","html_re","block_names","HTML_SEQUENCES","StateBlock","s","indent","offset","indent_found","sCount","bsCount","blkIndent","lineMax","tight","ddIndent","listIndent","parentType","isEmpty","skipEmptyLines","from","skipSpaces","skipSpacesBack","min","skipChars","skipCharsBack","getLines","begin","end","keepLastLF","lineIndent","first","last","queue","lineStart","state_block","endLine","silent","lineText","nextLine","columns","columnCount","aligns","tableLines","tbodyLines","oldParentType","terminate","terminatorRules","firstCh","secondCh","shift","pop","params","mem","haveEndMarker","adjustTab","initial","lastLineEmpty","oldBMarks","oldBSCount","oldIndent","oldSCount","oldTShift","spaceAfterMarker","isOutdented","oldLineMax","tokenize","cnt","contentStart","indentAfterMarker","isOrdered","itemLines","listLines","listTokIdx","markerCharCode","markerValue","oldListIndent","oldTight","posAfterMarker","prevEmptyEnd","isTerminatingParagraph","Number","Math","markTightParagraphs","_endLine","destEndPos","destEndLineNo","href","label","res","title","references","html","tmp","ParserBlock$1","_rules$1","ParserBlock","hasEmptyLines","maxNesting","outTokens","require$$12","parser_block","isTerminatorChar","ESCAPED","postProcess$1","delimiters","startDelim","endDelim","loneMarkers","marker","strikethrough","scanned","scanDelims","open","can_open","close","can_close","postProcess","curr","tokens_meta","isStrong","emphasis","EMAIL_RE","AUTOLINK_RE","DIGITAL_RE","NAMED_RE","processDelimiters","closerIdx","openerIdx","closer","opener","minOpenerIdx","newMinOpenerIdx","isOddMatch","lastJump","openersBottom","headerIdx","lastTokenIdx","jumps","StateInline","pending","pendingLevel","_prev_delimiters","backticks","backticksScanned","pushPending","token_meta","canSplitWord","count","left_flanking","right_flanking","state_inline","pmax","ws","matchStart","matchEnd","openerLength","closerLength","require$$5","require$$6","labelStart","ref","parseReference","lc","isLetter","_rules2","ParserInline$1","ruler2","ParserInline","require$$14","parser_inline","_class","isFunction","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","defaultSchemas","validate","tail","re","src_auth","src_host_port_strict","src_path","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto","src_email_name","src_host_strict","tlds_default","compile","opts","re2","__opts__","src_Any","src_Cc","src_Z","src_P","src_ZPCc","src_ZCc","src_pseudo_letter","src_ip4","src_xn","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","tpl_host_fuzzy_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","tpl_host_fuzzy_test","tpl_email_fuzzy","tpl_link_fuzzy","tpl_link_no_ip_fuzzy","tlds2","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","re$1","email_fuzzy","link_fuzzy","link_no_ip_fuzzy","host_fuzzy_test","aliases","schemaError","val","__compiled__","__schemas__","compiled","link","isRegExp","createValidator","normalize","alias","slist","filter","schema_test","schema_search","__index__","__text_cache__","resetScanCache","Match","__last_index__","__schema__","raw","createMatch","LinkifyIt$1","schemas","LinkifyIt","reduce","acc","add","definition","set","m","ml","me","next","tld_pos","testSchemaAt","tlds","keepOld","sort","el2","reverse","linkifyIt","maxInt","regexPunycode","regexNonASCII","regexSeparators","errors","overflow","floor","stringFromCharCode","error","RangeError","mapDomain","parts","encoded","array","ucs2decode","output","counter","extra","ucs2encode","digitToBasic","digit","flag","adapt","delta2","numPoints","firstTime","baseMinusTMin","base","input","inputLength","n","bias","basic","oldi","w","codePoint","baseMinusT","out","currentValue","basicLength","handledCPCount","handledCPCountPlusOne","q","qMinusT","toUnicode","toASCII","punycode","version","ucs2","utils","ParserCore","config","default","components","core","zero","rules2","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","RECODE_HOSTNAME_FOR","parsed","er","MarkdownIt","presetName","configure","presets","missed","use","plugin","args","apply","parseInline","markdownIt"],"mappings":"sDAKAA,8xwBCLAC,EAAe,02DCIXC,EAAc,GAsClB,SAAgBC,EAAAC,EAAQC,EAASC,GAC/B,IAAIC,EAAGC,EAAGC,EAAMC,EAAUC,EACtBC,EAAS,GAcb,IAZuB,iBAAZP,IAEMC,EAAAD,EACfA,EAAUQ,EAAOC,mBAGQ,IAAhBR,IACKA,GAAA,GAGhBK,EA9CF,SAAwBN,GAClB,IAAAE,EAAGQ,EAAIJ,EAAQT,EAAYG,GAC/B,GAAIM,EAAgB,OAAAA,EAIpB,IAFAA,EAAQT,EAAYG,GAAW,GAE1BE,EAAI,EAAGA,EAAI,IAAKA,IACnBQ,EAAKC,OAAOC,aAAaV,GAErB,cAAcW,KAAKH,GAErBJ,EAAMQ,KAAKJ,GAEXJ,EAAMQ,KAAK,KAAO,IAAMZ,EAAEa,SAAS,IAAIC,eAAeC,OAAM,IAIhE,IAAKf,EAAI,EAAGA,EAAIF,EAAQkB,OAAQhB,IACxBI,EAAAN,EAAQmB,WAAWjB,IAAMF,EAAQE,GAGlC,OAAAI,EAyBCc,CAAepB,GAElBE,EAAI,EAAGC,EAAIJ,EAAOmB,OAAQhB,EAAIC,EAAGD,IAGpC,GAFAE,EAAOL,EAAOoB,WAAWjB,GAErBD,GAAwB,KAATG,GAAyBF,EAAI,EAAIC,GAC9C,iBAAiBU,KAAKd,EAAOkB,MAAMf,EAAI,EAAGA,EAAI,IACtCK,GAAAR,EAAOkB,MAAMf,EAAGA,EAAI,GACzBA,GAAA,OAKT,GAAIE,EAAO,IACTG,GAAUD,EAAMF,QAId,GAAAA,GAAQ,OAAUA,GAAQ,MAA1B,CACF,GAAIA,GAAQ,OAAUA,GAAQ,OAAUF,EAAI,EAAIC,IACnCE,EAAAN,EAAOoB,WAAWjB,EAAI,KACjB,OAAUG,GAAY,MAAQ,CAC5CE,GAAUc,mBAAmBtB,EAAOG,GAAKH,EAAOG,EAAI,IACpDA,IACA,SAGMK,GAAA,iBAIZA,GAAUc,mBAAmBtB,EAAOG,IAG/B,OAAAK,EAGTC,EAAOC,aAAiB,uBACxBD,EAAOc,eAAiB,YAGxB,IAAAC,EAAiBf,EC3FbgB,EAAc,GAwBlB,SAAAC,EAAgB1B,EAAQC,GAClB,IAAAM,EAQJ,MANuB,iBAAZN,IACTA,EAAU0B,EAAOjB,cAGnBH,EA7BF,SAAwBN,GAClB,IAAAE,EAAGQ,EAAIJ,EAAQkB,EAAYxB,GAC/B,GAAIM,EAAgB,OAAAA,EAIpB,IAFAA,EAAQkB,EAAYxB,GAAW,GAE1BE,EAAI,EAAGA,EAAI,IAAKA,IACnBQ,EAAKC,OAAOC,aAAaV,GACzBI,EAAMQ,KAAKJ,GAGb,IAAKR,EAAI,EAAGA,EAAIF,EAAQkB,OAAQhB,IAE9BI,EADAI,EAAKV,EAAQmB,WAAWjB,IACZ,KAAO,IAAMQ,EAAGK,SAAS,IAAIC,eAAeC,OAAM,GAGzD,OAAAX,EAaCqB,CAAe3B,GAEhBD,EAAO6B,QAAQ,qBAAqB,SAASC,GAClD,IAAI3B,EAAGC,EAAG2B,EAAIC,EAAIC,EAAIC,EAAIC,EACtB3B,EAAS,GAER,IAAAL,EAAI,EAAGC,EAAI0B,EAAIX,OAAQhB,EAAIC,EAAGD,GAAK,GACtC4B,EAAKK,SAASN,EAAIZ,MAAMf,EAAI,EAAGA,EAAI,GAAI,KAE9B,IACPK,GAAUD,EAAMwB,GAIE,MAAV,IAAAA,IAAmB5B,EAAI,EAAIC,GAIf,MAAV,KAFV4B,EAAKI,SAASN,EAAIZ,MAAMf,EAAI,EAAGA,EAAI,GAAI,OAMzBK,IAHJ2B,EAAAJ,GAAM,EAAK,KAAe,GAALC,GAEnB,IACE,KAEApB,OAAOC,aAAasB,GAG3BhC,GAAA,GAKW,MAAV,IAAA4B,IAAmB5B,EAAI,EAAIC,IAEnC4B,EAAKI,SAASN,EAAIZ,MAAMf,EAAI,EAAGA,EAAI,GAAI,IACvC8B,EAAKG,SAASN,EAAIZ,MAAMf,EAAI,EAAGA,EAAI,GAAI,IAEnB,MAAV,IAAA6B,IAAkC,MAAV,IAALC,KAIfzB,IAHZ2B,EAAQJ,GAAM,GAAM,MAAYC,GAAM,EAAK,KAAe,GAALC,GAE3C,MAAUE,GAAO,OAAUA,GAAO,MAChC,MAEAvB,OAAOC,aAAasB,GAG3BhC,GAAA,GAKW,MAAV,IAAA4B,IAAmB5B,EAAI,EAAIC,IAEnC4B,EAAKI,SAASN,EAAIZ,MAAMf,EAAI,EAAGA,EAAI,GAAI,IACvC8B,EAAKG,SAASN,EAAIZ,MAAMf,EAAI,EAAGA,EAAI,GAAI,IACvC+B,EAAKE,SAASN,EAAIZ,MAAMf,EAAI,GAAIA,EAAI,IAAK,IAErB,MAAV,IAAL6B,IAAuC,MAAV,IAALC,IAAuC,MAAV,IAALC,MAC3CC,EAAAJ,GAAM,GAAM,QAAcC,GAAM,GAAM,OAAaC,GAAM,EAAK,KAAe,GAALC,GAEtE,OAAWC,EAAM,QACf3B,GAAA,QAEH2B,GAAA,MACP3B,GAAUI,OAAOC,aAAa,OAAiBsB,GAAA,IAAK,OAAgB,KAAAA,KAGjEhC,GAAA,GAKCK,GAAA,IAGL,OAAAA,KAKXmB,EAAOjB,aAAiB,cACxBiB,EAAOJ,eAAiB,GAGxB,IAAAc,EAAiBV,EC5EjB,SAAeW,IACbC,KAAKC,SAAW,KAChBD,KAAKE,QAAU,KACfF,KAAKG,KAAO,KACZH,KAAKI,KAAO,KACZJ,KAAKK,SAAW,KAChBL,KAAKM,KAAO,KACZN,KAAKO,OAAS,KACdP,KAAKQ,SAAW,KAOlB,IAAIC,EAAkB,oBAClBC,EAAc,WAGdC,EAAoB,qCAOpBC,EAAS,CAAE,IAAK,IAAK,IAAK,KAAM,IAAK,KAAMC,OAHlC,CAAE,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,OAMhDC,EAAa,CAAE,KAAOD,OAAOD,GAK7BG,EAAe,CAAE,IAAK,IAAK,IAAK,IAAK,KAAMF,OAAOC,GAClDE,EAAkB,CAAE,IAAK,IAAK,KAE9BC,EAAsB,yBACtBC,EAAoB,+BAIpBC,EAAmB,CACjBC,YAAc,EACd,eAAe,GAGjBC,EAAkB,CAChBC,MAAQ,EACRC,OAAS,EACTC,KAAO,EACPC,QAAU,EACVC,MAAQ,EACR,SAAS,EACT,UAAU,EACV,QAAQ,EACR,WAAW,EACX,SAAS,GAYf3B,EAAI4B,UAAUC,MAAQ,SAASC,EAAKC,GAClC,IAAIlE,EAAGC,EAAGkE,EAAYC,EAAK9B,EACvB+B,EAAOJ,EAMX,GAFAI,EAAOA,EAAKC,QAEPJ,GAA+C,IAA1BD,EAAIM,MAAM,KAAKvD,OAAc,CAEjD,IAAAwD,EAAazB,EAAkB0B,KAAKJ,GACxC,GAAIG,EAKK,OAJPpC,KAAKQ,SAAW4B,EAAW,GACvBA,EAAW,KACbpC,KAAKO,OAAS6B,EAAW,IAEpBpC,KAIP,IAAAsC,EAAQ7B,EAAgB4B,KAAKJ,GAoBjC,GAnBIK,IAEFP,GADAO,EAAQA,EAAM,IACKC,cACnBvC,KAAKC,SAAWqC,EACTL,EAAAA,EAAKO,OAAOF,EAAM1D,UAOvBkD,GAAqBQ,GAASL,EAAKQ,MAAM,6BACjCvC,EAAsB,OAAtB+B,EAAKO,OAAO,EAAG,KACCF,GAAAnB,EAAiBmB,KACzCL,EAAOA,EAAKO,OAAO,GACnBxC,KAAKE,SAAU,KAIdiB,EAAiBmB,QACLA,IAAUjB,EAAgBiB,IAAU,CAkBnD,IAUInC,EAAMuC,EAVNC,GAAU,EACd,IAAK/E,EAAI,EAAGA,EAAIoD,EAAgBpC,OAAQhB,KAE1B,KADNoE,EAAAC,EAAKW,QAAQ5B,EAAgBpD,QACJ,IAAA+E,GAAMX,EAAMW,KAC/BA,EAAAX,GA0Bd,KARmB,KATjBU,GAFkB,IAAhBC,EAEOV,EAAKY,YAAY,KAIjBZ,EAAKY,YAAY,IAAKF,MAMxBxC,EAAA8B,EAAKtD,MAAM,EAAG+D,GACdT,EAAAA,EAAKtD,MAAM+D,EAAS,GAC3B1C,KAAKG,KAAOA,GAIJwC,GAAA,EACL/E,EAAI,EAAGA,EAAImD,EAAanC,OAAQhB,KAEvB,KADNoE,EAAAC,EAAKW,QAAQ7B,EAAanD,QACD,IAAA+E,GAAMX,EAAMW,KAC/BA,EAAAX,IAIM,IAAhBW,IACFA,EAAUV,EAAKrD,QAGS,MAAtBqD,EAAKU,EAAU,IAAcA,IAC7B,IAAAG,EAAOb,EAAKtD,MAAM,EAAGgE,GACzBV,EAAOA,EAAKtD,MAAMgE,GAGlB3C,KAAK+C,UAAUD,GAIV9C,KAAAK,SAAWL,KAAKK,UAAY,GAI7B,IAAA2C,EAAoC,MAArBhD,KAAKK,SAAS,IACe,MAA5CL,KAAKK,SAASL,KAAKK,SAASzB,OAAS,GAGzC,IAAKoE,EAAc,CACb,IAAAC,EAAYjD,KAAKK,SAAS8B,MAAM,MACpC,IAAKvE,EAAI,EAAGC,EAAIoF,EAAUrE,OAAQhB,EAAIC,EAAGD,IAAK,CAC5C,IAAIsF,EAAOD,EAAUrF,GACrB,GAAKsF,IACAA,EAAKT,MAAMxB,GAAsB,CAEpC,IADA,IAAIkC,EAAU,GACLC,EAAI,EAAGC,EAAIH,EAAKtE,OAAQwE,EAAIC,EAAGD,IAClCF,EAAKrE,WAAWuE,GAAK,IAIZD,GAAA,IAEXA,GAAWD,EAAKE,GAIhB,IAACD,EAAQV,MAAMxB,GAAsB,CACnC,IAAAqC,EAAaL,EAAUtE,MAAM,EAAGf,GAChC2F,EAAUN,EAAUtE,MAAMf,EAAI,GAC9B4F,EAAMN,EAAKT,MAAMvB,GACjBsC,IACFF,EAAW9E,KAAKgF,EAAI,IACpBD,EAAQE,QAAQD,EAAI,KAElBD,EAAQ3E,SACHqD,EAAAsB,EAAQG,KAAK,KAAOzB,GAExBjC,KAAAK,SAAWiD,EAAWI,KAAK,KAChC,SAMJ1D,KAAKK,SAASzB,OA1LD,MA2LfoB,KAAKK,SAAW,IAKd2C,IACFhD,KAAKK,SAAWL,KAAKK,SAASmC,OAAO,EAAGxC,KAAKK,SAASzB,OAAS,IAK/D,IAAA0B,EAAO2B,EAAKW,QAAQ,MACP,IAAbtC,IAEGN,KAAAM,KAAO2B,EAAKO,OAAOlC,GACjB2B,EAAAA,EAAKtD,MAAM,EAAG2B,IAEnB,IAAAqD,EAAK1B,EAAKW,QAAQ,KAWf,OAVQ,IAAXe,IACG3D,KAAAO,OAAS0B,EAAKO,OAAOmB,GACnB1B,EAAAA,EAAKtD,MAAM,EAAGgF,IAEnB1B,IAAQjC,KAAKQ,SAAWyB,GACxBZ,EAAgBU,IAChB/B,KAAKK,WAAaL,KAAKQ,WACzBR,KAAKQ,SAAW,IAGXR,MAGTD,EAAI4B,UAAUoB,UAAY,SAASD,GAC7B,IAAA1C,EAAOM,EAAY2B,KAAKS,GACxB1C,IAEW,OADbA,EAAOA,EAAK,MAELJ,KAAAI,KAAOA,EAAKoC,OAAO,IAE1BM,EAAOA,EAAKN,OAAO,EAAGM,EAAKlE,OAASwB,EAAKxB,SAEvCkE,IAAQ9C,KAAKK,SAAWyC,IAG9B,IAAAlB,EA7MA,SAAkBC,EAAKC,GACjB,GAAAD,GAAOA,aAAe9B,EAAc,OAAA8B,EAExC,IAAI+B,EAAI,IAAI7D,EAEL,OADP6D,EAAEhC,MAAMC,EAAKC,GACN8B,GC5GYC,EAAA3F,OAAG4F,EACHD,EAAAzE,OAAG2E,EACHF,EAAAG,OCDJ,SAAgBnC,GAC/B,IAAI5D,EAAS,GAkBN,OAhBPA,GAAU4D,EAAI5B,UAAY,GAChBhC,GAAA4D,EAAI3B,QAAU,KAAO,GAC/BjC,GAAU4D,EAAI1B,KAAO0B,EAAI1B,KAAO,IAAM,GAElC0B,EAAIxB,WAA8C,IAAlCwB,EAAIxB,SAASuC,QAAQ,KAE7B3E,GAAA,IAAM4D,EAAIxB,SAAW,IAE/BpC,GAAU4D,EAAIxB,UAAY,GAG5BpC,GAAU4D,EAAIzB,KAAO,IAAMyB,EAAIzB,KAAO,GACtCnC,GAAU4D,EAAIrB,UAAY,GAC1BvC,GAAU4D,EAAItB,QAAU,GACxBtC,GAAU4D,EAAIvB,MAAQ,IDfxBuD,EAAAjC,MAAwBqC,WENxB3G,EAAe,mICAfA,EAAe,qBCAfA,EAAe,2DCEJ4G,EAAAC,IAAGL,EACJI,EAAAE,GAAIL,EACJG,EAAAG,GCJK,wNDKNH,EAAAI,EAAKL,EACdC,EAAAK,EAAcC,cEGV,IAAAC,EAAkBC,OAAO/C,UAAUgD,eAEvC,SAAAC,EAAaC,EAAQC,GACZ,OAAAL,EAAgBM,KAAKF,EAAQC,GA+BtC,SAAAE,EAA2BC,GAGrB,QAAAA,GAAK,OAAUA,GAAK,WAEpBA,GAAK,OAAUA,GAAK,SACH,QAAZ,MAAAA,IAAuC,QAAZ,MAAJA,OAE5BA,GAAK,GAAQA,GAAK,KACZ,KAANA,MACAA,GAAK,IAAQA,GAAK,QAClBA,GAAK,KAAQA,GAAK,QAElBA,EAAI,eAIV,SAAAC,EAAuBD,GAErB,GAAIA,EAAI,MAAQ,CAEd,IAAIE,EAAa,QADZF,GAAA,QAC2B,IAC5BG,EAAa,OAAc,KAAAH,GAExB,OAAA5G,OAAOC,aAAa6G,EAAYC,GAEzC,OAAO/G,OAAOC,aAAa2G,GAI7B,IAAII,EAAkB,8CAElBC,EAAkB,IAAIC,OAAOF,EAAeG,OAAS,IADnC,6BACmDA,OAAQ,MAE7EC,EAAyB,qCAEzBC,EAAW5B,EA2Cf,IAAI6B,EAAsB,SACtBC,EAAyB,UACzBC,EAAoB,CACtB,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,UAGP,SAAAC,EAA2B1H,GACzB,OAAOyH,EAAkBzH,GAY3B,IAAI2H,EAAmB,uBAwCvB,IAAIC,EAAmBjC,EAiHvBkC,EAAAC,IAA8B,GAC9BD,EAAQC,IAAIrC,MAAkBsC,EAC9BF,EAAQC,IAAIE,QAAkBnC,EAE9BgC,EAAAI,OA5RA,SAAgBC,GACd,IAAIC,EAAUC,MAAM7E,UAAUhD,MAAMoG,KAAK0B,UAAW,GAc7C,OAZCF,EAAAG,SAAQ,SAAUlB,GACxB,GAAKA,EAAL,CAEI,GAAkB,iBAAXA,EACH,MAAA,IAAImB,UAAUnB,EAAS,kBAG/Bd,OAAOkC,KAAKpB,GAAQkB,SAAQ,SAAU5B,GACpCwB,EAAIxB,GAAOU,EAAOV,UAIfwB,GA8QTL,EAAAY,SAvSA,SAAkBP,GAAO,MAAuB,oBAFhD,SAAgBA,GAAc,OAAA5B,OAAO/C,UAAUlD,SAASsG,KAAKuB,GAE7BQ,CAAOR,IAwSvCL,EAAAc,IAA8BnC,EAC9BqB,EAAAe,WAtMA,SAAoBC,GACd,OAAAA,EAAIrE,QAAQ,MAAQ,EAAYqE,EAC7BA,EAAI3H,QAAQ+F,EAAgB,OAqMrCY,EAAAiB,YAlMA,SAAqBD,GACnB,OAAIA,EAAIrE,QAAQ,MAAQ,GAAKqE,EAAIrE,QAAQ,KAAO,EAAYqE,EAErDA,EAAI3H,QAAQgG,GAAiB,SAAU6B,EAAOC,EAASC,GAC5D,OAAID,GAlCR,SAA8BD,EAAOG,GACnC,IAAIxJ,EAAO,EAEP,OAAA8G,EAAIc,EAAU4B,GACT5B,EAAS4B,GAGS,KAAvBA,EAAKzI,WAAW,IAAsB4G,EAAuBlH,KAAK+I,IAIhEtC,EAHJlH,EAAiC,MAA1BwJ,EAAK,GAAG/E,cACb1C,SAASyH,EAAK3I,MAAM,GAAI,IAAMkB,SAASyH,EAAK3I,MAAM,GAAI,KAG/CuG,EAAcpH,GAIlBqJ,EAmBEI,CAAqBJ,EAAOE,OA8LvCpB,EAAAuB,kBAA8BxC,EAC9BiB,EAAAwB,cAA8BvC,EAE9Be,EAAAyB,WA9KA,SAAoBT,GACd,OAAAtB,EAAoBpH,KAAK0I,GACpBA,EAAI3H,QAAQsG,EAAwBE,GAEtCmB,GA2KThB,EAAA0B,eAjRwB,SAAAC,EAAKC,EAAKC,GACzB,MAAA,GAAGjH,OAAO+G,EAAIjJ,MAAM,EAAGkJ,GAAMC,EAAaF,EAAIjJ,MAAMkJ,EAAM,KAiRnE5B,EAAA8B,QA/JA,SAAiBjK,GACP,OAAAA,GACD,KAAA,EACA,KAAA,GACI,OAAA,EAEJ,OAAA,GA0JTmI,EAAA+B,aAtJA,SAAsBlK,GAChB,GAAAA,GAAQ,MAAUA,GAAQ,KAAiB,OAAA,EACvC,OAAAA,GACD,KAAA,EACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,IACA,KAAA,KACA,KAAA,KACA,KAAA,KACA,KAAA,MACI,OAAA,EAEJ,OAAA,GAuITmI,EAAAgC,eAlHA,SAAwB7J,GACd,OAAAA,GACD,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,IACA,KAAA,IACA,KAAA,IACA,KAAA,IACI,OAAA,EAAA,QAEA,OAAA,IA+Eb6H,EAAAiC,YA/HA,SAAqB9J,GACnB,OAAO4H,EAAiBzH,KAAKH,IA+H/B6H,EAAAkC,SAzKA,SAAkBlB,GACT,OAAAA,EAAI3H,QAAQyG,EAAkB,SAyKvCE,EAAAmC,mBA3EA,SAA4BnB,GA+C1B,OA5CMA,EAAAA,EAAI/E,OAAO5C,QAAQ,OAAQ,KAQP,MAAtB,IAAIiD,gBACA0E,EAAAA,EAAI3H,QAAQ,KAAM,MAmCnB2H,EAAI1E,cAAc7D,4BC3RvBwI,EAAcpD,EAA2BoD,YCAzCA,EAAcpD,EAA2BoD,YCDvBmB,EAAAC,eCGL,SAAwBC,EAAOC,EAAOC,GACjD,IAAAC,EAAOC,EAAOC,EAAQC,EACtBC,KACAC,EAAMR,EAAMS,OACZC,EAASV,EAAMV,IAKZ,IAHPU,EAAMV,IAAMW,EAAQ,EACZE,EAAA,EAEDH,EAAMV,IAAMkB,GAAK,CAEtB,GAAe,MADNH,EAAAL,EAAMX,IAAI/I,WAAW0J,EAAMV,OAGpB,MADda,EACiB,CACPC,GAAA,EACR,MAMJ,GAFAE,EAAUN,EAAMV,IACVU,EAAAW,GAAGC,OAAOC,UAAUb,GACX,KAAXK,EACE,GAAAC,IAAYN,EAAMV,IAAM,EAE1Ba,SAAA,GACSD,EAEF,OADPF,EAAMV,IAAMoB,GACL,EAYN,OAPHN,IACFG,EAAWP,EAAMV,KAInBU,EAAMV,IAAMoB,EAELH,GDzCmBT,EAAAgB,qBFGX,SAA8BpC,EAAKY,EAAKkB,GACvD,IAAIjL,EAAM4K,EAENF,EAAQX,EACR5J,EAAS,CACPqL,IAAI,EACJzB,IAAK,EACL0B,MAAO,EACPtC,IAAK,IAGP,GAAwB,KAAxBA,EAAIpI,WAAWgJ,GAAuB,CAExC,IADAA,IACOA,EAAMkB,GAAK,CAEhB,GAAa,MADbjL,EAAOmJ,EAAIpI,WAAWgJ,IACe,OAAA5J,EACrC,GAAa,KAATH,EAAgC,OAAAG,EACpC,GAAa,KAATH,EAIK,OAHPG,EAAO4J,IAAMA,EAAM,EACnB5J,EAAOgJ,IAAMC,EAAYD,EAAItI,MAAM6J,EAAQ,EAAGX,IAC9C5J,EAAOqL,IAAK,EACLrL,EAEI,KAATH,GAAyB+J,EAAM,EAAIkB,EAC9BlB,GAAA,EAITA,IAIK,OAAA5J,EAMT,IADQyK,EAAA,EACDb,EAAMkB,GAGE,MAFbjL,EAAOmJ,EAAIpI,WAAWgJ,OAKlB/J,EAAO,IAAiB,MAATA,IAEnB,GAAa,KAATA,GAAyB+J,EAAM,EAAIkB,EAAvC,CACE,GAAgC,KAA5B9B,EAAIpI,WAAWgJ,EAAM,GAAe,MACjCA,GAAA,MAFT,CAMA,GAAa,KAAT/J,KACF4K,EACY,GAAa,OAAAzK,EAG3B,GAAa,KAATH,EAAuB,CACzB,GAAc,IAAV4K,EAAe,MACnBA,IAGFb,IAGF,OAAIW,IAAUX,GACA,IAAVa,IAEJzK,EAAOgJ,IAAMC,EAAYD,EAAItI,MAAM6J,EAAOX,IAC1C5J,EAAOsL,MAnEK,EAoEZtL,EAAO4J,IAAMA,EACb5J,EAAOqL,IAAK,GANgBrL,GEnE9BoK,EAAAmB,eDEiB,SAAwBvC,EAAKY,EAAKkB,GACjD,IAAIjL,EACA8K,EACAW,EAAQ,EACRf,EAAQX,EACR5J,EAAS,CACPqL,IAAI,EACJzB,IAAK,EACL0B,MAAO,EACPtC,IAAK,IAGX,GAAIY,GAAOkB,EAAc,OAAA9K,EAIzB,GAAe,MAFf2K,EAAS3B,EAAIpI,WAAWgJ,KAEkB,KAAXe,GAAsC,KAAXA,EAAkC,OAAA3K,EAO5F,IALA4J,IAGe,KAAXe,IAA4BA,EAAA,IAEzBf,EAAMkB,GAAK,CAEhB,IADAjL,EAAOmJ,EAAIpI,WAAWgJ,MACTe,EAKJ,OAJP3K,EAAO4J,IAAMA,EAAM,EACnB5J,EAAOsL,MAAQA,EACftL,EAAOgJ,IAAMC,EAAYD,EAAItI,MAAM6J,EAAQ,EAAGX,IAC9C5J,EAAOqL,IAAK,EACLrL,EACE,GAAS,KAATH,GAAoC,KAAX8K,EAC3B,OAAA3K,EACW,KAATH,EACTyL,IACkB,KAATzL,GAAyB+J,EAAM,EAAIkB,IAC5ClB,IAC4B,KAAxBZ,EAAIpI,WAAWgJ,IACjB0B,KAIJ1B,IAGK,OAAA5J,GG3CT,IAAIoI,EAAkBvC,EAA0BuC,OAC5Ca,EAAkBpD,EAA0BoD,YAC5CQ,EAAkB5D,EAA0B4D,WAK5C+B,EAAgB,GAoHpB,SAAoBC,IA8Bb1J,KAAA2J,MAAQtD,EAAO,GAAIoD,GA/I1BA,EAAcG,YAAc,SAAUC,EAAQC,EAAKC,EAASC,EAAKC,GAC/D,IAAIC,EAAQL,EAAOC,GAEX,MAAA,QAAUG,EAAIE,YAAYD,GAAS,IACnCxC,EAAWmC,EAAOC,GAAKM,SACvB,WAIVX,EAAcY,WAAa,SAAUR,EAAQC,EAAKC,EAASC,EAAKC,GAC9D,IAAIC,EAAQL,EAAOC,GAEX,MAAA,OAASG,EAAIE,YAAYD,GAAS,UAClCxC,EAAWmC,EAAOC,GAAKM,SACvB,mBAIVX,EAAca,MAAQ,SAAUT,EAAQC,EAAKC,EAASC,EAAKC,GACzD,IAIIM,EAAa3M,EAAG4M,EAAKC,EAAUC,EAJ/BR,EAAQL,EAAOC,GACfa,EAAOT,EAAMS,KAAOzD,EAAYgD,EAAMS,MAAMzI,OAAS,GACrD0I,EAAW,GACXC,EAAY,GAeZ,OAZAF,IAEFC,GADAJ,EAAMG,EAAKxI,MAAM,WACF,GACH0I,EAAAL,EAAI7L,MAAM,GAAG+E,KAAK,KASI,KALlC6G,EADER,EAAQe,WACIf,EAAQe,UAAUZ,EAAME,QAASQ,EAAUC,IAE3CnD,EAAWwC,EAAME,UAGjBxH,QAAQ,QACf2H,EAAc,KAMnBI,GACF/M,EAAWsM,EAAMa,UAAU,SAC3BN,EAAWP,EAAMc,MAAQd,EAAMc,MAAMrM,QAAU,GAE3Cf,EAAI,EACN6M,EAASjM,KAAK,CAAE,QAASuL,EAAQkB,WAAaL,KAErCH,EAAA7M,GAAK6M,EAAS7M,GAAGe,QAC1B8L,EAAS7M,GAAG,IAAM,IAAMmM,EAAQkB,WAAaL,GAIpCF,EAAA,CACTM,MAAOP,GAGD,aAAeR,EAAIE,YAAYO,GAAY,IAC3CH,EACA,mBAIF,aAAeN,EAAIE,YAAYD,GAAS,IACxCK,EACA,mBAIVd,EAAcyB,MAAQ,SAAUrB,EAAQC,EAAKC,EAASC,EAAKC,GACzD,IAAIC,EAAQL,EAAOC,GAUZ,OAHDI,EAAAc,MAAMd,EAAMa,UAAU,QAAQ,GAClCd,EAAIkB,mBAAmBjB,EAAMkB,SAAUrB,EAASC,GAE3CC,EAAIoB,YAAYxB,EAAQC,EAAKC,IAItCN,EAAc6B,UAAY,SAAUzB,EAAQC,EAAKC,GACxC,OAAAA,EAAQwB,SAAW,WAAa,UAEzC9B,EAAc+B,UAAY,SAAU3B,EAAQC,EAAKC,GAC/C,OAAOA,EAAQ0B,OAAU1B,EAAQwB,SAAW,WAAa,SAAY,MAIvE9B,EAAciC,KAAO,SAAU7B,EAAQC,GAC9B,OAAApC,EAAWmC,EAAOC,GAAKM,UAIhCX,EAAckC,WAAa,SAAU9B,EAAQC,GAC3C,OAAOD,EAAOC,GAAKM,SAErBX,EAAcmC,YAAc,SAAU/B,EAAQC,GAC5C,OAAOD,EAAOC,GAAKM,SAgDrByB,EAASlK,UAAUwI,YAAc,SAAqBD,GACpD,IAAItM,EAAGC,EAAGI,EAEN,IAACiM,EAAMc,MAAgB,MAAA,GAItB,IAFI/M,EAAA,GAEJL,EAAI,EAAGC,EAAIqM,EAAMc,MAAMpM,OAAQhB,EAAIC,EAAGD,IAC/BK,GAAA,IAAMyJ,EAAWwC,EAAMc,MAAMpN,GAAG,IAAM,KAAO8J,EAAWwC,EAAMc,MAAMpN,GAAG,IAAM,IAGlF,OAAAK,GAaT4N,EAASlK,UAAU0J,YAAc,SAAqBxB,EAAQC,EAAKC,GACjE,IAAI+B,EACA7N,EAAS,GACT8N,GAAS,EACT7B,EAAQL,EAAOC,GAGnB,OAAII,EAAM8B,OACD,IAUL9B,EAAM+B,YAAS/B,EAAMgC,SAAkBpC,GAAOD,EAAOC,EAAM,GAAGkC,SACtD/N,GAAA,MAIZA,KAAkC,IAAjBiM,EAAAgC,QAAiB,KAAO,KAAOhC,EAAMiC,IAGtDlO,GAAU+B,KAAKmK,YAAYD,GAGL,IAAlBA,EAAMgC,SAAiBnC,EAAQwB,WACvBtN,GAAA,MAIRiM,EAAM+B,QACCF,GAAA,EAEa,IAAlB7B,EAAMgC,SACJpC,EAAM,EAAID,EAAOjL,SAGI,YAFvBkN,EAAYjC,EAAOC,EAAM,IAEXsC,MAAqBN,EAAUE,SAKZ,IAAtBF,EAAUI,SAAkBJ,EAAUK,MAAQjC,EAAMiC,OAFpDJ,GAAA,IAWjB9N,GAAU8N,EAAS,MAAQ,MAc7BF,EAASlK,UAAU0K,aAAe,SAAUxC,EAAQE,EAASC,GAK3D,IAJA,IAAIoC,EACAnO,EAAS,GACT0L,EAAQ3J,KAAK2J,MAER/L,EAAI,EAAG0O,EAAMzC,EAAOjL,OAAQhB,EAAI0O,EAAK1O,SAGjB,IAAhB+L,EAFXyC,EAAOvC,EAAOjM,GAAGwO,MAGfnO,GAAU0L,EAAMyC,GAAMvC,EAAQjM,EAAGmM,EAASC,EAAKhK,MAErC/B,GAAA+B,KAAKqL,YAAYxB,EAAQjM,EAAGmM,GAInC,OAAA9L,GAcT4N,EAASlK,UAAUwJ,mBAAqB,SAAUtB,EAAQE,EAASC,GAGjE,IAFA,IAAI/L,EAAS,GAEJL,EAAI,EAAG0O,EAAMzC,EAAOjL,OAAQhB,EAAI0O,EAAK1O,IACrB,SAAnBiM,EAAOjM,GAAGwO,KACZnO,GAAU4L,EAAOjM,GAAGwM,QACQ,UAAnBP,EAAOjM,GAAGwO,KACnBnO,GAAU+B,KAAKmL,mBAAmBtB,EAAOjM,GAAGwN,SAAUrB,EAASC,GACnC,cAAnBH,EAAOjM,GAAGwO,OACTnO,GAAA,MAIP,OAAAA,GAaT4N,EAASlK,UAAU4K,OAAS,SAAU1C,EAAQE,EAASC,GACrD,IAAIpM,EAAG0O,EAAKF,EACRnO,EAAS,GACT0L,EAAQ3J,KAAK2J,MAEjB,IAAK/L,EAAI,EAAG0O,EAAMzC,EAAOjL,OAAQhB,EAAI0O,EAAK1O,IAG3B,YAFbwO,EAAOvC,EAAOjM,GAAGwO,MAGfnO,GAAU+B,KAAKqM,aAAaxC,EAAOjM,GAAGwN,SAAUrB,EAASC,QACzB,IAAhBL,EAAMyC,GACtBnO,GAAU0L,EAAME,EAAOjM,GAAGwO,MAAMvC,EAAQjM,EAAGmM,EAASC,EAAKhK,MAEzD/B,GAAU+B,KAAKqL,YAAYxB,EAAQjM,EAAGmM,EAASC,GAI5C,OAAA/L,GAGT,IAAAuO,EAAiBX,EC7TjB,SAAiBY,IAUfzM,KAAK0M,UAAY,GAOjB1M,KAAK2M,UAAY,KASnBC,EAAMjL,UAAUkL,SAAW,SAAUvF,GACnC,IAAA,IAAS1J,EAAI,EAAGA,EAAIoC,KAAK0M,UAAU9N,OAAQhB,IACzC,GAAIoC,KAAK0M,UAAU9O,GAAG0J,OAASA,EACtB,OAAA1J,EAGJ,OAAA,GAMTgP,EAAMjL,UAAUmL,YAAc,WAC5B,IAAIC,EAAO/M,KACPgN,EAAS,CAAE,IAGVD,EAAAL,UAAUhG,SAAQ,SAAUuG,GAC1BA,EAAKC,SAELD,EAAAE,IAAIzG,SAAQ,SAAU0G,GACrBJ,EAAOpK,QAAQwK,GAAW,GAC5BJ,EAAOxO,KAAK4O,SAKlBL,EAAKJ,UAAY,GAEVK,EAAAtG,SAAQ,SAAU2G,GACvBN,EAAKJ,UAAUU,GAAS,GACnBN,EAAAL,UAAUhG,SAAQ,SAAUuG,GAC1BA,EAAKC,UAENG,GAASJ,EAAKE,IAAIvK,QAAQyK,GAAS,GAElCN,EAAAJ,UAAUU,GAAO7O,KAAKyO,EAAKK,YA+BtCV,EAAMjL,UAAU4L,GAAK,SAAUjG,EAAMgG,EAAIvD,GACnC,IAAAyD,EAAQxN,KAAK6M,SAASvF,GACtBmG,EAAM1D,GAAW,GAErB,IAAkB,IAAdyD,EAAsB,MAAA,IAAIE,MAAM,0BAA4BpG,GAE3DtH,KAAA0M,UAAUc,GAAOF,GAAKA,EAC3BtN,KAAK0M,UAAUc,GAAOL,IAAMM,EAAIN,KAAO,GACvCnN,KAAK2M,UAAY,MA4BnBC,EAAMjL,UAAUgM,OAAS,SAAUC,EAAYC,EAAUP,EAAIvD,GACvD,IAAAyD,EAAQxN,KAAK6M,SAASe,GACtBH,EAAM1D,GAAW,GAErB,IAAkB,IAAdyD,EAAsB,MAAA,IAAIE,MAAM,0BAA4BE,GAE3D5N,KAAA0M,UAAUoB,OAAON,EAAO,EAAG,CAC9BlG,KAAMuG,EACNX,SAAS,EACTI,GAAAA,EACAH,IAAKM,EAAIN,KAAO,KAGlBnN,KAAK2M,UAAY,MA4BnBC,EAAMjL,UAAUoM,MAAQ,SAAUC,EAAWH,EAAUP,EAAIvD,GACrD,IAAAyD,EAAQxN,KAAK6M,SAASmB,GACtBP,EAAM1D,GAAW,GAErB,IAAkB,IAAdyD,EAAsB,MAAA,IAAIE,MAAM,0BAA4BM,GAEhEhO,KAAK0M,UAAUoB,OAAON,EAAQ,EAAG,EAAG,CAClClG,KAAMuG,EACNX,SAAS,EACTI,GAAAA,EACAH,IAAKM,EAAIN,KAAO,KAGlBnN,KAAK2M,UAAY,MA0BnBC,EAAMjL,UAAUnD,KAAO,SAAUqP,EAAUP,EAAIvD,GAC7C,IAAI0D,EAAM1D,GAAW,GAErB/J,KAAK0M,UAAUlO,KAAK,CAClB8I,KAAMuG,EACNX,SAAS,EACTI,GAAAA,EACAH,IAAKM,EAAIN,KAAO,KAGlBnN,KAAK2M,UAAY,MAgBnBC,EAAMjL,UAAUsM,OAAS,SAAUC,EAAMC,GAClC3H,MAAM4H,QAAQF,KAASA,EAAO,CAAEA,IAErC,IAAIjQ,EAAS,GAeN,OAZFiQ,EAAAxH,SAAQ,SAAUY,GACjB,IAAAwC,EAAM9J,KAAK6M,SAASvF,GAExB,GAAIwC,EAAM,EAAG,CACX,GAAIqE,EAAiB,OACf,MAAA,IAAIT,MAAM,oCAAsCpG,GAEnDtH,KAAA0M,UAAU5C,GAAKoD,SAAU,EAC9BjP,EAAOO,KAAK8I,KACXtH,MAEHA,KAAK2M,UAAY,KACV1O,GAcT2O,EAAMjL,UAAU0M,WAAa,SAAUH,EAAMC,GACtC3H,MAAM4H,QAAQF,KAASA,EAAO,CAAEA,IAEhClO,KAAA0M,UAAUhG,SAAQ,SAAUuG,GAAQA,EAAKC,SAAU,KAExDlN,KAAKiO,OAAOC,EAAMC,IAgBpBvB,EAAMjL,UAAU2M,QAAU,SAAUJ,EAAMC,GACnC3H,MAAM4H,QAAQF,KAASA,EAAO,CAAEA,IAErC,IAAIjQ,EAAS,GAeN,OAZFiQ,EAAAxH,SAAQ,SAAUY,GACjB,IAAAwC,EAAM9J,KAAK6M,SAASvF,GAExB,GAAIwC,EAAM,EAAG,CACX,GAAIqE,EAAiB,OACf,MAAA,IAAIT,MAAM,oCAAsCpG,GAEnDtH,KAAA0M,UAAU5C,GAAKoD,SAAU,EAC9BjP,EAAOO,KAAK8I,KACXtH,MAEHA,KAAK2M,UAAY,KACV1O,GAaT2O,EAAMjL,UAAU4M,SAAW,SAAUC,GAM5B,OALgB,OAAnBxO,KAAK2M,WACF3M,KAAA8M,cAIA9M,KAAK2M,UAAU6B,IAAc,IAGtC,IAAAC,EAAiB7B,ECzVb8B,EAAe,YACfC,EAAe,MCAfhH,EAAiB7D,EAA2B6D,eAMhD,SAAAiH,EAAqB3H,GACnB,MAAO,aAAa1I,KAAK0I,GAI3B,ICDI4H,EAAU,+BAIVC,EAAsB,kBAEtBC,EAAiB,mBACjBC,EAAc,CAChB/J,EAAG,IACHgK,EAAG,IACHC,EAAG,IACHC,GAAI,KAGN,SAAAC,EAAmBjI,EAAOG,GACxB,OAAO0H,EAAY1H,EAAK/E,eAG1B,SAAA8M,EAAwBC,GAClB,IAAA1R,EAAGsM,EAAOqF,EAAkB,EAEhC,IAAK3R,EAAI0R,EAAa1Q,OAAS,EAAGhB,GAAK,EAAGA,IAGrB,UAFnBsM,EAAQoF,EAAa1R,IAEXwO,MAAoBmD,IAC5BrF,EAAME,QAAUF,EAAME,QAAQ9K,QAAQyP,EAAgBK,IAGrC,cAAflF,EAAMkC,MAAuC,SAAflC,EAAMS,MACtC4E,IAGiB,eAAfrF,EAAMkC,MAAwC,SAAflC,EAAMS,MACvC4E,IAKN,SAAAC,EAAsBF,GAChB,IAAA1R,EAAGsM,EAAOqF,EAAkB,EAEhC,IAAK3R,EAAI0R,EAAa1Q,OAAS,EAAGhB,GAAK,EAAGA,IAGrB,UAFnBsM,EAAQoF,EAAa1R,IAEXwO,MAAoBmD,GACxBV,EAAQtQ,KAAK2L,EAAME,WACfF,EAAAE,QAAUF,EAAME,QACnB9K,QAAQ,OAAQ,KAGhBA,QAAQ,UAAW,KAAKA,QAAQ,WAAY,QAC5CA,QAAQ,cAAe,UAAUA,QAAQ,SAAU,KAEnDA,QAAQ,0BAA2B,OAEnCA,QAAQ,qBAAsB,OAC9BA,QAAQ,6BAA8B,QAI1B,cAAf4K,EAAMkC,MAAuC,SAAflC,EAAMS,MACtC4E,IAGiB,eAAfrF,EAAMkC,MAAwC,SAAflC,EAAMS,MACvC4E,IAMN,ICnFIvH,EAAiBlE,EAA2BkE,aAC5CE,EAAiBpE,EAA2BoE,YAC5CD,EAAiBnE,EAA2BmE,eAE5CwH,EAAgB,OAChBC,GAAW,QAIf,SAAmBC,GAAA1I,EAAKuG,EAAOpP,GAC7B,OAAO6I,EAAIzE,OAAO,EAAGgL,GAASpP,EAAK6I,EAAIzE,OAAOgL,EAAQ,GAGxD,SAAAoC,GAAyB/F,EAAQtB,GAC/B,IAAI3K,EAAGsM,EAAO2F,EAAMC,EAAGjI,EAAKkB,EAAKgH,EAAWC,EAAMC,EAAUC,EACxDC,EAAiBC,EAAiBC,EAAkBC,EACpDC,EAASC,EAAUpN,EAAGqN,EAAUC,EAAOC,EAAWC,EAItD,IAFQF,EAAA,GAEH9S,EAAI,EAAGA,EAAIiM,EAAOjL,OAAQhB,IAAK,CAKlC,IAJAsM,EAAQL,EAAOjM,GAEfmS,EAAYlG,EAAOjM,GAAG8K,MAEjBtF,EAAIsN,EAAM9R,OAAS,EAAGwE,GAAK,KAC1BsN,EAAMtN,GAAGsF,OAASqH,GADW3M,KAK/B,GAFJsN,EAAM9R,OAASwE,EAAI,EAEA,SAAf8G,EAAMkC,KAAN,CAGEvE,EAAA,EACNkB,GAFA8G,EAAO3F,EAAME,SAEFxL,OAGXiS,EACA,KAAOhJ,EAAMkB,IACX2G,GAASoB,UAAYjJ,EACrBiI,EAAIJ,GAASrN,KAAKwN,KAFF,CAcZ,GATJU,EAAUC,GAAW,EACrB3I,EAAMiI,EAAEtC,MAAQ,EAChBiD,EAAqB,MAATX,EAAE,GAKHG,EAAA,GAEPH,EAAEtC,MAAQ,GAAK,EACNyC,EAAAJ,EAAKhR,WAAWiR,EAAEtC,MAAQ,QAErC,IAAKpK,EAAIxF,EAAI,EAAGwF,GAAK,IACI,cAAnByG,EAAOzG,GAAGgJ,MAA2C,cAAnBvC,EAAOzG,GAAGgJ,MAD1BhJ,IAElB,GAACyG,EAAOzG,GAAGgH,QAAX,CAEJ6F,EAAWpG,EAAOzG,GAAGgH,QAAQvL,WAAWgL,EAAOzG,GAAGgH,QAAQxL,OAAS,GACnE,MASJ,GAFWsR,EAAA,GAEPrI,EAAMkB,EACRmH,EAAWL,EAAKhR,WAAWgJ,QAE3B,IAAKzE,EAAIxF,EAAI,EAAGwF,EAAIyG,EAAOjL,SACF,cAAnBiL,EAAOzG,GAAGgJ,MAA2C,cAAnBvC,EAAOzG,GAAGgJ,MADfhJ,IAE7B,GAACyG,EAAOzG,GAAGgH,QAAX,CAEO8F,EAAArG,EAAOzG,GAAGgH,QAAQvL,WAAW,GACxC,MA6CA,GAzCJsR,EAAkBlI,EAAegI,IAAa/H,EAAY7J,OAAOC,aAAa2R,IAC9EG,EAAkBnI,EAAeiI,IAAahI,EAAY7J,OAAOC,aAAa4R,IAE9EG,EAAmBrI,EAAaiI,IAChCK,EAAmBtI,EAAakI,IAGpBK,GAAA,EACDH,OACiBD,IACdI,GAAA,IAIVF,EACSG,GAAA,EACFL,OACiBC,IACbI,GAAA,IAIE,KAAbN,GAAsC,MAATJ,EAAE,IAC7BG,GAAY,IAAgBA,GAAY,KAE1CO,EAAWD,GAAU,GAIrBA,GAAWC,IAQHD,EAAAJ,EACCK,EAAAJ,GAGRG,GAAYC,EAAb,CAQJ,GAAIA,EAEF,IAAKpN,EAAIsN,EAAM9R,OAAS,EAAGwE,GAAK,IAC9B4M,EAAOU,EAAMtN,KACTsN,EAAMtN,GAAGsF,MAAQqH,IAFY3M,IAGjC,GAAI4M,EAAKe,SAAWN,GAAYC,EAAMtN,GAAGsF,QAAUqH,EAAW,CAC5DC,EAAOU,EAAMtN,GAETqN,GACUE,EAAApI,EAAMW,GAAGa,QAAQiH,OAAO,GACvBJ,EAAArI,EAAMW,GAAGa,QAAQiH,OAAO,KAEzBL,EAAApI,EAAMW,GAAGa,QAAQiH,OAAO,GACvBJ,EAAArI,EAAMW,GAAGa,QAAQiH,OAAO,IAMvC9G,EAAME,QAAUuF,GAAUzF,EAAME,QAAS0F,EAAEtC,MAAOoD,GAC3C/G,EAAAmG,EAAKiB,OAAO7G,QAAUuF,GAC3B9F,EAAOmG,EAAKiB,OAAO7G,QAAS4F,EAAKnI,IAAK8I,GAExC9I,GAAO+I,EAAWhS,OAAS,EACvBoR,EAAKiB,QAAUrT,IAAKiK,GAAO8I,EAAU/R,OAAS,GAGlDmK,GADA8G,EAAO3F,EAAME,SACFxL,OAEX8R,EAAM9R,OAASwE,EACf,SAAAyN,EAKFN,EACFG,EAAMlS,KAAK,CACTyS,MAAOrT,EACPiK,IAAKiI,EAAEtC,MACPuD,OAAQN,EACR/H,MAAOqH,IAEAS,GAAYC,IACrBvG,EAAME,QAAUuF,GAAUzF,EAAME,QAAS0F,EAAEtC,MAvKlC,WAsHLiD,IACFvG,EAAME,QAAUuF,GAAUzF,EAAME,QAAS0F,EAAEtC,MAvHpC,SCGjB,SAAe0D,GAAA9E,EAAMD,EAAKD,GAMxBlM,KAAKoM,KAAWA,EAOhBpM,KAAKmM,IAAWA,EAOhBnM,KAAKgL,MAAW,KAOhBhL,KAAKmR,IAAW,KAWhBnR,KAAKkM,QAAWA,EAOhBlM,KAAK0I,MAAW,EAOhB1I,KAAKoL,SAAW,KAQhBpL,KAAKoK,QAAW,GAOhBpK,KAAKoR,OAAW,GAWhBpR,KAAK2K,KAAW,GAOhB3K,KAAKqR,KAAW,KAQhBrR,KAAKiM,OAAW,EAQhBjM,KAAKgM,QAAW,EASlBsF,GAAM3P,UAAUoJ,UAAY,SAAmBzD,GAC7C,IAAI0D,EAAOpN,EAAG0O,EAEV,IAACtM,KAAKgL,MAAgB,OAAA,EAI1B,IAAKpN,EAAI,EAAG0O,GAFZtB,EAAQhL,KAAKgL,OAEWpM,OAAQhB,EAAI0O,EAAK1O,IACnC,GAAAoN,EAAMpN,GAAG,KAAO0J,EAAe,OAAA1J,EAE9B,OAAA,GAST0T,GAAM3P,UAAU4P,SAAW,SAAkBC,GACvCxR,KAAKgL,MACPhL,KAAKgL,MAAMxM,KAAKgT,GAEhBxR,KAAKgL,MAAQ,CAAEwG,IAUnBF,GAAM3P,UAAU8P,QAAU,SAAiBnK,EAAMoK,GAC/C,IAAI5H,EAAM9J,KAAK+K,UAAUzD,GACrBkK,EAAW,CAAElK,EAAMoK,GAEnB5H,EAAM,EACR9J,KAAKuR,SAASC,GAEdxR,KAAKgL,MAAMlB,GAAO0H,GAUtBF,GAAM3P,UAAUgQ,QAAU,SAAiBrK,GACzC,IAAIwC,EAAM9J,KAAK+K,UAAUzD,GAAOoK,EAAQ,KAIjC,OAHH5H,GAAO,IACD4H,EAAA1R,KAAKgL,MAAMlB,GAAK,IAEnB4H,GAUTJ,GAAM3P,UAAUiQ,SAAW,SAAkBtK,EAAMoK,GAC7C,IAAA5H,EAAM9J,KAAK+K,UAAUzD,GAErBwC,EAAM,EACH9J,KAAAuR,SAAS,CAAEjK,EAAMoK,IAEtB1R,KAAKgL,MAAMlB,GAAK,GAAK9J,KAAKgL,MAAMlB,GAAK,GAAK,IAAM4H,GAKpD,IAAAT,GAAiBK,GCpMbA,GAAQxN,GAGZ,SAAmB+N,GAAAjK,EAAKsB,EAAIc,GAC1BhK,KAAK4H,IAAMA,EACX5H,KAAKgK,IAAMA,EACXhK,KAAK6J,OAAS,GACd7J,KAAK8R,YAAa,EAClB9R,KAAKkJ,GAAKA,EAIZ2I,GAAUlQ,UAAU2P,MAAQA,GAG5B,IAAAS,GAAiBF,GCVbjF,GAAS9I,EAGTkO,GAAS,CACX,CAAE,YNHa,SAAmBzJ,GAC9B,IAAAtB,EAMEA,GAHAA,EAAAsB,EAAMX,IAAItI,QAAQoP,EAAa,OAG3BpP,QAAQqP,EAAS,KAE3BpG,EAAMX,IAAMX,IMLZ,CAAE,QCXa,SAAesB,GAC1B,IAAA2B,EAEA3B,EAAMuJ,aACR5H,EAAiB,IAAI3B,EAAM+I,MAAM,SAAU,GAAI,IACzClH,QAAW7B,EAAMX,IACjBsC,EAAAiH,IAAW,CAAE,EAAG,GACtBjH,EAAMkB,SAAW,GACjB7C,EAAMsB,OAAOrL,KAAK0L,IAEZ3B,EAAAW,GAAG+C,MAAMrK,MAAM2G,EAAMX,IAAKW,EAAMW,GAAIX,EAAMyB,IAAKzB,EAAMsB,UDE7D,CAAE,SEba,SAAgBtB,GAC/B,IAA2B0J,EAAKrU,EAAGC,EAA/BgM,EAAStB,EAAMsB,OAGnB,IAAKjM,EAAI,EAAGC,EAAIgM,EAAOjL,OAAQhB,EAAIC,EAAGD,IAEnB,YADjBqU,EAAMpI,EAAOjM,IACLwO,MACA7D,EAAAW,GAAGC,OAAOvH,MAAMqQ,EAAI7H,QAAS7B,EAAMW,GAAIX,EAAMyB,IAAKiI,EAAI7G,YFOhE,CAAE,ULEa,SAAiB7C,GAChC,IAAI3K,EAAGwF,EAAGvF,EAAGgM,EAAQK,EAAOgI,EAAcC,EAAOC,EAAIvC,EAAMhI,EAAKwK,EAC5D3J,EAAO4J,EAAezQ,EAAK0Q,EAASC,EAEpCC,EAZcxL,EAWdyL,EAAcnK,EAAMsB,OAGxB,GAAKtB,EAAMW,GAAGa,QAAQ4I,QAEtB,IAAKvP,EAAI,EAAGvF,EAAI6U,EAAY9T,OAAQwE,EAAIvF,EAAGuF,IACrC,GAAwB,WAAxBsP,EAAYtP,GAAGgJ,MACd7D,EAAMW,GAAGyJ,QAAQC,QAAQF,EAAYtP,GAAGgH,SAU7C,IAJgBkI,EAAA,EAIX1U,GANLiM,EAAS6I,EAAYtP,GAAGgI,UAMRxM,OAAS,EAAGhB,GAAK,EAAGA,IAI9B,GAAsB,gBAH1BsU,EAAerI,EAAOjM,IAGLwO,MAiBjB,GAR0B,gBAAtB8F,EAAa9F,OAzCHnF,EA0CGiL,EAAa9H,QAzC3B,YAAY7L,KAAK0I,IAyCsBqL,EAAgB,GACtDA,IAEE1D,EAAYsD,EAAa9H,UAC3BkI,OAGAA,EAAgB,IAEM,SAAtBJ,EAAa9F,MAAmB7D,EAAMW,GAAGyJ,QAAQpU,KAAK2T,EAAa9H,SAAU,CAU/E,IARAyF,EAAOqC,EAAa9H,QACZqI,EAAAlK,EAAMW,GAAGyJ,QAAQlQ,MAAMoN,GAGvBsC,EAAA,GACRzJ,EAAQwJ,EAAaxJ,MACX2J,EAAA,EAELD,EAAK,EAAGA,EAAKK,EAAM7T,OAAQwT,IAE9BvQ,EAAM4Q,EAAML,GAAIvQ,IACN0Q,EAAAhK,EAAMW,GAAG2J,cAAchR,GAC5B0G,EAAMW,GAAG4J,aAAaP,KAE3BC,EAAUC,EAAML,GAAI1G,KAWR8G,EALPC,EAAML,GAAIW,OAEiB,YAArBN,EAAML,GAAIW,QAAyB,YAAYxU,KAAKiU,GAGnDjK,EAAMW,GAAG8J,kBAAkBR,GAF3BjK,EAAMW,GAAG8J,kBAAkB,UAAYR,GAASlT,QAAQ,WAAY,IAFpEiJ,EAAMW,GAAG8J,kBAAkB,UAAYR,GAASlT,QAAQ,aAAc,KAOlFuI,EAAM4K,EAAML,GAAI5E,OAEN6E,KACRnI,EAAgB,IAAI3B,EAAM+I,MAAM,OAAQ,GAAI,IACtClH,QAAUyF,EAAKlR,MAAM0T,EAASxK,GACpCqC,EAAMxB,MAAUA,EAChByJ,EAAM3T,KAAK0L,KAGbA,EAAgB,IAAI3B,EAAM+I,MAAM,YAAa,IAAK,IAC5CtG,MAAU,CAAE,CAAE,OAAQuH,IAC5BrI,EAAMxB,MAAUA,IAChBwB,EAAMkH,OAAU,UAChBlH,EAAMS,KAAU,OAChBwH,EAAM3T,KAAK0L,IAEXA,EAAgB,IAAI3B,EAAM+I,MAAM,OAAQ,GAAI,IACtClH,QAAUoI,EAChBtI,EAAMxB,MAAUA,EAChByJ,EAAM3T,KAAK0L,IAEXA,EAAgB,IAAI3B,EAAM+I,MAAM,aAAc,KAAK,IAC7C5I,QAAYA,EAClBwB,EAAMkH,OAAU,UAChBlH,EAAMS,KAAU,OAChBwH,EAAM3T,KAAK0L,GAEXmI,EAAUI,EAAML,GAAItB,WAElBuB,EAAUxC,EAAKjR,UACjBsL,EAAgB,IAAI3B,EAAM+I,MAAM,OAAQ,GAAI,IACtClH,QAAUyF,EAAKlR,MAAM0T,GAC3BnI,EAAMxB,MAAUA,EAChByJ,EAAM3T,KAAK0L,IAIbwI,EAAYtP,GAAGgI,SAAWvB,EAASlC,EAAekC,EAAQjM,EAAGuU,SApFtD,IADPvU,IACOiM,EAAOjM,GAAG8K,QAAUwJ,EAAaxJ,OAA4B,cAAnBmB,EAAOjM,GAAGwO,MACzDxO,MK5BR,CAAE,eJuEa,SAAiB2K,GAC5B,IAAA0K,EAEJ,GAAK1K,EAAMW,GAAGa,QAAQmJ,YAEtB,IAAKD,EAAS1K,EAAMsB,OAAOjL,OAAS,EAAGqU,GAAU,EAAGA,IAEhB,WAA9B1K,EAAMsB,OAAOoJ,GAAQ7G,OAErB0C,EAAoBvQ,KAAKgK,EAAMsB,OAAOoJ,GAAQ7I,UACjCiF,EAAA9G,EAAMsB,OAAOoJ,GAAQ7H,UAGlCyD,EAAQtQ,KAAKgK,EAAMsB,OAAOoJ,GAAQ7I,UACvBoF,EAAAjH,EAAMsB,OAAOoJ,GAAQ7H,aIpFtC,CAAE,cHuKa,SAAqB7C,GAEhC,IAAA0K,EAEJ,GAAK1K,EAAMW,GAAGa,QAAQmJ,YAEtB,IAAKD,EAAS1K,EAAMsB,OAAOjL,OAAS,EAAGqU,GAAU,EAAGA,IAEhB,WAA9B1K,EAAMsB,OAAOoJ,GAAQ7G,MACpBqD,EAAclR,KAAKgK,EAAMsB,OAAOoJ,GAAQ7I,UAI7BwF,GAAArH,EAAMsB,OAAOoJ,GAAQ7H,SAAU7C,MG7KnD,SAAgB4K,KAMdnT,KAAKyO,MAAQ,IAAI7B,GAEjB,IAAA,IAAShP,EAAI,EAAGA,EAAIoU,GAAOpT,OAAQhB,IACjCoC,KAAKyO,MAAMjQ,KAAKwT,GAAOpU,GAAG,GAAIoU,GAAOpU,GAAG,IAU5CuV,GAAKxR,UAAUyR,QAAU,SAAU7K,GACjC,IAAI3K,EAAGC,EAAG8L,EAIV,IAAK/L,EAAI,EAAGC,GAFJ8L,EAAA3J,KAAKyO,MAAMF,SAAS,KAEN3P,OAAQhB,EAAIC,EAAGD,IACnC+L,EAAM/L,GAAG2K,IAIb4K,GAAKxR,UAAU0R,MAAQC,GAGvB,IAAAC,GAAiBJ,GGrDbpL,GAAUjE,EAA2BiE,QAGzC,SAAAyL,GAAiBjL,EAAOkL,GAClB,IAAA5L,EAAMU,EAAMmL,OAAOD,GAAQlL,EAAMoL,OAAOF,GACxC1K,EAAMR,EAAMqL,OAAOH,GAEvB,OAAOlL,EAAMX,IAAIpF,OAAOqF,EAAKkB,EAAMlB,GAGrC,SAAAgM,GAAsB5M,GACpB,IAGI7I,EAHAH,EAAS,GACT4J,EAAM,EACNkB,EAAM9B,EAAIrI,OAEVkV,GAAY,EACZzB,EAAU,EACV0B,EAAU,GAId,IAFA3V,EAAM6I,EAAIpI,WAAWgJ,GAEdA,EAAMkB,GACA,MAAP3K,IACG0V,GAOQC,GAAA9M,EAAI+M,UAAU3B,EAASxK,EAAM,GAC9BwK,EAAAxK,IANV5J,EAAOO,KAAKuV,EAAU9M,EAAI+M,UAAU3B,EAASxK,IACnCkM,EAAA,GACV1B,EAAUxK,EAAM,IAQpBiM,EAAoB,KAAP1V,EACbyJ,IAEAzJ,EAAK6I,EAAIpI,WAAWgJ,GAKf,OAFA5J,EAAAO,KAAKuV,EAAU9M,EAAI+M,UAAU3B,IAE7BpU,MC3CL8J,GAAUjE,EAA2BiE,QCArCA,GAAUjE,EAA2BiE,QCArCA,GAAUjE,EAA2BiE,QAKzC,SAAAkM,GAA8B1L,EAAO2L,GAC/B,IAAAtL,EAAQf,EAAKkB,EAAK3K,EAOtB,OALAyJ,EAAMU,EAAMmL,OAAOQ,GAAa3L,EAAMoL,OAAOO,GAC7CnL,EAAMR,EAAMqL,OAAOM,GAIJ,MAFNtL,EAAAL,EAAMX,IAAI/I,WAAWgJ,OAGf,KAAXe,GACW,KAAXA,GAIAf,EAAMkB,IACH3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,IAErBE,GAAQ3J,KANN,EAYFyJ,EAKT,SAAAsM,GAA+B5L,EAAO2L,GACpC,IAAI9V,EACAoK,EAAQD,EAAMmL,OAAOQ,GAAa3L,EAAMoL,OAAOO,GAC/CrM,EAAMW,EACNO,EAAMR,EAAMqL,OAAOM,GAGnB,GAAArM,EAAM,GAAKkB,EAAc,OAAA,EAIzB,IAFC3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,MAEjB,IAAezJ,EAAK,GAAsB,OAAA,EAE1C,OAAA,CAEP,GAAIyJ,GAAOkB,EAAc,OAAA,EAIrB,MAFC3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,OAEhB,IAAezJ,GAAM,IAA3B,CAUA,GAAO,KAAPA,GAA6B,KAAPA,EACxB,MAGK,OAAA,EAVD,GAAAyJ,EAAMW,GAAS,GAAa,OAAA,EAcpC,OAAIX,EAAMkB,IACH3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,IAErBE,GAAQ3J,KAEJ,EAGJyJ,MC/ELO,GAAuBtE,EAA2BsE,mBAClDL,GAAuBjE,EAA2BiE,cCUlDqM,GAAc,kIAEdC,GAAc,mCAMdC,GAAc,IAAI/O,OAAO,OAAS6O,GAAW,IAAMC,GAA1B,4HAEzBE,GAAyB,IAAIhP,OAAO,OAAS6O,GAAW,IAAMC,GAAY,KAEpDG,GAAAF,YAAGA,GAC7BE,GAAAD,uBAAwCA,GCtBxC,IAAIE,GCCa,CACf,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,UACA,SACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MD9DEF,GAAyBxQ,GAA6BwQ,uBAKtDG,GAAiB,CACnB,CAAE,6CAA8C,oCAAoC,GACpF,CAAE,QAAgB,OAAS,GAC3B,CAAE,OAAgB,OAAS,GAC3B,CAAE,WAAgB,KAAS,GAC3B,CAAE,eAAgB,SAAS,GAC3B,CAAE,IAAInP,OAAO,QAAUkP,GAAY/Q,KAAK,KAAO,mBAAoB,KAAM,MAAM,GAC/E,CAAE,IAAI6B,OAAOgP,GAAuB/O,OAAS,SAAW,MAAM,IEd5DuC,GAAUjE,EAA2BiE,QCArCuJ,GAAQxN,GACRiE,GAAUhE,EAA2BgE,QAGzC,SAAoB4M,GAAA/M,EAAKsB,EAAIc,EAAKH,GAChC,IAAIzL,EAAIwW,EAAGpM,EAAOX,EAAKyE,EAAKuI,EAAQC,EAAQC,EAuDvC,IArDL/U,KAAK4H,IAAMA,EAGX5H,KAAKkJ,GAASA,EAEdlJ,KAAKgK,IAAMA,EAMXhK,KAAK6J,OAASA,EAEd7J,KAAK0T,OAAS,GACd1T,KAAK4T,OAAS,GACd5T,KAAK2T,OAAS,GACd3T,KAAKgV,OAAS,GAYdhV,KAAKiV,QAAU,GAGfjV,KAAKkV,UAAa,EAElBlV,KAAKyT,KAAa,EAClBzT,KAAKmV,QAAa,EAClBnV,KAAKoV,OAAa,EAClBpV,KAAKqV,UAAa,EAClBrV,KAAKsV,YAAa,EAIlBtV,KAAKuV,WAAa,OAElBvV,KAAK0I,MAAQ,EAGb1I,KAAK/B,OAAS,GAKC8W,GAAA,EAEVvM,EAAQX,EAAMgN,EAASC,EAAS,EAAGxI,GAHxCsI,EAAI5U,KAAK4H,KAGuChJ,OAAQiJ,EAAMyE,EAAKzE,IAAO,CAGxE,GAFAzJ,EAAKwW,EAAE/V,WAAWgJ,IAEbkN,EAAc,CACjB,GAAIhN,GAAQ3J,GAAK,CACfyW,IAEW,IAAPzW,EACF0W,GAAU,EAAIA,EAAS,EAEvBA,IAEF,SAEeC,GAAA,EAIR,KAAP3W,GAAeyJ,IAAQyE,EAAM,IACpB,KAAPlO,GAAeyJ,IACnB7H,KAAK0T,OAAOlV,KAAKgK,GACjBxI,KAAK4T,OAAOpV,KAAKqJ,GACjB7H,KAAK2T,OAAOnV,KAAKqW,GACjB7U,KAAKgV,OAAOxW,KAAKsW,GACjB9U,KAAKiV,QAAQzW,KAAK,GAEHuW,GAAA,EACNF,EAAA,EACAC,EAAA,EACTtM,EAAQX,EAAM,GAKb7H,KAAA0T,OAAOlV,KAAKoW,EAAEhW,QACdoB,KAAA4T,OAAOpV,KAAKoW,EAAEhW,QACnBoB,KAAK2T,OAAOnV,KAAK,GACjBwB,KAAKgV,OAAOxW,KAAK,GACjBwB,KAAKiV,QAAQzW,KAAK,GAEbwB,KAAAmV,QAAUnV,KAAK0T,OAAO9U,OAAS,EAKtC+V,GAAWhT,UAAUnD,KAAO,SAAU4N,EAAMD,EAAKD,GAC/C,IAAIhC,EAAQ,IAAIoH,GAAMlF,EAAMD,EAAKD,GAQ1B,OAPPhC,EAAM+B,OAAQ,EAEVC,EAAU,GAAQlM,KAAA0I,QACtBwB,EAAMxB,MAAQ1I,KAAK0I,MACfwD,EAAU,GAAQlM,KAAA0I,QAEtB1I,KAAK6J,OAAOrL,KAAK0L,GACVA,GAGTyK,GAAWhT,UAAU6T,QAAU,SAAiB/B,GAC9C,OAAOzT,KAAK0T,OAAOD,GAAQzT,KAAK2T,OAAOF,IAASzT,KAAK4T,OAAOH,IAG9DkB,GAAWhT,UAAU8T,eAAiB,SAAwBC,GAC5D,IAAA,IAAS3M,EAAM/I,KAAKmV,QAASO,EAAO3M,KAC9B/I,KAAK0T,OAAOgC,GAAQ1V,KAAK2T,OAAO+B,GAAQ1V,KAAK4T,OAAO8B,IADjBA,KAKlC,OAAAA,GAITf,GAAWhT,UAAUgU,WAAa,SAAoB9N,GAGpD,IAFI,IAAAzJ,EAEK2K,EAAM/I,KAAK4H,IAAIhJ,OAAQiJ,EAAMkB,IAC/B3K,EAAA4B,KAAK4H,IAAI/I,WAAWgJ,GACpBE,GAAQ3J,IAF4ByJ,KAIpC,OAAAA,GAIT8M,GAAWhT,UAAUiU,eAAiB,SAAwB/N,EAAKgO,GACjE,GAAIhO,GAAOgO,EAAc,OAAAhO,EAEzB,KAAOA,EAAMgO,GACX,IAAK9N,GAAQ/H,KAAK4H,IAAI/I,aAAagJ,IAAS,OAAOA,EAAM,EAEpD,OAAAA,GAIT8M,GAAWhT,UAAUmU,UAAY,SAAmBjO,EAAK/J,GACvD,IAAA,IAASiL,EAAM/I,KAAK4H,IAAIhJ,OAAQiJ,EAAMkB,GAChC/I,KAAK4H,IAAI/I,WAAWgJ,KAAS/J,EADQ+J,KAGpC,OAAAA,GAIT8M,GAAWhT,UAAUoU,cAAgB,SAAuBlO,EAAK/J,EAAM+X,GACrE,GAAIhO,GAAOgO,EAAc,OAAAhO,EAEzB,KAAOA,EAAMgO,GACX,GAAI/X,IAASkC,KAAK4H,IAAI/I,aAAagJ,GAAQ,OAAOA,EAAM,EAEnD,OAAAA,GAIT8M,GAAWhT,UAAUqU,SAAW,SAAkBC,EAAOC,EAAKrB,EAAQsB,GACpE,IAAIvY,EAAGwY,EAAYhY,EAAIiY,EAAOC,EAAMC,EAAOC,EACvC/C,EAAOwC,EAEX,GAAIA,GAASC,EACJ,MAAA,GAKT,IAFQK,EAAA,IAAI/P,MAAM0P,EAAMD,GAEnBrY,EAAI,EAAG6V,EAAOyC,EAAKzC,IAAQ7V,IAAK,CAW5B,IAVMwY,EAAA,EACDI,EAAAH,EAAQrW,KAAK0T,OAAOD,GAIvB6C,EAFL7C,EAAO,EAAIyC,GAAOC,EAEbnW,KAAK4T,OAAOH,GAAQ,EAEpBzT,KAAK4T,OAAOH,GAGd4C,EAAQC,GAAQF,EAAavB,GAAQ,CAG1C,GAFKzW,EAAA4B,KAAK4H,IAAI/I,WAAWwX,GAErBtO,GAAQ3J,GACC,IAAPA,EACFgY,GAAc,GAAKA,EAAapW,KAAKiV,QAAQxB,IAAS,EAEtD2C,QAAA,CAAA,KAEOC,EAAQG,EAAYxW,KAAK2T,OAAOF,IAIzC,MAFA2C,IAKFC,IAMME,EAAA3Y,GAHJwY,EAAavB,EAGJ,IAAIrO,MAAM4P,EAAavB,EAAS,GAAGnR,KAAK,KAAO1D,KAAK4H,IAAIjJ,MAAM0X,EAAOC,GAErEtW,KAAK4H,IAAIjJ,MAAM0X,EAAOC,GAIrC,OAAOC,EAAM7S,KAAK,KAIpBiR,GAAWhT,UAAU2P,MAAQA,GAG7B,IAAAmF,GAAiB9B,GC9Nb/H,GAAkB9I,EAGlBkO,GAAS,CAGX,CAAE,QVqCa,SAAezJ,EAAO2L,EAAWwC,EAASC,GACzD,IAAIvY,EAAIwY,EAAU/O,EAAKjK,EAAGC,EAAGgZ,EAAUC,EAASC,EAAa7M,EACzD8M,EAAQlH,EAAGmH,EAAYC,EAAYC,EAAeC,EAClDC,EAAiBC,EAASC,EAG1B,GAAArD,EAAY,EAAIwC,EAAkB,OAAA,EAItC,GAFAG,EAAW3C,EAAY,EAEnB3L,EAAMyM,OAAO6B,GAAYtO,EAAM2M,UAAoB,OAAA,EAGvD,GAAI3M,EAAMyM,OAAO6B,GAAYtO,EAAM2M,WAAa,EAAY,OAAA,EAOxD,IADJrN,EAAMU,EAAMmL,OAAOmD,GAAYtO,EAAMoL,OAAOkD,KACjCtO,EAAMqL,OAAOiD,GAAoB,OAAA,EAG5C,GAAgB,OADNS,EAAA/O,EAAMX,IAAI/I,WAAWgJ,OACY,KAAZyP,GAAuC,KAAZA,EAAkC,OAAA,EAExF,GAAAzP,GAAOU,EAAMqL,OAAOiD,GAAoB,OAAA,EAGxC,GAAa,OADNU,EAAAhP,EAAMX,IAAI/I,WAAWgJ,OACa,KAAb0P,GAAyC,KAAbA,IAA6BxP,GAAQwP,GACxF,OAAA,EAKL,GAAY,KAAZD,GAA2BvP,GAAQwP,GAAoB,OAAA,EAEpD,KAAA1P,EAAMU,EAAMqL,OAAOiD,IAAW,CAG/B,GAAO,OAFNzY,EAAAmK,EAAMX,IAAI/I,WAAWgJ,KAEO,KAAPzJ,GAA6B,KAAPA,IAAuB2J,GAAQ3J,GAAc,OAAA,EAE7FyJ,IAOF,IAFAiP,GAFWF,EAAApD,GAAQjL,EAAO2L,EAAY,IAEnB/R,MAAM,KAChB6U,EAAA,GACJpZ,EAAI,EAAGA,EAAIkZ,EAAQlY,OAAQhB,IAAK,CAEnC,KADAkS,EAAIgH,EAAQlZ,GAAGsE,QACP,CAGN,GAAU,IAANtE,GAAWA,IAAMkZ,EAAQlY,OAAS,EACpC,SAEO,OAAA,EAIP,IAAC,WAAWL,KAAKuR,GAAa,OAAA,EACC,KAA/BA,EAAEjR,WAAWiR,EAAElR,OAAS,GAC1BoY,EAAOxY,KAAyB,KAApBsR,EAAEjR,WAAW,GAAqB,SAAW,SAC5B,KAApBiR,EAAEjR,WAAW,GACtBmY,EAAOxY,KAAK,QAEZwY,EAAOxY,KAAK,IAKZ,IAA8B,KADvBoY,EAAApD,GAAQjL,EAAO2L,GAAWhS,QACxBU,QAAQ,KAAsB,OAAA,EAC3C,GAAI2F,EAAMyM,OAAOd,GAAa3L,EAAM2M,WAAa,EAAY,OAAA,EAQ7D,IAPA4B,EAAUjD,GAAa+C,IACXhY,QAAyB,KAAfkY,EAAQ,IAAmBA,EAAAU,QAC7CV,EAAQlY,QAA0C,KAAhCkY,EAAQA,EAAQlY,OAAS,IAAmBkY,EAAAW,MAK9C,KADpBV,EAAcD,EAAQlY,SACGmY,IAAgBC,EAAOpY,OAAiB,OAAA,EAEjE,GAAI+X,EAAiB,OAAA,EAkBrB,IAhBAQ,EAAgB5O,EAAMgN,WACtBhN,EAAMgN,WAAa,QAInB8B,EAAkB9O,EAAMW,GAAG+C,MAAMwC,MAAMF,SAAS,eAEpCrE,EAAA3B,EAAM/J,KAAK,aAAc,QAAS,IACxC2S,IAAM8F,EAAa,CAAE/C,EAAW,IAE1BhK,EAAA3B,EAAM/J,KAAK,aAAc,QAAS,IACxC2S,IAAM,CAAE+C,EAAWA,EAAY,IAEzBhK,EAAA3B,EAAM/J,KAAK,UAAW,KAAM,IAClC2S,IAAM,CAAE+C,EAAWA,EAAY,GAEhCtW,EAAI,EAAGA,EAAIkZ,EAAQlY,OAAQhB,IACbsM,EAAA3B,EAAM/J,KAAK,UAAW,KAAM,GACzCwY,EAAOpZ,KACTsM,EAAMc,MAAS,CAAE,CAAE,QAAS,cAAgBgM,EAAOpZ,OAGpCsM,EAAA3B,EAAM/J,KAAK,SAAU,GAAI,IACpC4L,QAAW0M,EAAQlZ,GAAGsE,OAC5BgI,EAAMkB,SAAW,GAEAlB,EAAA3B,EAAM/J,KAAK,WAAY,MAAM,GAMhD,IAHY0L,EAAA3B,EAAM/J,KAAK,WAAY,MAAM,GAC7B0L,EAAA3B,EAAM/J,KAAK,cAAe,SAAS,GAE1CqY,EAAW3C,EAAY,EAAG2C,EAAWH,KACpCnO,EAAMyM,OAAO6B,GAAYtO,EAAM2M,WADc2B,IAAY,CAI7D,IADYO,GAAA,EACPxZ,EAAI,EAAGC,EAAIwZ,EAAgBzY,OAAQhB,EAAIC,EAAGD,IAC7C,GAAIyZ,EAAgBzZ,GAAG2K,EAAOsO,EAAUH,GAAS,GAAO,CAC1CU,GAAA,EACZ,MAIJ,GAAIA,EAAa,MAEjB,KADWR,EAAApD,GAAQjL,EAAOsO,GAAU3U,QACnB,MACjB,GAAIqG,EAAMyM,OAAO6B,GAAYtO,EAAM2M,WAAa,EAAK,MAarD,KAZA4B,EAAUjD,GAAa+C,IACXhY,QAAyB,KAAfkY,EAAQ,IAAmBA,EAAAU,QAC7CV,EAAQlY,QAA0C,KAAhCkY,EAAQA,EAAQlY,OAAS,IAAmBkY,EAAAW,MAE9DZ,IAAa3C,EAAY,KACfhK,EAAA3B,EAAM/J,KAAK,aAAc,QAAS,IACxC2S,IAAM+F,EAAa,CAAEhD,EAAY,EAAG,KAGhChK,EAAA3B,EAAM/J,KAAK,UAAW,KAAM,IAClC2S,IAAM,CAAE0F,EAAUA,EAAW,GAE9BjZ,EAAI,EAAGA,EAAImZ,EAAanZ,IACVsM,EAAA3B,EAAM/J,KAAK,UAAW,KAAM,GACzCwY,EAAOpZ,KACTsM,EAAMc,MAAS,CAAE,CAAE,QAAS,cAAgBgM,EAAOpZ,OAGpCsM,EAAA3B,EAAM/J,KAAK,SAAU,GAAI,IACpC4L,QAAW0M,EAAQlZ,GAAKkZ,EAAQlZ,GAAGsE,OAAS,GAClDgI,EAAMkB,SAAW,GAEAlB,EAAA3B,EAAM/J,KAAK,WAAY,MAAM,GAExC0L,EAAA3B,EAAM/J,KAAK,WAAY,MAAM,GAahC,OAVH0Y,IACMhN,EAAA3B,EAAM/J,KAAK,cAAe,SAAS,GAC3C0Y,EAAW,GAAKL,GAGV3M,EAAA3B,EAAM/J,KAAK,cAAe,SAAS,GAC3CyY,EAAW,GAAKJ,EAEhBtO,EAAMgN,WAAa4B,EACnB5O,EAAMkL,KAAOoD,GACN,GU7M8C,CAAE,YAAa,cACpE,CAAE,OCVa,SAActO,EAAO2L,EAAWwC,GAC/C,IAAIG,EAAUP,EAAMpM,EAEpB,GAAI3B,EAAMyM,OAAOd,GAAa3L,EAAM2M,UAAY,EAAY,OAAA,EAI5D,IAFAoB,EAAOO,EAAW3C,EAAY,EAEvB2C,EAAWH,GACZ,GAAAnO,EAAMiN,QAAQqB,GAChBA,QADE,CAKJ,KAAItO,EAAMyM,OAAO6B,GAAYtO,EAAM2M,WAAa,GAKhD,MAHSoB,IADPO,EAaG,OANPtO,EAAMkL,KAAO6C,GAEGpM,EAAA3B,EAAM/J,KAAK,aAAc,OAAQ,IAC3C4L,QAAU7B,EAAMyN,SAAS9B,EAAWoC,EAAM,EAAI/N,EAAM2M,WAAW,GAAS,KACxEhL,EAAAiH,IAAU,CAAE+C,EAAW3L,EAAMkL,OAE5B,IDhBP,CAAE,QEXa,SAAelL,EAAO2L,EAAWwC,EAASC,GACzD,IAAI/N,EAAQ0D,EAAKoL,EAAQb,EAAUc,EAAKzN,EAAOkH,EAC3CwG,GAAgB,EAChB/P,EAAMU,EAAMmL,OAAOQ,GAAa3L,EAAMoL,OAAOO,GAC7CnL,EAAMR,EAAMqL,OAAOM,GAGvB,GAAI3L,EAAMyM,OAAOd,GAAa3L,EAAM2M,WAAa,EAAY,OAAA,EAEzD,GAAArN,EAAM,EAAIkB,EAAc,OAAA,EAIxB,GAAW,OAFNH,EAAAL,EAAMX,IAAI/I,WAAWgJ,KAEW,KAAXe,EACrB,OAAA,EAST,GALM+O,EAAA9P,GAGNyE,GAFMzE,EAAAU,EAAMuN,UAAUjO,EAAKe,IAEf+O,GAEF,EAAY,OAAA,EAKtB,GAHSvG,EAAA7I,EAAMX,IAAIjJ,MAAMgZ,EAAK9P,GACrB6P,EAAAnP,EAAMX,IAAIjJ,MAAMkJ,EAAKkB,GAEf,KAAXH,GACE8O,EAAO9U,QAAQvE,OAAOC,aAAasK,KAAY,EAC1C,OAAA,EAKX,GAAI+N,EAAiB,OAAA,EAKZ,IAFEE,EAAA3C,MAGT2C,GACgBH,OAMhB7O,EAAM8P,EAAMpP,EAAMmL,OAAOmD,GAAYtO,EAAMoL,OAAOkD,KAClD9N,EAAMR,EAAMqL,OAAOiD,KAEFtO,EAAMyM,OAAO6B,GAAYtO,EAAM2M,YAOhD,GAAI3M,EAAMX,IAAI/I,WAAWgJ,KAASe,KAE9BL,EAAMyM,OAAO6B,GAAYtO,EAAM2M,WAAa,IAK1CrN,EAAAU,EAAMuN,UAAUjO,EAAKe,IAGjB+O,EAAMrL,IAGhBzE,EAAMU,EAAMoN,WAAW9N,IAEbkB,GAAV,CAEgB6O,GAAA,EAEhB,MAcK,OAVPtL,EAAM/D,EAAMyM,OAAOd,GAEb3L,EAAAkL,KAAOoD,GAAYe,EAAgB,EAAI,IAE7B1N,EAAA3B,EAAM/J,KAAK,QAAS,OAAQ,IACtCmM,KAAU+M,EAChBxN,EAAME,QAAU7B,EAAMyN,SAAS9B,EAAY,EAAG2C,EAAUvK,GAAK,GAC7DpC,EAAMkH,OAAUA,EACVlH,EAAAiH,IAAU,CAAE+C,EAAW3L,EAAMkL,OAE5B,GFhF8C,CAAE,YAAa,YAAa,aAAc,SAC/F,CAAE,aTVa,SAAoBlL,EAAO2L,EAAWwC,EAASC,GAC9D,IAAIkB,EACAzZ,EACAR,EACAka,EACAja,EACAka,EACAxO,EACAsN,EACA/B,EACAkD,EACAC,EACAC,EACAf,EACAgB,EACAC,EACAC,EACAjB,EACAC,EACAnN,EACAoO,EACAC,EAAahQ,EAAM4M,QACnBtN,EAAMU,EAAMmL,OAAOQ,GAAa3L,EAAMoL,OAAOO,GAC7CnL,EAAMR,EAAMqL,OAAOM,GAGvB,GAAI3L,EAAMyM,OAAOd,GAAa3L,EAAM2M,WAAa,EAAY,OAAA,EAG7D,GAAoC,KAAhC3M,EAAMX,IAAI/I,WAAWgJ,KAAiC,OAAA,EAI1D,GAAI8O,EAAiB,OAAA,EAqCrB,IAlCUmB,EAAAhD,EAASvM,EAAMyM,OAAOd,GAAa,EAGX,KAA9B3L,EAAMX,IAAI/I,WAAWgJ,IAGvBA,IACAiQ,IACAhD,IACY+C,GAAA,EACOQ,GAAA,GACoB,IAA9B9P,EAAMX,IAAI/I,WAAWgJ,IACXwQ,GAAA,GAER9P,EAAA0M,QAAQf,GAAaY,GAAU,GAAM,GAG9CjN,IACAiQ,IACAhD,IACY+C,GAAA,GAKAA,GAAA,GAGKQ,GAAA,EAGTL,EAAA,CAAEzP,EAAMmL,OAAOQ,IAC3B3L,EAAMmL,OAAOQ,GAAarM,EAEnBA,EAAMkB,IACN3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,GAEtBE,GAAQ3J,KACC,IAAPA,EACF0W,GAAU,GAAcA,EAAAvM,EAAM0M,QAAQf,IAAc2D,EAAY,EAAI,IAAM,EAE1E/C,IAMJjN,IAqCF,IAlCaoQ,EAAA,CAAE1P,EAAM0M,QAAQf,IAC7B3L,EAAM0M,QAAQf,GAAa3L,EAAMyM,OAAOd,GAAa,KAAwB,EAAI,GAEjF6D,EAAgBlQ,GAAOkB,EAEXoP,EAAA,CAAE5P,EAAMyM,OAAOd,IACrB3L,EAAAyM,OAAOd,GAAaY,EAASgD,EAEvBM,EAAA,CAAE7P,EAAMoL,OAAOO,IAC3B3L,EAAMoL,OAAOO,GAAarM,EAAMU,EAAMmL,OAAOQ,GAE7CmD,EAAkB9O,EAAMW,GAAG+C,MAAMwC,MAAMF,SAAS,cAEhD4I,EAAgB5O,EAAMgN,WACtBhN,EAAMgN,WAAa,aAoBdsB,EAAW3C,EAAY,EAAG2C,EAAWH,IAS1B4B,EAAA/P,EAAMyM,OAAO6B,GAAYtO,EAAM2M,aAE7CrN,EAAMU,EAAMmL,OAAOmD,GAAYtO,EAAMoL,OAAOkD,MAC5C9N,EAAMR,EAAMqL,OAAOiD,MAZ8BA,IAmBjD,GAAoC,KAAhCtO,EAAMX,IAAI/I,WAAWgJ,MAA2ByQ,EAApD,CAoEA,GAAIP,EAAiB,MAIrB,IADYX,GAAA,EACPxZ,EAAI,EAAGC,EAAIwZ,EAAgBzY,OAAQhB,EAAIC,EAAGD,IAC7C,GAAIyZ,EAAgBzZ,GAAG2K,EAAOsO,EAAUH,GAAS,GAAO,CAC1CU,GAAA,EACZ,MAIJ,GAAIA,EAAW,CAKb7O,EAAM4M,QAAU0B,EAEQ,IAApBtO,EAAM2M,YAIE8C,EAAAxZ,KAAK+J,EAAMmL,OAAOmD,IACjBoB,EAAAzZ,KAAK+J,EAAM0M,QAAQ4B,IACpBuB,EAAA5Z,KAAK+J,EAAMoL,OAAOkD,IAClBsB,EAAA3Z,KAAK+J,EAAMyM,OAAO6B,IACtBtO,EAAAyM,OAAO6B,IAAatO,EAAM2M,WAGlC,MAGQ8C,EAAAxZ,KAAK+J,EAAMmL,OAAOmD,IACjBoB,EAAAzZ,KAAK+J,EAAM0M,QAAQ4B,IACpBuB,EAAA5Z,KAAK+J,EAAMoL,OAAOkD,IAClBsB,EAAA3Z,KAAK+J,EAAMyM,OAAO6B,IAI5BtO,EAAMyM,OAAO6B,IAAY,MA3GzB,CAsCE,IAlCUiB,EAAAhD,EAASvM,EAAMyM,OAAO6B,GAAY,EAGV,KAA9BtO,EAAMX,IAAI/I,WAAWgJ,IAGvBA,IACAiQ,IACAhD,IACY+C,GAAA,EACOQ,GAAA,GACoB,IAA9B9P,EAAMX,IAAI/I,WAAWgJ,IACXwQ,GAAA,GAER9P,EAAA0M,QAAQ4B,GAAY/B,GAAU,GAAM,GAG7CjN,IACAiQ,IACAhD,IACY+C,GAAA,GAKAA,GAAA,GAGKQ,GAAA,EAGXL,EAAAxZ,KAAK+J,EAAMmL,OAAOmD,IAC5BtO,EAAMmL,OAAOmD,GAAYhP,EAElBA,EAAMkB,IACN3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,GAEtBE,GAAQ3J,KACC,IAAPA,EACF0W,GAAU,GAAcA,EAAAvM,EAAM0M,QAAQ4B,IAAagB,EAAY,EAAI,IAAM,EAEzE/C,IAMJjN,IAGFkQ,EAAgBlQ,GAAOkB,EAEZkP,EAAAzZ,KAAK+J,EAAM0M,QAAQ4B,IAC9BtO,EAAM0M,QAAQ4B,GAAYtO,EAAMyM,OAAO6B,GAAY,KAAwB,EAAI,GAErEsB,EAAA3Z,KAAK+J,EAAMyM,OAAO6B,IACtBtO,EAAAyM,OAAO6B,GAAY/B,EAASgD,EAExBM,EAAA5Z,KAAK+J,EAAMoL,OAAOkD,IAC5BtO,EAAMoL,OAAOkD,GAAYhP,EAAMU,EAAMmL,OAAOmD,GAiEhD,IAlBAqB,EAAY3P,EAAM2M,UAClB3M,EAAM2M,UAAY,GAEHhL,EAAA3B,EAAM/J,KAAK,kBAAmB,aAAc,IACrD4S,OAAS,IACTlH,EAAAiH,IAAS5H,EAAQ,CAAE2K,EAAW,GAEpC3L,EAAMW,GAAG+C,MAAMuM,SAASjQ,EAAO2L,EAAW2C,IAE3B3M,EAAA3B,EAAM/J,KAAK,mBAAoB,cAAc,IACtD4S,OAAS,IAEf7I,EAAM4M,QAAUoD,EAChBhQ,EAAMgN,WAAa4B,EACnB5N,EAAM,GAAKhB,EAAMkL,KAIZ7V,EAAI,EAAGA,EAAIwa,EAAUxZ,OAAQhB,IAC1B2K,EAAAmL,OAAO9V,EAAIsW,GAAa8D,EAAUpa,GAClC2K,EAAAoL,OAAO/V,EAAIsW,GAAakE,EAAUxa,GAClC2K,EAAAyM,OAAOpX,EAAIsW,GAAaiE,EAAUva,GAClC2K,EAAA0M,QAAQrX,EAAIsW,GAAa+D,EAAWra,GAIrC,OAFP2K,EAAM2M,UAAYgD,GAEX,GSzQ8C,CAAE,YAAa,YAAa,aAAc,SAC/F,CAAE,KRXa,SAAY3P,EAAO2L,EAAWwC,EAASC,GACtD,IAAI/N,EAAQ6P,EAAKra,EAAI8L,EACjBrC,EAAMU,EAAMmL,OAAOQ,GAAa3L,EAAMoL,OAAOO,GAC7CnL,EAAMR,EAAMqL,OAAOM,GAGvB,GAAI3L,EAAMyM,OAAOd,GAAa3L,EAAM2M,WAAa,EAAY,OAAA,EAK7D,GAAe,MAHNtM,EAAAL,EAAMX,IAAI/I,WAAWgJ,OAIf,KAAXe,GACW,KAAXA,EACK,OAAA,EAMT,IADM6P,EAAA,EACC5Q,EAAMkB,GAAK,CAEhB,IADK3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,QACfe,IAAWb,GAAQ3J,GAAc,OAAA,EACxCA,IAAOwK,GAAU6P,IAGvB,QAAIA,EAAM,KAEN9B,IAEJpO,EAAMkL,KAAOS,EAAY,GAEVhK,EAAA3B,EAAM/J,KAAK,KAAM,KAAM,IAChC2S,IAAS,CAAE+C,EAAW3L,EAAMkL,MAClCvJ,EAAMkH,OAAS5K,MAAMiS,EAAM,GAAG/U,KAAKrF,OAAOC,aAAasK,MANlC,IQjBgC,CAAE,YAAa,YAAa,aAAc,SAC/F,CAAE,OPgFa,SAAcL,EAAO2L,EAAWwC,EAASC,GACxD,IAAIvY,EACAsa,EACA9a,EACAiX,EACA8D,EACAb,EACAc,EACAC,EACAhb,EACAib,EACAC,EACAC,EACAC,EACAlQ,EACA8N,EACA/B,EACAoE,EACA/B,EACAgB,EACAC,EACAe,EACAtR,EACAuR,EACAC,EACA7Q,EACA4O,EACAC,EACAnN,EACAoP,GAAyB,EACzBlE,GAAQ,EAGZ,GAAI7M,EAAMyM,OAAOd,GAAa3L,EAAM2M,WAAa,EAAY,OAAA,EAQ7D,GAAI3M,EAAM+M,YAAc,GACpB/M,EAAMyM,OAAOd,GAAa3L,EAAM+M,YAAc,GAC9C/M,EAAMyM,OAAOd,GAAa3L,EAAM2M,UAC3B,OAAA,EAiBT,GAZIyB,GAA+B,cAArBpO,EAAMgN,YAMdhN,EAAMyM,OAAOd,IAAc3L,EAAM2M,YACVoE,GAAA,IAKPF,EAAAjF,GAAsB5L,EAAO2L,KAAe,GAOhE,GANY0E,GAAA,EACZpQ,EAAQD,EAAMmL,OAAOQ,GAAa3L,EAAMoL,OAAOO,GAC/C+E,EAAcM,OAAOhR,EAAMX,IAAIjJ,MAAM6J,EAAO4Q,EAAiB,IAIzDE,GAA0C,IAAhBL,EAA0B,OAAA,MAAA,CAAA,MAE7BG,EAAAnF,GAAqB1L,EAAO2L,KAAe,GAI/D,OAAA,EAHK0E,GAAA,EAQd,GAAIU,GACE/Q,EAAMoN,WAAWyD,IAAmB7Q,EAAMqL,OAAOM,GAAmB,OAAA,EAO1E,GAHiB8E,EAAAzQ,EAAMX,IAAI/I,WAAWua,EAAiB,GAGnDzC,EAAiB,OAAA,EA6BrB,IA1BAoC,EAAaxQ,EAAMsB,OAAOjL,OAEtBga,GACY1O,EAAA3B,EAAM/J,KAAK,oBAAqB,KAAM,GAChC,IAAhBya,IACI/O,EAAAc,MAAQ,CAAE,CAAE,QAASiO,MAIf/O,EAAA3B,EAAM/J,KAAK,mBAAoB,KAAM,GAG/C0L,EAAAiH,IAAS2H,EAAY,CAAE5E,EAAW,GAClChK,EAAAkH,OAAS/S,OAAOC,aAAa0a,GAMxBnC,EAAA3C,EACImF,GAAA,EACfhC,EAAkB9O,EAAMW,GAAG+C,MAAMwC,MAAMF,SAAS,QAEhD4I,EAAgB5O,EAAMgN,WACtBhN,EAAMgN,WAAa,OAEZsB,EAAWH,GAAS,CAMzB,IALM7O,EAAAuR,EACNrQ,EAAMR,EAAMqL,OAAOiD,GAETiB,EAAAhD,EAASvM,EAAMyM,OAAO6B,GAAYuC,GAAwB7Q,EAAAmL,OAAOQ,GAAa3L,EAAMoL,OAAOO,IAE9FrM,EAAMkB,GAAK,CAGhB,GAAW,KAFN3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,IAGxBiN,GAAU,GAAKA,EAASvM,EAAM0M,QAAQ4B,IAAa,MAAA,CAAA,GACnC,KAAPzY,EAGT,MAFA0W,IAKFjN,IA+EF,IAxEsB8Q,GAJPD,EAAA7Q,IAEKkB,EAEE,EAEA+L,EAASgD,GAKP,IAAyBa,EAAA,GAIjD9D,EAASiD,EAAUa,GAGJzO,EAAA3B,EAAM/J,KAAK,iBAAkB,KAAM,IAC5C4S,OAAS/S,OAAOC,aAAa0a,GAC7B9O,EAAAiH,IAAS0H,EAAY,CAAE3E,EAAW,GACpC0E,IACF1O,EAAMS,KAAOpC,EAAMX,IAAIjJ,MAAM6J,EAAO4Q,EAAiB,IAIvDD,EAAW5Q,EAAM6M,MACjBgD,EAAY7P,EAAMoL,OAAOO,GACzBiE,EAAY5P,EAAMyM,OAAOd,GAMzBgF,EAAgB3Q,EAAM+M,WACtB/M,EAAM+M,WAAa/M,EAAM2M,UACzB3M,EAAM2M,UAAYL,EAElBtM,EAAM6M,OAAQ,EACd7M,EAAMoL,OAAOO,GAAawE,EAAenQ,EAAMmL,OAAOQ,GACtD3L,EAAMyM,OAAOd,GAAaY,EAEtB4D,GAAgB3P,GAAOR,EAAMiN,QAAQtB,EAAY,GAQnD3L,EAAMkL,KAAO+F,KAAK3D,IAAItN,EAAMkL,KAAO,EAAGiD,GAEtCnO,EAAMW,GAAG+C,MAAMuM,SAASjQ,EAAO2L,EAAWwC,GAAS,GAIhDnO,EAAM6M,QAASiE,IACVjE,GAAA,GAIViE,EAAgB9Q,EAAMkL,KAAOS,EAAa,GAAK3L,EAAMiN,QAAQjN,EAAMkL,KAAO,GAE1ElL,EAAM2M,UAAY3M,EAAM+M,WACxB/M,EAAM+M,WAAa4D,EACnB3Q,EAAMoL,OAAOO,GAAakE,EAC1B7P,EAAMyM,OAAOd,GAAaiE,EAC1B5P,EAAM6M,MAAQ+D,GAECjP,EAAA3B,EAAM/J,KAAK,kBAAmB,MAAM,IAC7C4S,OAAS/S,OAAOC,aAAa0a,GAEnCnC,EAAW3C,EAAY3L,EAAMkL,KAC7BoF,EAAU,GAAKhC,EACf6B,EAAenQ,EAAMmL,OAAOQ,GAExB2C,GAAYH,EAAW,MAK3B,GAAInO,EAAMyM,OAAO6B,GAAYtO,EAAM2M,UAAa,MAGhD,GAAI3M,EAAMyM,OAAOd,GAAa3L,EAAM2M,WAAa,EAAK,MAItD,IADYkC,GAAA,EACPxZ,EAAI,EAAGC,EAAIwZ,EAAgBzY,OAAQhB,EAAIC,EAAGD,IAC7C,GAAIyZ,EAAgBzZ,GAAG2K,EAAOsO,EAAUH,GAAS,GAAO,CAC1CU,GAAA,EACZ,MAGJ,GAAIA,EAAa,MAGjB,GAAIwB,EAAW,CAEb,IADAQ,EAAiBjF,GAAsB5L,EAAOsO,IACzB,EAAK,MAC1BrO,EAAQD,EAAMmL,OAAOmD,GAAYtO,EAAMoL,OAAOkD,QAG9C,IADAuC,EAAiBnF,GAAqB1L,EAAOsO,IACxB,EAAK,MAG5B,GAAImC,IAAmBzQ,EAAMX,IAAI/I,WAAWua,EAAiB,GAAM,MAqB9D,OAhBGlP,EADN0O,EACMrQ,EAAM/J,KAAK,qBAAsB,MAAM,GAEvC+J,EAAM/J,KAAK,oBAAqB,MAAM,IAE1C4S,OAAS/S,OAAOC,aAAa0a,GAEnCF,EAAU,GAAKjC,EACftO,EAAMkL,KAAOoD,EAEbtO,EAAMgN,WAAa4B,EAGf/B,GAjRN,SAA6B7M,EAAOuB,GAClC,IAAIlM,EAAGC,EACH6K,EAAQH,EAAMG,MAAQ,EAErB,IAAA9K,EAAIkM,EAAM,EAAGjM,EAAI0K,EAAMsB,OAAOjL,OAAS,EAAGhB,EAAIC,EAAGD,IAChD2K,EAAMsB,OAAOjM,GAAG8K,QAAUA,GAAkC,mBAAzBH,EAAMsB,OAAOjM,GAAGwO,OAC/C7D,EAAAsB,OAAOjM,EAAI,GAAGoO,QAAS,EACvBzD,EAAAsB,OAAOjM,GAAGoO,QAAS,EACpBpO,GAAA,GA0QP6b,CAAoBlR,EAAOwQ,IAGtB,GOvV8C,CAAE,YAAa,YAAa,eACjF,CAAE,YNba,SAAmBxQ,EAAO2L,EAAWwF,EAAU/C,GAC9D,IAAIvY,EACAub,EACAC,EACAlD,EACAmD,EACAjc,EACAC,EACAic,EACAhR,EACAqO,EACA4C,EACAvR,EACAvB,EACAmQ,EACAC,EACA2C,EACAzQ,EAAQ,EACR1B,EAAMU,EAAMmL,OAAOQ,GAAa3L,EAAMoL,OAAOO,GAC7CnL,EAAMR,EAAMqL,OAAOM,GACnB2C,EAAW3C,EAAY,EAG3B,GAAI3L,EAAMyM,OAAOd,GAAa3L,EAAM2M,WAAa,EAAY,OAAA,EAE7D,GAAkC,KAA9B3M,EAAMX,IAAI/I,WAAWgJ,GAA+B,OAAA,EAIjD,OAAEA,EAAMkB,GACT,GAA8B,KAA9BR,EAAMX,IAAI/I,WAAWgJ,IACa,KAAlCU,EAAMX,IAAI/I,WAAWgJ,EAAM,GAAoB,CAC7C,GAAAA,EAAM,IAAMkB,EAAc,OAAA,EAC9B,GAAsC,KAAlCR,EAAMX,IAAI/I,WAAWgJ,EAAM,GAA6B,OAAA,EAC5D,MAYJ,IARA6O,EAAUnO,EAAM4M,QAGhBkC,EAAkB9O,EAAMW,GAAG+C,MAAMwC,MAAMF,SAAS,aAEhD4I,EAAgB5O,EAAMgN,WACtBhN,EAAMgN,WAAa,YAEZsB,EAAWH,IAAYnO,EAAMiN,QAAQqB,GAAWA,IAGrD,KAAItO,EAAMyM,OAAO6B,GAAYtO,EAAM2M,UAAY,GAG3C3M,EAAMyM,OAAO6B,GAAY,GAAzB,CAIJ,IADYO,GAAA,EACPxZ,EAAI,EAAGC,EAAIwZ,EAAgBzY,OAAQhB,EAAIC,EAAGD,IAC7C,GAAIyZ,EAAgBzZ,GAAG2K,EAAOsO,EAAUH,GAAS,GAAO,CAC1CU,GAAA,EACZ,MAGJ,GAAIA,EAAa,MAMnB,IAFArO,GADA9B,EAAMsB,EAAMyN,SAAS9B,EAAW2C,EAAUtO,EAAM2M,WAAW,GAAOhT,QACxDtD,OAELiJ,EAAM,EAAGA,EAAMkB,EAAKlB,IAAO,CAE9B,GAAW,MADXzJ,EAAK6I,EAAIpI,WAAWgJ,IAEX,OAAA,EAAA,GACS,KAAPzJ,EAAqB,CACnB0K,EAAAjB,EACX,OACgB,KAAPzJ,GAEO,KAAPA,KACTyJ,EACUkB,GAA+B,KAAxB9B,EAAIpI,WAAWgJ,KAHhC0B,IASJ,GAAIT,EAAW,GAAsC,KAAjC7B,EAAIpI,WAAWiK,EAAW,GAA6B,OAAA,EAI3E,IAAKjB,EAAMiB,EAAW,EAAGjB,EAAMkB,EAAKlB,IAElC,GAAW,MADXzJ,EAAK6I,EAAIpI,WAAWgJ,IAElB0B,SAAA,IACSxB,GAAQ3J,GAGjB,MAOA,KADJ2b,EAAMxR,EAAMW,GAAGb,QAAQgB,qBAAqBpC,EAAKY,EAAKkB,IAC7CO,GAAa,OAAA,EAGtB,GADOuQ,EAAAtR,EAAMW,GAAG2J,cAAckH,EAAI9S,MAC7BsB,EAAMW,GAAG4J,aAAa+G,GAAgB,OAAA,EAYpC,IANMF,EAJb9R,EAAMkS,EAAIlS,IAKM+R,EAJhBrQ,GAASwQ,EAAIxQ,MAQLf,EAAAX,EACDA,EAAMkB,EAAKlB,IAEhB,GAAW,MADXzJ,EAAK6I,EAAIpI,WAAWgJ,IAElB0B,SAAA,IACSxB,GAAQ3J,GAGjB,MAkBJ,IAZA2b,EAAMxR,EAAMW,GAAGb,QAAQmB,eAAevC,EAAKY,EAAKkB,GAC5ClB,EAAMkB,GAAOP,IAAUX,GAAOkS,EAAIzQ,IACpC0Q,EAAQD,EAAI9S,IACZY,EAAMkS,EAAIlS,IACV0B,GAASwQ,EAAIxQ,QAELyQ,EAAA,GACFnS,EAAA8R,EACEpQ,EAAAqQ,GAIH/R,EAAMkB,IACX3K,EAAK6I,EAAIpI,WAAWgJ,GACfE,GAAQ3J,KACbyJ,IAGF,GAAIA,EAAMkB,GAA+B,KAAxB9B,EAAIpI,WAAWgJ,IAC1BmS,EAMF,IAHQA,EAAA,GACFnS,EAAA8R,EACEpQ,EAAAqQ,EACD/R,EAAMkB,IACX3K,EAAK6I,EAAIpI,WAAWgJ,GACfE,GAAQ3J,KACbyJ,IAKN,QAAIA,EAAMkB,GAA+B,KAAxB9B,EAAIpI,WAAWgJ,SAKxBO,EAAAA,GAAmBnB,EAAItI,MAAM,EAAGmK,OAQpC6N,SAEgC,IAAzBpO,EAAMyB,IAAIiQ,aACnB1R,EAAMyB,IAAIiQ,WAAa,SAEkB,IAAhC1R,EAAMyB,IAAIiQ,WAAWH,KAC9BvR,EAAMyB,IAAIiQ,WAAWH,GAAS,CAAEE,MAAAA,EAAcH,KAAAA,IAGhDtR,EAAMgN,WAAa4B,EAEb5O,EAAAkL,KAAOS,EAAY3K,EAAQ,IAXZ,MMnKrB,CAAE,aJCa,SAAoBhB,EAAO2L,EAAWwC,EAASC,GAC9D,IAAI/Y,EAAGiZ,EAAU3M,EAAO0M,EACpB/O,EAAMU,EAAMmL,OAAOQ,GAAa3L,EAAMoL,OAAOO,GAC7CnL,EAAMR,EAAMqL,OAAOM,GAGvB,GAAI3L,EAAMyM,OAAOd,GAAa3L,EAAM2M,WAAa,EAAY,OAAA,EAE7D,IAAK3M,EAAMW,GAAGa,QAAQmQ,KAAe,OAAA,EAErC,GAAkC,KAA9B3R,EAAMX,IAAI/I,WAAWgJ,GAA+B,OAAA,EAIxD,IAFW+O,EAAArO,EAAMX,IAAIjJ,MAAMkJ,EAAKkB,GAE3BnL,EAAI,EAAGA,EAAI8W,GAAe9V,SACzB8V,GAAe9W,GAAG,GAAGW,KAAKqY,GADOhZ,KAInC,GAAAA,IAAM8W,GAAe9V,OAAiB,OAAA,EAE1C,GAAI+X,EAEF,OAAOjC,GAAe9W,GAAG,GAO3B,GAJAiZ,EAAW3C,EAAY,GAIlBQ,GAAe9W,GAAG,GAAGW,KAAKqY,GACtB,KAAAC,EAAWH,KACZnO,EAAMyM,OAAO6B,GAAYtO,EAAM2M,WADV2B,IAOzB,GAJAhP,EAAMU,EAAMmL,OAAOmD,GAAYtO,EAAMoL,OAAOkD,GAC5C9N,EAAMR,EAAMqL,OAAOiD,GACRD,EAAArO,EAAMX,IAAIjJ,MAAMkJ,EAAKkB,GAE5B2L,GAAe9W,GAAG,GAAGW,KAAKqY,GAAW,CACf,IAApBA,EAAShY,QAAgBiY,IAC7B,MAWC,OANPtO,EAAMkL,KAAOoD,GAEG3M,EAAA3B,EAAM/J,KAAK,aAAc,GAAI,IACvC2S,IAAU,CAAE+C,EAAW2C,GAC7B3M,EAAME,QAAU7B,EAAMyN,SAAS9B,EAAW2C,EAAUtO,EAAM2M,WAAW,IAE9D,GInD8C,CAAE,YAAa,YAAa,eACjF,CAAE,UFfa,SAAiB3M,EAAO2L,EAAWwC,EAASC,GAC3D,IAAIvY,EAAIsK,EAAOyR,EAAKjQ,EAChBrC,EAAMU,EAAMmL,OAAOQ,GAAa3L,EAAMoL,OAAOO,GAC7CnL,EAAMR,EAAMqL,OAAOM,GAGvB,GAAI3L,EAAMyM,OAAOd,GAAa3L,EAAM2M,WAAa,EAAY,OAAA,EAIzD,GAAO,MAFL9W,EAAAmK,EAAMX,IAAI/I,WAAWgJ,KAEDA,GAAOkB,EAAc,OAAA,EAK/C,IAFQL,EAAA,EACHtK,EAAAmK,EAAMX,IAAI/I,aAAagJ,GACd,KAAPzJ,GAAsByJ,EAAMkB,GAAOL,GAAS,GACjDA,IACKtK,EAAAmK,EAAMX,IAAI/I,aAAagJ,GAG9B,QAAIa,EAAQ,GAAMb,EAAMkB,IAAQhB,GAAQ3J,MAEpCuY,IAIE5N,EAAAR,EAAMqN,eAAe7M,EAAKlB,IAC1BsS,EAAA5R,EAAMwN,cAAchN,EAAK,GAAMlB,IAC3BA,GAAOE,GAAQQ,EAAMX,IAAI/I,WAAWsb,EAAM,MAC5CpR,EAAAoR,GAGR5R,EAAMkL,KAAOS,EAAY,GAEzBhK,EAAe3B,EAAM/J,KAAK,eAAgB,IAAMH,OAAOqK,GAAQ,IACzD0I,OAAS,WAAWzS,MAAM,EAAG+J,GAC7BwB,EAAAiH,IAAS,CAAE+C,EAAW3L,EAAMkL,OAEjBvJ,EAAA3B,EAAM/J,KAAK,SAAU,GAAI,IACpC4L,QAAW7B,EAAMX,IAAIjJ,MAAMkJ,EAAKkB,GAAK7G,OACrCgI,EAAAiH,IAAW,CAAE+C,EAAW3L,EAAMkL,MACpCvJ,EAAMkB,SAAW,IAEjBlB,EAAe3B,EAAM/J,KAAK,gBAAiB,IAAMH,OAAOqK,IAAQ,IAC1D0I,OAAS,WAAWzS,MAAM,EAAG+J,KAtBd,IEPgC,CAAE,YAAa,YAAa,eACjF,CAAE,WGlBa,SAAkBH,EAAO2L,EAAWwC,GACnD,IAAItM,EAASgN,EAAWxZ,EAAGC,EAAGqM,EAAOrC,EAAKkB,EAAKL,EAAOE,EACxBuO,EAA1BN,EAAW3C,EAAY,EACvBmD,EAAkB9O,EAAMW,GAAG+C,MAAMwC,MAAMF,SAAS,aAGpD,GAAIhG,EAAMyM,OAAOd,GAAa3L,EAAM2M,WAAa,EAAY,OAAA,EAM7D,IAJAiC,EAAgB5O,EAAMgN,WACtBhN,EAAMgN,WAAa,YAGZsB,EAAWH,IAAYnO,EAAMiN,QAAQqB,GAAWA,IAGrD,KAAItO,EAAMyM,OAAO6B,GAAYtO,EAAM2M,UAAY,GAA/C,CAKA,GAAI3M,EAAMyM,OAAO6B,IAAatO,EAAM2M,YAClCrN,EAAMU,EAAMmL,OAAOmD,GAAYtO,EAAMoL,OAAOkD,KAC5C9N,EAAMR,EAAMqL,OAAOiD,MAKF,MAFNjO,EAAAL,EAAMX,IAAI/I,WAAWgJ,KAEW,KAAXe,KACtBf,EAAAU,EAAMuN,UAAUjO,EAAKe,IAC3Bf,EAAMU,EAAMoN,WAAW9N,KAEZkB,GAAK,CACLL,EAAW,KAAXE,EAAyB,EAAI,EACtC,MAOJ,KAAAL,EAAMyM,OAAO6B,GAAY,GAAzB,CAIJ,IADYO,GAAA,EACPxZ,EAAI,EAAGC,EAAIwZ,EAAgBzY,OAAQhB,EAAIC,EAAGD,IAC7C,GAAIyZ,EAAgBzZ,GAAG2K,EAAOsO,EAAUH,GAAS,GAAO,CAC1CU,GAAA,EACZ,MAGJ,GAAIA,EAAa,OAGnB,QAAK1O,IAKL0B,EAAU7B,EAAMyN,SAAS9B,EAAW2C,EAAUtO,EAAM2M,WAAW,GAAOhT,OAEtEqG,EAAMkL,KAAOoD,EAAW,GAExB3M,EAAiB3B,EAAM/J,KAAK,eAAgB,IAAMH,OAAOqK,GAAQ,IAC3D0I,OAAW/S,OAAOC,aAAasK,GAC/BsB,EAAAiH,IAAW,CAAE+C,EAAW3L,EAAMkL,OAEnBvJ,EAAA3B,EAAM/J,KAAK,SAAU,GAAI,IACpC4L,QAAWA,EACjBF,EAAMiH,IAAW,CAAE+C,EAAW3L,EAAMkL,KAAO,GAC3CvJ,EAAMkB,SAAW,IAEjBlB,EAAiB3B,EAAM/J,KAAK,gBAAiB,IAAMH,OAAOqK,IAAQ,IAC5D0I,OAAW/S,OAAOC,aAAasK,GAErCL,EAAMgN,WAAa4B,GAEZ,KHzDP,CAAE,YInBa,SAAmB5O,EAAO2L,GACzC,IAAI9J,EAASgN,EAAWxZ,EAAGC,EAAGqM,EAAOiN,EACjCN,EAAW3C,EAAY,EACvBmD,EAAkB9O,EAAMW,GAAG+C,MAAMwC,MAAMF,SAAS,aAChDmI,EAAUnO,EAAM4M,QAMpB,IAJAgC,EAAgB5O,EAAMgN,WACtBhN,EAAMgN,WAAa,YAGZsB,EAAWH,IAAYnO,EAAMiN,QAAQqB,GAAWA,IAGrD,KAAItO,EAAMyM,OAAO6B,GAAYtO,EAAM2M,UAAY,GAG3C3M,EAAMyM,OAAO6B,GAAY,GAAzB,CAIJ,IADYO,GAAA,EACPxZ,EAAI,EAAGC,EAAIwZ,EAAgBzY,OAAQhB,EAAIC,EAAGD,IAC7C,GAAIyZ,EAAgBzZ,GAAG2K,EAAOsO,EAAUH,GAAS,GAAO,CAC1CU,GAAA,EACZ,MAGJ,GAAIA,EAAa,MAmBZ,OAhBPhN,EAAU7B,EAAMyN,SAAS9B,EAAW2C,EAAUtO,EAAM2M,WAAW,GAAOhT,OAEtEqG,EAAMkL,KAAOoD,GAEI3M,EAAA3B,EAAM/J,KAAK,iBAAkB,IAAK,IAC7C2S,IAAW,CAAE+C,EAAW3L,EAAMkL,OAEnBvJ,EAAA3B,EAAM/J,KAAK,SAAU,GAAI,IACpC4L,QAAWA,EACXF,EAAAiH,IAAW,CAAE+C,EAAW3L,EAAMkL,MACpCvJ,EAAMkB,SAAW,GAEAlB,EAAA3B,EAAM/J,KAAK,kBAAmB,KAAK,GAEpD+J,EAAMgN,WAAa4B,GAEZ,KJnBT,SAAuBiD,KAMrBpa,KAAKyO,MAAQ,IAAI7B,GAEjB,IAAA,IAAShP,EAAI,EAAGA,EAAIoU,GAAOpT,OAAQhB,IACjCoC,KAAKyO,MAAMjQ,KAAKwT,GAAOpU,GAAG,GAAIoU,GAAOpU,GAAG,GAAI,CAAEuP,KAAakN,GAAAzc,GAAG,IAAM,IAAIe,UAO5E2b,GAAY3Y,UAAU6W,SAAW,SAAUjQ,EAAO2L,EAAWwC,GAQ3D,IAPA,IAAQ9Y,EACJ+L,EAAQ3J,KAAKyO,MAAMF,SAAS,IAC5BjC,EAAM3C,EAAM/K,OACZ6U,EAAOS,EACPqG,GAAgB,EAChBC,EAAajS,EAAMW,GAAGa,QAAQyQ,WAE3B/G,EAAOiD,IACNnO,EAAAkL,KAAOA,EAAOlL,EAAMkN,eAAehC,KACrCA,GAAQiD,OAIRnO,EAAMyM,OAAOvB,GAAQlL,EAAM2M,YANV,CAUjB,GAAA3M,EAAMG,OAAS8R,EAAY,CAC7BjS,EAAMkL,KAAOiD,EACb,MAUF,IAAK9Y,EAAI,EAAGA,EAAI0O,IACT3C,EAAM/L,GAAG2K,EAAOkL,EAAMiD,GAAS,GADjB9Y,KAOrB2K,EAAM6M,OAASmF,EAGXhS,EAAMiN,QAAQjN,EAAMkL,KAAO,KACb8G,GAAA,IAGlB9G,EAAOlL,EAAMkL,MAEFiD,GAAWnO,EAAMiN,QAAQ/B,KAClB8G,GAAA,EAChB9G,IACAlL,EAAMkL,KAAOA,KAWnB6G,GAAY3Y,UAAUC,MAAQ,SAAUgG,EAAKsB,EAAIc,EAAKyQ,GAChD,IAAAlS,EAECX,IAELW,EAAQ,IAAIvI,KAAKqT,MAAMzL,EAAKsB,EAAIc,EAAKyQ,GAErCza,KAAKwY,SAASjQ,EAAOA,EAAMkL,KAAMlL,EAAM4M,WAIzCmF,GAAY3Y,UAAU0R,MAAQqH,GAG9B,IAAAC,GAAiBL,GK5GjB,SAAAM,GAA0Bxc,GAChB,OAAAA,GACD,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,IACA,KAAA,IACA,KAAA,IACI,OAAA,EAAA,QAEA,OAAA,GChCb,IDoCA,IExCI2J,GAAUjE,EAA2BiE,QDArCA,GAAUjE,EAA2BiE,QAErC8S,GAAU,GAELjd,GAAI,EAAGA,GAAI,IAAKA,KAAOid,GAAQrc,KAAK,GAE7C,qCACG2D,MAAM,IAAIuE,SAAQ,SAAUtI,GAAcyc,GAAAzc,EAAGS,WAAW,IAAM,KAGjE,UEkCA,SAAAic,GAAqBvS,EAAOwS,GACtB,IAAAnd,EAAGwF,EACH4X,EACAC,EACA/Q,EACAgR,EAAc,GACdnS,EAAMgS,EAAWnc,OAErB,IAAKhB,EAAI,EAAGA,EAAImL,EAAKnL,IAGO,OAF1Bod,EAAaD,EAAWnd,IAETud,SAIY,IAAvBH,EAAW9E,MAIf+E,EAAWF,EAAWC,EAAW9E,MAEjBhM,EAAA3B,EAAMsB,OAAOmR,EAAW/J,QAClC7E,KAAU,SAChBlC,EAAMiC,IAAU,IAChBjC,EAAMgC,QAAU,EAChBhC,EAAMkH,OAAU,KAChBlH,EAAME,QAAU,IAEAF,EAAA3B,EAAMsB,OAAOoR,EAAShK,QAChC7E,KAAU,UAChBlC,EAAMiC,IAAU,IAChBjC,EAAMgC,SAAU,EAChBhC,EAAMkH,OAAU,KAChBlH,EAAME,QAAU,GAE8B,SAA1C7B,EAAMsB,OAAOoR,EAAShK,MAAQ,GAAG7E,MACY,MAA7C7D,EAAMsB,OAAOoR,EAAShK,MAAQ,GAAG7G,SAEvB8Q,EAAA1c,KAAKyc,EAAShK,MAAQ,IAUtC,KAAOiK,EAAYtc,QAAQ,CAIlB,IAFPwE,GADAxF,EAAIsd,EAAYzD,OACR,EAEDrU,EAAImF,EAAMsB,OAAOjL,QAAmC,YAAzB2J,EAAMsB,OAAOzG,GAAGgJ,MAChDhJ,IAKExF,MAFJwF,IAGE8G,EAAQ3B,EAAMsB,OAAOzG,GACfmF,EAAAsB,OAAOzG,GAAKmF,EAAMsB,OAAOjM,GAC/B2K,EAAMsB,OAAOjM,GAAKsM,IAtGxBkR,GAAA5C,SAA0B,SAAuBjQ,EAAOoO,GAClD,IAAA/Y,EAAGyd,EAAgB/O,EAAKlO,EACxBoK,EAAQD,EAAMV,IACde,EAASL,EAAMX,IAAI/I,WAAW2J,GAElC,GAAImO,EAAiB,OAAA,EAErB,GAAe,MAAX/N,EAAiC,OAAA,EAMrC,GAHA0D,GADU+O,EAAA9S,EAAM+S,WAAW/S,EAAMV,KAAK,IACxBjJ,OACdR,EAAKC,OAAOC,aAAasK,GAErB0D,EAAM,EAAY,OAAA,EAQtB,IANIA,EAAM,IACQ/D,EAAM/J,KAAK,OAAQ,GAAI,GACjC4L,QAAUhM,EAChBkO,KAGG1O,EAAI,EAAGA,EAAI0O,EAAK1O,GAAK,EACR2K,EAAM/J,KAAK,OAAQ,GAAI,GACjC4L,QAAUhM,EAAKA,EAErBmK,EAAMwS,WAAWvc,KAAK,CACpB2c,OAAQvS,EACRhK,OAAQ,EACRqS,MAAQ1I,EAAMsB,OAAOjL,OAAS,EAC9BsX,KAAQ,EACRqF,KAAQF,EAAQG,SAChBC,MAAQJ,EAAQK,YAMb,OAFPnT,EAAMV,KAAOwT,EAAQzc,QAEd,GAyETwc,GAAAO,YAA6B,SAAuBpT,GAClD,IAAIqT,EACAC,EAActT,EAAMsT,YACpB9S,EAAMR,EAAMsT,YAAYjd,OAI5B,IAFA+c,GAAYpT,EAAOA,EAAMwS,YAEpBa,EAAO,EAAGA,EAAO7S,EAAK6S,IACrBC,EAAYD,IAASC,EAAYD,GAAMb,YAC7BD,GAAAvS,EAAOsT,EAAYD,GAAMb,uBCxE3C,SAAAY,GAAqBpT,EAAOwS,GAC1B,IAAInd,EACAod,EACAC,EACA/Q,EACA9L,EACA0d,EAGJ,IAAKle,EAFKmd,EAAWnc,OAEN,EAAGhB,GAAK,EAAGA,IAGE,MAF1Bod,EAAaD,EAAWnd,IAETud,QAAgD,KAAtBH,EAAWG,SAKzB,IAAvBH,EAAW9E,MAIf+E,EAAWF,EAAWC,EAAW9E,KAOjC4F,EAAWle,EAAI,GACJmd,EAAWnd,EAAI,GAAGsY,MAAQ8E,EAAW9E,IAAM,GAE3C6E,EAAWnd,EAAI,GAAGud,SAAWH,EAAWG,QACxCJ,EAAWnd,EAAI,GAAGqT,QAAU+J,EAAW/J,MAAQ,GAE/C8J,EAAWC,EAAW9E,IAAM,GAAGjF,QAAUgK,EAAShK,MAAQ,EAEhE7S,EAAAC,OAAOC,aAAa0c,EAAWG,SAEpBjR,EAAA3B,EAAMsB,OAAOmR,EAAW/J,QAClC7E,KAAU0P,EAAW,cAAgB,UACrC5R,EAAAiC,IAAU2P,EAAW,SAAW,KACtC5R,EAAMgC,QAAU,EACVhC,EAAAkH,OAAU0K,EAAW1d,EAAKA,EAAKA,EACrC8L,EAAME,QAAU,IAEAF,EAAA3B,EAAMsB,OAAOoR,EAAShK,QAChC7E,KAAU0P,EAAW,eAAiB,WACtC5R,EAAAiC,IAAU2P,EAAW,SAAW,KACtC5R,EAAMgC,SAAU,EACVhC,EAAAkH,OAAU0K,EAAW1d,EAAKA,EAAKA,EACrC8L,EAAME,QAAU,GAEZ0R,IACFvT,EAAMsB,OAAOkR,EAAWnd,EAAI,GAAGqT,OAAO7G,QAAU,GAChD7B,EAAMsB,OAAOkR,EAAWC,EAAW9E,IAAM,GAAGjF,OAAO7G,QAAU,GAC7DxM,MAtGNme,GAAAvD,SAA0B,SAAkBjQ,EAAOoO,GAC7C,IAAA/Y,EAAGyd,EACH7S,EAAQD,EAAMV,IACde,EAASL,EAAMX,IAAI/I,WAAW2J,GAElC,GAAImO,EAAiB,OAAA,EAEjB,GAAW,KAAX/N,GAAsC,KAAXA,EAAkC,OAAA,EAIjE,IAFAyS,EAAU9S,EAAM+S,WAAW/S,EAAMV,IAAgB,KAAXe,GAEjChL,EAAI,EAAGA,EAAIyd,EAAQzc,OAAQhB,IACd2K,EAAM/J,KAAK,OAAQ,GAAI,GACjC4L,QAAU/L,OAAOC,aAAasK,GAEpCL,EAAMwS,WAAWvc,KAAK,CAGpB2c,OAAQvS,EAIRhK,OAAQyc,EAAQzc,OAIhBqS,MAAQ1I,EAAMsB,OAAOjL,OAAS,EAK9BsX,KAAQ,EAKRqF,KAAQF,EAAQG,SAChBC,MAAQJ,EAAQK,YAMb,OAFPnT,EAAMV,KAAOwT,EAAQzc,QAEd,GAmETmd,GAAAJ,YAA6B,SAAkBpT,GAC7C,IAAIqT,EACAC,EAActT,EAAMsT,YACpB9S,EAAMR,EAAMsT,YAAYjd,OAI5B,IAFA+c,GAAYpT,EAAOA,EAAMwS,YAEpBa,EAAO,EAAGA,EAAO7S,EAAK6S,IACrBC,EAAYD,IAASC,EAAYD,GAAMb,YAC7BY,GAAApT,EAAOsT,EAAYD,GAAMb,aC1H3C,IAAI3S,GAAuBtE,EAA2BsE,mBAClDL,GAAuBjE,EAA2BiE,QCDlDK,GAAuBtE,EAA2BsE,mBAClDL,GAAuBjE,EAA2BiE,QCClDiU,GAAc,0IACdC,GAAc,sDCFd3H,GAAcxQ,GAA6BwQ,YAU/C,ICXIjX,GAAoByG,EACpBiD,GAAoBhD,EAA2BgD,IAC/CS,GAAoBzD,EAA2ByD,kBAC/CC,GAAoB1D,EAA2B0D,cAG/CyU,GAAa,uCACbC,GAAa,4BCNjB,SAAAC,GAA2B7T,EAAOwS,GAC5B,IAAAsB,EAAWC,EAAWC,EAAQC,EAAQC,EAAcC,EACpDC,EAAYC,EACZC,EAAgB,GAChB9T,EAAMgS,EAAWnc,OAErB,GAAKmK,EAAL,CAGA,IAAI+T,EAAY,EACZC,GAAe,EACfC,EAAQ,GAEZ,IAAKX,EAAY,EAAGA,EAAYtT,EAAKsT,IAqBnC,GApBAE,EAASxB,EAAWsB,GAEpBW,EAAMxe,KAAK,GAMPuc,EAAW+B,GAAW3B,SAAWoB,EAAOpB,QAAU4B,IAAiBR,EAAOtL,MAAQ,IACxE6L,EAAAT,GAGdU,EAAeR,EAAOtL,MAMfsL,EAAA3d,OAAS2d,EAAO3d,QAAU,EAE5B2d,EAAOd,MAAZ,CAgBA,IAVKoB,EAAclY,eAAe4X,EAAOpB,UACvC0B,EAAcN,EAAOpB,QAAU,KAAU,GAAA,MAAY,GAAA,IAGxCsB,EAAAI,EAAcN,EAAOpB,SAASoB,EAAOhB,KAAO,EAAI,GAAMgB,EAAO3d,OAAS,GAInE8d,EAFNJ,EAAAQ,EAAYE,EAAMF,GAAa,EAIpCR,EAAYG,EAAcH,GAAaU,EAAMV,GAAa,EAG3D,IAFJE,EAASzB,EAAWuB,IAETnB,SAAWoB,EAAOpB,QAEzBqB,EAAOjB,MAAQiB,EAAOtG,IAAM,IAEjByG,GAAA,GASTH,EAAOf,OAASc,EAAOhB,QACbiB,EAAA5d,OAAS2d,EAAO3d,QAAU,GAAM,IACtC4d,EAAO5d,OAAS,GAAM,GAAK2d,EAAO3d,OAAS,GAAM,IACtC+d,GAAA,KAKdA,GAAY,CAKJC,EAAAN,EAAY,IAAMvB,EAAWuB,EAAY,GAAGf,KACrDyB,EAAMV,EAAY,GAAK,EACvB,EAEIU,EAAAX,GAAaA,EAAYC,EAAYM,EAC3CI,EAAMV,GAAaM,EAEnBL,EAAOhB,MAAQ,EACfiB,EAAOtG,IAAQmG,EACfG,EAAOf,OAAQ,EACGiB,GAAA,EAGHK,GAAA,EACf,OAKsB,IAAxBL,IAQYG,EAAAN,EAAOpB,SAAgBoB,EAAAhB,KAAO,EAAI,IAAOgB,EAAO3d,QAAU,GAAK,GAAM8d,KAMzF,IChHIpL,GAAiBxN,GACjBkE,GAAiBjE,EAA2BiE,aAC5CE,GAAiBnE,EAA2BmE,YAC5CD,GAAiBlE,EAA2BkE,eAGhD,SAAqBgV,GAAArV,EAAKsB,EAAIc,EAAKyQ,GACjCza,KAAK4H,IAAMA,EACX5H,KAAKgK,IAAMA,EACXhK,KAAKkJ,GAAKA,EACVlJ,KAAK6J,OAAS4Q,EACTza,KAAA6b,YAAcrV,MAAMiU,EAAU7b,QAEnCoB,KAAK6H,IAAM,EACN7H,KAAAgJ,OAAShJ,KAAK4H,IAAIhJ,OACvBoB,KAAK0I,MAAQ,EACb1I,KAAKkd,QAAU,GACfld,KAAKmd,aAAe,EAIpBnd,KAAKhC,MAAQ,GAGbgC,KAAK+a,WAAa,GAGlB/a,KAAKod,iBAAmB,GAGxBpd,KAAKqd,UAAY,GACjBrd,KAAKsd,kBAAmB,EAM1BL,GAAYtb,UAAU4b,YAAc,WAClC,IAAIrT,EAAQ,IAAIoH,GAAM,OAAQ,GAAI,GAK3B,OAJPpH,EAAME,QAAUpK,KAAKkd,QACrBhT,EAAMxB,MAAQ1I,KAAKmd,aACnBnd,KAAK6J,OAAOrL,KAAK0L,GACjBlK,KAAKkd,QAAU,GACRhT,GAOT+S,GAAYtb,UAAUnD,KAAO,SAAU4N,EAAMD,EAAKD,GAC5ClM,KAAKkd,SACFld,KAAAud,cAGP,IAAIrT,EAAQ,IAAIoH,GAAMlF,EAAMD,EAAKD,GAC7BsR,EAAa,KAqBV,OAnBHtR,EAAU,IAEPlM,KAAA0I,QACA1I,KAAA+a,WAAa/a,KAAKod,iBAAiB3F,OAG1CvN,EAAMxB,MAAQ1I,KAAK0I,MAEfwD,EAAU,IAEPlM,KAAA0I,QACA1I,KAAAod,iBAAiB5e,KAAKwB,KAAK+a,YAChC/a,KAAK+a,WAAa,GACLyC,EAAA,CAAEzC,WAAY/a,KAAK+a,aAGlC/a,KAAKmd,aAAend,KAAK0I,MACzB1I,KAAK6J,OAAOrL,KAAK0L,GACjBlK,KAAK6b,YAAYrd,KAAKgf,GACftT,GAUT+S,GAAYtb,UAAU2Z,WAAa,SAAU9S,EAAOiV,GAC9C,IAAaxN,EAAUC,EAAUwN,EAAOlC,EAAUE,EAClDrL,EAAkBF,EAClBG,EAAkBF,EAFlBvI,EAAMW,EAGNmV,GAAgB,EAChBC,GAAiB,EACjB7U,EAAM/I,KAAKgJ,OACXJ,EAAS5I,KAAK4H,IAAI/I,WAAW2J,GAKjC,IAFAyH,EAAWzH,EAAQ,EAAIxI,KAAK4H,IAAI/I,WAAW2J,EAAQ,GAAK,GAEjDX,EAAMkB,GAAO/I,KAAK4H,IAAI/I,WAAWgJ,KAASe,GAAUf,IAqCpD,OAnCP6V,EAAQ7V,EAAMW,EAGd0H,EAAWrI,EAAMkB,EAAM/I,KAAK4H,IAAI/I,WAAWgJ,GAAO,GAElDsI,EAAkBlI,GAAegI,IAAa/H,GAAY7J,OAAOC,aAAa2R,IAC9EG,EAAkBnI,GAAeiI,IAAahI,GAAY7J,OAAOC,aAAa4R,IAE9EG,EAAmBrI,GAAaiI,IAChCK,EAAmBtI,GAAakI,IAGdyN,GAAA,EACPvN,OACiBD,IACRwN,GAAA,IAIhBtN,EACeuN,GAAA,EACRzN,OACiBC,IACPwN,GAAA,IAIhBH,GAISjC,EAAAmC,EACAjC,EAAAkC,IAJApC,EAAAmC,KAAoBC,GAAkBzN,GACtCuL,EAAAkC,KAAoBD,GAAkBvN,IAM7C,CACLoL,SAAAA,EACAE,UAAAA,EACA9c,OAAW8e,IAMfT,GAAYtb,UAAU2P,MAAQA,GAG9B,IAAAuM,GAAiBZ,GCjJbrQ,GAAkB9I,EAMlBkO,GAAS,CACX,CAAE,OZ6Ba,SAAczJ,EAAOoO,GAG7B,IAFP,IAAI9O,EAAMU,EAAMV,IAETA,EAAMU,EAAMS,SAAW4R,GAAiBrS,EAAMX,IAAI/I,WAAWgJ,KAClEA,IAGE,OAAAA,IAAQU,EAAMV,MAEb8O,IAAUpO,EAAM2U,SAAW3U,EAAMX,IAAIjJ,MAAM4J,EAAMV,IAAKA,IAE3DU,EAAMV,IAAMA,GAEL,KYzCP,CAAE,UVTa,SAAiBU,EAAOoO,GACvC,IAAImH,EAAM/U,EAAKgV,EAAIlW,EAAMU,EAAMV,IAE/B,GAAkC,KAA9BU,EAAMX,IAAI/I,WAAWgJ,GAAgC,OAAA,EASzD,GAPOiW,EAAAvV,EAAM2U,QAAQte,OAAS,EAC9BmK,EAAMR,EAAMS,QAMP2N,EACH,GAAImH,GAAQ,GAAwC,KAAnCvV,EAAM2U,QAAQre,WAAWif,GACxC,GAAIA,GAAQ,GAA4C,KAAvCvV,EAAM2U,QAAQre,WAAWif,EAAO,GAAa,CAG5D,IADAC,EAAKD,EAAO,EACLC,GAAM,GAA0C,KAArCxV,EAAM2U,QAAQre,WAAWkf,EAAK,IAAaA,IAE7DxV,EAAM2U,QAAU3U,EAAM2U,QAAQve,MAAM,EAAGof,GACjCxV,EAAA/J,KAAK,YAAa,KAAM,QAE9B+J,EAAM2U,QAAU3U,EAAM2U,QAAQve,MAAM,GAAG,GACjC4J,EAAA/J,KAAK,YAAa,KAAM,QAI1B+J,EAAA/J,KAAK,YAAa,KAAM,GAOlC,IAHAqJ,IAGOA,EAAMkB,GAAOhB,GAAQQ,EAAMX,IAAI/I,WAAWgJ,KAASA,IAGnD,OADPU,EAAMV,IAAMA,GACL,IU3BP,CAAE,SXHa,SAAgBU,EAAOoO,GACtC,IAAIvY,EAAIyJ,EAAMU,EAAMV,IAAKkB,EAAMR,EAAMS,OAErC,GAAkC,KAA9BT,EAAMX,IAAI/I,WAAWgJ,GAA+B,OAAA,EAIxD,KAFAA,EAEUkB,EAAK,CAGb,IAFK3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,IAEjB,KAAuB,IAAhBgT,GAAQzc,GAGf,OAFFuY,IAAgBpO,EAAA2U,SAAW3U,EAAMX,IAAIC,IAC1CU,EAAMV,KAAO,GACN,EAGT,GAAW,KAAPzJ,EAAa,CAOf,IANKuY,GACGpO,EAAA/J,KAAK,YAAa,KAAM,GAGhCqJ,IAEOA,EAAMkB,IACN3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,GACrBE,GAAQ3J,KACbyJ,IAIK,OADPU,EAAMV,IAAMA,GACL,GAMJ,OAFF8O,IAAUpO,EAAM2U,SAAW,MAC1B3U,EAAAV,OACC,IWhCP,CAAE,YCba,SAAkBU,EAAOoO,GACxC,IAAInO,EAAOO,EAAKH,EAAQsB,EAAO8T,EAAYC,EAAUC,EAAcC,EAC/DtW,EAAMU,EAAMV,IAGhB,GAAW,KAFFU,EAAMX,IAAI/I,WAAWgJ,GAEG,OAAA,EAOjC,IALQW,EAAAX,EACRA,IACAkB,EAAMR,EAAMS,OAGLnB,EAAMkB,GAAqC,KAA9BR,EAAMX,IAAI/I,WAAWgJ,IAAwBA,IAKjE,GAFAqW,GADStV,EAAAL,EAAMX,IAAIjJ,MAAM6J,EAAOX,IACVjJ,OAElB2J,EAAM+U,mBAAqB/U,EAAM8U,UAAUa,IAAiB,IAAM1V,EAG7D,OAFFmO,IAAQpO,EAAM2U,SAAWtU,GAC9BL,EAAMV,KAAOqW,GACN,EAMT,IAHAF,EAAaC,EAAWpW,GAGuC,OAA1CU,EAAMX,IAAIhF,QAAQ,IAAKqb,KAAmB,CAI7D,IAHAA,EAAWD,EAAa,EAGjBC,EAAWlV,GAA0C,KAAnCR,EAAMX,IAAI/I,WAAWof,IAA6BA,IAI3E,IAFAE,EAAeF,EAAWD,KAELE,EAUZ,OARFvH,KACSzM,EAAA3B,EAAM/J,KAAK,cAAe,OAAQ,IACxC4S,OAAUxI,EACVsB,EAAAE,QAAU7B,EAAMX,IAAIjJ,MAAMkJ,EAAKmW,GAClC1e,QAAQ,MAAO,KACfA,QAAQ,WAAY,OAEzBiJ,EAAMV,IAAMoW,GACL,EAIT1V,EAAM8U,UAAUc,GAAgBH,EAQ3B,OAJPzV,EAAM+U,kBAAmB,EAEpB3G,IAAQpO,EAAM2U,SAAWtU,GAC9BL,EAAMV,KAAOqW,GACN,ID1CP,CAAE,gBAAmBE,GAAwC5F,UAC7D,CAAE,WAAmB6F,GAAmC7F,UACxD,CAAE,OPba,SAAcjQ,EAAOoO,GAChC,IAAA3L,EACAlN,EACAgc,EACAhR,EACAwV,EACAzW,EACAkS,EACAwE,EAEA1E,EAAO,GACPG,EAAQ,GACR/Q,EAASV,EAAMV,IACfkB,EAAMR,EAAMS,OACZR,EAAQD,EAAMV,IACd2W,GAAiB,EAErB,GAAwC,KAApCjW,EAAMX,IAAI/I,WAAW0J,EAAMV,KAA+B,OAAA,EAM9D,GAJAyW,EAAa/V,EAAMV,IAAM,GACzBiB,EAAWP,EAAMW,GAAGb,QAAQC,eAAeC,EAAOA,EAAMV,KAAK,IAG9C,EAAY,OAAA,EAG3B,IADAA,EAAMiB,EAAW,GACPC,GAAqC,KAA9BR,EAAMX,IAAI/I,WAAWgJ,GAAsB,CAWnD,IALU2W,GAAA,EAIjB3W,IACOA,EAAMkB,IACJjL,EAAAyK,EAAMX,IAAI/I,WAAWgJ,GACvBE,GAAQjK,IAAkB,KAATA,GAFN+J,KAIlB,GAAIA,GAAOkB,EAAc,OAAA,EAMzB,GAFQP,EAAAX,GACRkS,EAAMxR,EAAMW,GAAGb,QAAQgB,qBAAqBd,EAAMX,IAAKC,EAAKU,EAAMS,SAC1DM,GAAI,CAWH,IAVAuQ,EAAAtR,EAAMW,GAAG2J,cAAckH,EAAI9S,KAC9BsB,EAAMW,GAAG4J,aAAa+G,GACxBhS,EAAMkS,EAAIlS,IAEHgS,EAAA,GAKDrR,EAAAX,EACDA,EAAMkB,IACJjL,EAAAyK,EAAMX,IAAI/I,WAAWgJ,GACvBE,GAAQjK,IAAkB,KAATA,GAFN+J,KAQlB,GADAkS,EAAMxR,EAAMW,GAAGb,QAAQmB,eAAejB,EAAMX,IAAKC,EAAKU,EAAMS,QACxDnB,EAAMkB,GAAOP,IAAUX,GAAOkS,EAAIzQ,GAM7B,IALP0Q,EAAQD,EAAI9S,IACZY,EAAMkS,EAAIlS,IAIHA,EAAMkB,IACJjL,EAAAyK,EAAMX,IAAI/I,WAAWgJ,GACvBE,GAAQjK,IAAkB,KAATA,GAFN+J,OAOlBA,GAAOkB,GAAqC,KAA9BR,EAAMX,IAAI/I,WAAWgJ,MAEpB2W,GAAA,GAEnB3W,IAGF,GAAI2W,EAAgB,CAIlB,QAAoC,IAAzBjW,EAAMyB,IAAIiQ,WAAqC,OAAA,EAmB1D,GAjBIpS,EAAMkB,GAAqC,KAA9BR,EAAMX,IAAI/I,WAAWgJ,IACpCW,EAAQX,EAAM,GACdA,EAAMU,EAAMW,GAAGb,QAAQC,eAAeC,EAAOV,KAClC,EACDiS,EAAAvR,EAAMX,IAAIjJ,MAAM6J,EAAOX,KAE/BA,EAAMiB,EAAW,GAGnBjB,EAAMiB,EAAW,EAKdgR,IAAiBA,EAAAvR,EAAMX,IAAIjJ,MAAM2f,EAAYxV,MAE5CyV,EAAAhW,EAAMyB,IAAIiQ,WAAW7R,GAAmB0R,KAGrC,OADPvR,EAAMV,IAAMoB,GACL,EAET4Q,EAAO0E,EAAI1E,KACXG,EAAQuE,EAAIvE,MAwBP,OAjBFrD,IACHpO,EAAMV,IAAMyW,EACZ/V,EAAMS,OAASF,EAEAP,EAAM/J,KAAK,YAAa,IAAK,GACtCwM,MAASA,EAAQ,CAAE,CAAE,OAAQ6O,IAC/BG,GACIhP,EAAAxM,KAAK,CAAE,QAASwb,IAGlBzR,EAAAW,GAAGC,OAAOqP,SAASjQ,GAEVA,EAAM/J,KAAK,aAAc,KAAK,IAG/C+J,EAAMV,IAAMA,EACZU,EAAMS,OAASD,GACR,IO5HP,CAAE,QNda,SAAeR,EAAOoO,GACrC,IAAI3L,EACAlN,EACAsM,EACA0P,EACAhR,EACAwV,EACAzW,EACA0W,EACAxE,EACAC,EACA9P,EACAL,EACArB,EACAqR,EAAO,GACP5Q,EAASV,EAAMV,IACfkB,EAAMR,EAAMS,OAEhB,GAAwC,KAApCT,EAAMX,IAAI/I,WAAW0J,EAAMV,KAA+B,OAAA,EAC9D,GAA4C,KAAxCU,EAAMX,IAAI/I,WAAW0J,EAAMV,IAAM,GAA6B,OAAA,EAMlE,GAJAyW,EAAa/V,EAAMV,IAAM,GACzBiB,EAAWP,EAAMW,GAAGb,QAAQC,eAAeC,EAAOA,EAAMV,IAAM,GAAG,IAGlD,EAAY,OAAA,EAG3B,IADAA,EAAMiB,EAAW,GACPC,GAAqC,KAA9BR,EAAMX,IAAI/I,WAAWgJ,GAAsB,CAQnD,IADPA,IACOA,EAAMkB,IACJjL,EAAAyK,EAAMX,IAAI/I,WAAWgJ,GACvBE,GAAQjK,IAAkB,KAATA,GAFN+J,KAIlB,GAAIA,GAAOkB,EAAc,OAAA,EAkBlB,IAdCP,EAAAX,GACRkS,EAAMxR,EAAMW,GAAGb,QAAQgB,qBAAqBd,EAAMX,IAAKC,EAAKU,EAAMS,SAC1DM,KACCuQ,EAAAtR,EAAMW,GAAG2J,cAAckH,EAAI9S,KAC9BsB,EAAMW,GAAG4J,aAAa+G,GACxBhS,EAAMkS,EAAIlS,IAEHgS,EAAA,IAMHrR,EAAAX,EACDA,EAAMkB,IACJjL,EAAAyK,EAAMX,IAAI/I,WAAWgJ,GACvBE,GAAQjK,IAAkB,KAATA,GAFN+J,KAQlB,GADAkS,EAAMxR,EAAMW,GAAGb,QAAQmB,eAAejB,EAAMX,IAAKC,EAAKU,EAAMS,QACxDnB,EAAMkB,GAAOP,IAAUX,GAAOkS,EAAIzQ,GAM7B,IALP0Q,EAAQD,EAAI9S,IACZY,EAAMkS,EAAIlS,IAIHA,EAAMkB,IACJjL,EAAAyK,EAAMX,IAAI/I,WAAWgJ,GACvBE,GAAQjK,IAAkB,KAATA,GAFN+J,UAKVmS,EAAA,GAGV,GAAInS,GAAOkB,GAAqC,KAA9BR,EAAMX,IAAI/I,WAAWgJ,GAE9B,OADPU,EAAMV,IAAMoB,GACL,EAETpB,QACK,CAIL,QAAoC,IAAzBU,EAAMyB,IAAIiQ,WAAqC,OAAA,EAmB1D,GAjBIpS,EAAMkB,GAAqC,KAA9BR,EAAMX,IAAI/I,WAAWgJ,IACpCW,EAAQX,EAAM,GACdA,EAAMU,EAAMW,GAAGb,QAAQC,eAAeC,EAAOV,KAClC,EACDiS,EAAAvR,EAAMX,IAAIjJ,MAAM6J,EAAOX,KAE/BA,EAAMiB,EAAW,GAGnBjB,EAAMiB,EAAW,EAKdgR,IAAiBA,EAAAvR,EAAMX,IAAIjJ,MAAM2f,EAAYxV,MAE5CyV,EAAAhW,EAAMyB,IAAIiQ,WAAW7R,GAAmB0R,KAGrC,OADPvR,EAAMV,IAAMoB,GACL,EAET4Q,EAAO0E,EAAI1E,KACXG,EAAQuE,EAAIvE,MA6BP,OAtBFrD,IACOvM,EAAA7B,EAAMX,IAAIjJ,MAAM2f,EAAYxV,GAEhCP,EAAAW,GAAGC,OAAOvH,MACdwI,EACA7B,EAAMW,GACNX,EAAMyB,IACNH,EAAS,KAGMK,EAAA3B,EAAM/J,KAAK,QAAS,MAAO,IACtCwM,MAAWA,EAAQ,CAAE,CAAE,MAAO6O,GAAQ,CAAE,MAAO,KACrD3P,EAAMkB,SAAWvB,EACjBK,EAAME,QAAWA,EAEb4P,GACIhP,EAAAxM,KAAK,CAAE,QAASwb,KAI1BzR,EAAMV,IAAMA,EACZU,EAAMS,OAASD,GACR,IM/HP,CAAE,WLba,SAAkBR,EAAOoO,GACxC,IAAI9U,EAAK0Q,EAASrI,EAAO9L,EAAIoK,EAAOO,EAChClB,EAAMU,EAAMV,IAEhB,GAAkC,KAA9BU,EAAMX,IAAI/I,WAAWgJ,GAA+B,OAAA,EAK/C,IAHTW,EAAQD,EAAMV,IACdkB,EAAMR,EAAMS,SAEH,CACP,KAAMnB,GAAOkB,EAAY,OAAA,EAIzB,GAAW,MAFN3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,IAEM,OAAA,EAChC,GAAW,KAAPzJ,EAAqB,MAKvB,OAFJyD,EAAM0G,EAAMX,IAAIjJ,MAAM6J,EAAQ,EAAGX,GAE7BoU,GAAY1d,KAAKsD,IACT0Q,EAAAhK,EAAMW,GAAG2J,cAAchR,KAC5B0G,EAAMW,GAAG4J,aAAaP,KAEtBoE,KACazM,EAAA3B,EAAM/J,KAAK,YAAa,IAAK,IACvCwM,MAAU,CAAE,CAAE,OAAQuH,IAC5BrI,EAAMkH,OAAU,WAChBlH,EAAMS,KAAU,QAEAT,EAAA3B,EAAM/J,KAAK,OAAQ,GAAI,IACjC4L,QAAU7B,EAAMW,GAAG8J,kBAAkBnR,IAE3BqI,EAAA3B,EAAM/J,KAAK,aAAc,KAAK,IACxC4S,OAAU,WAChBlH,EAAMS,KAAU,QAGZpC,EAAAV,KAAOhG,EAAIjD,OAAS,GACnB,MAGLod,GAASzd,KAAKsD,KACN0Q,EAAAhK,EAAMW,GAAG2J,cAAc,UAAYhR,KACxC0G,EAAMW,GAAG4J,aAAaP,KAEtBoE,KACazM,EAAA3B,EAAM/J,KAAK,YAAa,IAAK,IACvCwM,MAAU,CAAE,CAAE,OAAQuH,IAC5BrI,EAAMkH,OAAU,WAChBlH,EAAMS,KAAU,QAEAT,EAAA3B,EAAM/J,KAAK,OAAQ,GAAI,IACjC4L,QAAU7B,EAAMW,GAAG8J,kBAAkBnR,IAE3BqI,EAAA3B,EAAM/J,KAAK,aAAc,KAAK,IACxC4S,OAAU,WAChBlH,EAAMS,KAAU,QAGZpC,EAAAV,KAAOhG,EAAIjD,OAAS,GACnB,MK/CT,CAAE,cJTa,SAAqB2J,EAAOoO,GAC3C,IAAIvY,EAAI+I,EAAO4B,EACXlB,EAAMU,EAAMV,IAEhB,QAAKU,EAAMW,GAAGa,QAAQmQ,OAGtBnR,EAAMR,EAAMS,SACsB,KAA9BT,EAAMX,IAAI/I,WAAWgJ,IACrBA,EAAM,GAAKkB,OAMJ,MADN3K,EAAAmK,EAAMX,IAAI/I,WAAWgJ,EAAM,KAErB,KAAPzJ,GACO,KAAPA,IAxBN,SAAkBA,GAEhB,IAAIqgB,EAAU,GAALrgB,EACD,OAAAqgB,GAAM,IAAiBA,GAAM,IAsBhCC,CAAStgB,SAId+I,EAAQoB,EAAMX,IAAIjJ,MAAMkJ,GAAKpF,MAAM6R,OAG9BqC,IACapO,EAAM/J,KAAK,cAAe,GAAI,GACxC4L,QAAU7B,EAAMX,IAAIjJ,MAAMkJ,EAAKA,EAAMV,EAAM,GAAGvI,SAEhD2J,EAAAV,KAAOV,EAAM,GAAGvI,QACf,QIpBP,CAAE,SHXa,SAAgB2J,EAAOoO,GACtC,IAAQ7Y,EAAMqJ,EAAOU,EAAMU,EAAMV,IAAKkB,EAAMR,EAAMS,OAElD,GAAkC,KAA9BT,EAAMX,IAAI/I,WAAWgJ,GAA+B,OAAA,EAEpD,GAAAA,EAAM,EAAIkB,EAGZ,GAAW,KAFNR,EAAMX,IAAI/I,WAAWgJ,EAAM,IAI9B,GADAV,EAAQoB,EAAMX,IAAIjJ,MAAMkJ,GAAKpF,MAAMyZ,IAO1B,OALFvF,IACH7Y,EAAqC,MAA9BqJ,EAAM,GAAG,GAAG5E,cAAwB1C,SAASsH,EAAM,GAAGxI,MAAM,GAAI,IAAMkB,SAASsH,EAAM,GAAI,IAChGoB,EAAM2U,SAAW1V,GAAkB1J,GAAQ2J,GAAc3J,GAAQ2J,GAAc,QAE3Ec,EAAAV,KAAOV,EAAM,GAAGvI,QACf,OAIT,IADAuI,EAAQoB,EAAMX,IAAIjJ,MAAMkJ,GAAKpF,MAAM0Z,MAE7BpV,GAAI1J,GAAU8J,EAAM,IAGf,OAFFwP,IAAgBpO,EAAA2U,SAAW7f,GAAS8J,EAAM,KACzCoB,EAAAV,KAAOV,EAAM,GAAGvI,QACf,EAQR,OAFF+X,IAAUpO,EAAM2U,SAAW,KAC1B3U,EAAAV,OACC,KGlBL8W,GAAU,CACZ,CAAE,gBFwFa,SAAoBpW,GACnC,IAAIqT,EACAC,EAActT,EAAMsT,YACpB9S,EAAMR,EAAMsT,YAAYjd,OAI5B,IAFAwd,GAAkB7T,EAAOA,EAAMwS,YAE1Ba,EAAO,EAAGA,EAAO7S,EAAK6S,IACrBC,EAAYD,IAASC,EAAYD,GAAMb,YACvBqB,GAAA7T,EAAOsT,EAAYD,GAAMb,cEhG/C,CAAE,gBAAmBqD,GAAwCzC,aAC7D,CAAE,WAAmB0C,GAAmC1C,aACxD,CAAE,gBErBa,SAAuBpT,GAClC,IAAAqT,EAAMtF,EACN5N,EAAQ,EACRmB,EAAStB,EAAMsB,OACfd,EAAMR,EAAMsB,OAAOjL,OAEvB,IAAKgd,EAAOtF,EAAO,EAAGsF,EAAO7S,EAAK6S,IAG5B/R,EAAO+R,GAAM1P,QAAU,GAAGxD,IAC9BmB,EAAO+R,GAAMlT,MAAQA,EACjBmB,EAAO+R,GAAM1P,QAAU,GAAGxD,IAEJ,SAAtBmB,EAAO+R,GAAMxP,MACbwP,EAAO,EAAI7S,GACe,SAA1Bc,EAAO+R,EAAO,GAAGxP,KAGZvC,EAAA+R,EAAO,GAAGxR,QAAUP,EAAO+R,GAAMxR,QAAUP,EAAO+R,EAAO,GAAGxR,SAE/DwR,IAAStF,IAAQzM,EAAOyM,GAAQzM,EAAO+R,IAE3CtF,KAIAsF,IAAStF,IACXzM,EAAOjL,OAAS0X,MFCpB,SAAwBsI,KAClB,IAAAhhB,EASJ,IAFAoC,KAAKyO,MAAQ,IAAI7B,GAEZhP,EAAI,EAAGA,EAAIoU,GAAOpT,OAAQhB,IAC7BoC,KAAKyO,MAAMjQ,KAAKwT,GAAOpU,GAAG,GAAIoU,GAAOpU,GAAG,IAW1C,IAFAoC,KAAK6e,OAAS,IAAIjS,GAEbhP,EAAI,EAAGA,EAAI+gB,GAAQ/f,OAAQhB,IAC9BoC,KAAK6e,OAAOrgB,KAAKmgB,GAAQ/gB,GAAG,GAAI+gB,GAAQ/gB,GAAG,IAQ/CkhB,GAAand,UAAUyH,UAAY,SAAUb,GAC3C,IAAIe,EAAI1L,EAAGiK,EAAMU,EAAMV,IACnB8B,EAAQ3J,KAAKyO,MAAMF,SAAS,IAC5BjC,EAAM3C,EAAM/K,OACZ4b,EAAajS,EAAMW,GAAGa,QAAQyQ,WAC9Bxc,EAAQuK,EAAMvK,MAGd,QAAsB,IAAfA,EAAM6J,GAAb,CAKA,GAAAU,EAAMG,MAAQ8R,EAChB,IAAK5c,EAAI,EAAGA,EAAI0O,IAKR/D,EAAAG,QACDY,EAAAK,EAAM/L,GAAG2K,GAAO,GACfA,EAAAG,SAEFY,GATe1L,UAuBrB2K,EAAMV,IAAMU,EAAMS,OAGfM,GAAYf,EAAAV,MACjB7J,EAAM6J,GAAOU,EAAMV,SAhCjBU,EAAMV,IAAM7J,EAAM6J,IAsCtBiX,GAAand,UAAU6W,SAAW,SAAUjQ,GAOnC,IANP,IAAIe,EAAI1L,EACJ+L,EAAQ3J,KAAKyO,MAAMF,SAAS,IAC5BjC,EAAM3C,EAAM/K,OACZsX,EAAM3N,EAAMS,OACZwR,EAAajS,EAAMW,GAAGa,QAAQyQ,WAE3BjS,EAAMV,IAAMqO,GAAK,CAQlB,GAAA3N,EAAMG,MAAQ8R,EAChB,IAAK5c,EAAI,EAAGA,EAAI0O,KACThD,EAAAK,EAAM/L,GAAG2K,GAAO,IADF3K,KAMvB,GAAI0L,GACE,GAAAf,EAAMV,KAAOqO,EAAO,WAIpB3N,EAAA2U,SAAW3U,EAAMX,IAAIW,EAAMV,OAG/BU,EAAM2U,SACF3U,EAAAgV,eAUVuB,GAAand,UAAUC,MAAQ,SAAUqF,EAAKiC,EAAIc,EAAKyQ,GACrD,IAAI7c,EAAG+L,EAAO2C,EACV/D,EAAQ,IAAIvI,KAAKqT,MAAMpM,EAAKiC,EAAIc,EAAKyQ,GAOzC,IALAza,KAAKwY,SAASjQ,GAGd+D,GADQ3C,EAAA3J,KAAK6e,OAAOtQ,SAAS,KACjB3P,OAEPhB,EAAI,EAAGA,EAAI0O,EAAK1O,IACnB+L,EAAM/L,GAAG2K,IAKbuW,GAAand,UAAU0R,MAAQ0L,GAG/B,IAAAC,GAAiBF,GGxKjB,SAAAzY,GAAgBC,GACd,IAAIC,EAAUC,MAAM7E,UAAUhD,MAAMoG,KAAK0B,UAAW,GAU7C,OARCF,EAAAG,SAAQ,SAAUlB,GACnBA,GAELd,OAAOkC,KAAKpB,GAAQkB,SAAQ,SAAU5B,GACpCwB,EAAIxB,GAAOU,EAAOV,SAIfwB,EAGT,SAAA2Y,GAAgB3Y,GAAc,OAAA5B,OAAO/C,UAAUlD,SAASsG,KAAKuB,GAI7D,SAAA4Y,GAAoB5Y,GAAO,MAAuB,sBAAhB2Y,GAAO3Y,GAGzC,SAAA6B,GAAkBlB,GAAc,OAAAA,EAAI3H,QAAQ,uBAAwB,QAKpE,IAAI6f,GAAiB,CACnBC,WAAW,EACXC,YAAY,EACZC,SAAS,GAWX,IAAIC,GAAiB,CACnB,QAAS,CACPC,SAAU,SAAU3P,EAAMhI,EAAKkF,GACzB,IAAA0S,EAAO5P,EAAKlR,MAAMkJ,GAQtB,OANKkF,EAAK2S,GAAGpe,OAEXyL,EAAK2S,GAAGpe,KAAQ,IAAIiE,OAClB,UAAYwH,EAAK2S,GAAGC,SAAW5S,EAAK2S,GAAGE,qBAAuB7S,EAAK2S,GAAGG,SAAU,MAGhF9S,EAAK2S,GAAGpe,KAAK/C,KAAKkhB,GACbA,EAAKhd,MAAMsK,EAAK2S,GAAGpe,MAAM,GAAG1C,OAE9B,IAGX,SAAW,QACX,OAAW,QACX,KAAW,CACT4gB,SAAU,SAAU3P,EAAMhI,EAAKkF,GACzB,IAAA0S,EAAO5P,EAAKlR,MAAMkJ,GAkBtB,OAhBKkF,EAAK2S,GAAGI,UAEN/S,EAAA2S,GAAGI,QAAW,IAAIva,OACrB,IACAwH,EAAK2S,GAAGC,SAGR,sBAAwB5S,EAAK2S,GAAGK,WAAa,SAAWhT,EAAK2S,GAAGM,gBAAkB,IAClFjT,EAAK2S,GAAGO,SACRlT,EAAK2S,GAAGQ,oBACRnT,EAAK2S,GAAGG,SAER,MAIA9S,EAAK2S,GAAGI,QAAQvhB,KAAKkhB,GAEnB5X,GAAO,GAAuB,MAAlBgI,EAAKhI,EAAM,IACvBA,GAAO,GAAuB,MAAlBgI,EAAKhI,EAAM,GADqB,EAEzC4X,EAAKhd,MAAMsK,EAAK2S,GAAGI,SAAS,GAAGlhB,OAEjC,IAGX,UAAW,CACT4gB,SAAU,SAAU3P,EAAMhI,EAAKkF,GACzB,IAAA0S,EAAO5P,EAAKlR,MAAMkJ,GAOtB,OALKkF,EAAK2S,GAAGS,SACNpT,EAAA2S,GAAGS,OAAU,IAAI5a,OACpB,IAAMwH,EAAK2S,GAAGU,eAAiB,IAAMrT,EAAK2S,GAAGW,gBAAiB,MAG9DtT,EAAK2S,GAAGS,OAAO5hB,KAAKkhB,GACfA,EAAKhd,MAAMsK,EAAK2S,GAAGS,QAAQ,GAAGvhB,OAEhC,KAWT0hB,GAAe,8EAA8Ene,MAAM,KA8BvG,SAAAoe,GAAiBxT,GAGf,ICrJyByT,EACrBC,EDoJAf,EAAK3S,EAAK2S,ICrJWc,EDqJczT,EAAK2T,UCpJxCD,EAAK,IAGNE,QAAU7c,EAAyC0B,OACtDib,EAAGG,OAAU7c,EAAwCyB,OACrDib,EAAGI,MAAU1a,EAAuCX,OACpDib,EAAGK,MAAU7c,EAAuCuB,OAGjDib,EAAAM,SAAW,CAAEN,EAAGI,MAAOJ,EAAGK,MAAOL,EAAGG,QAASld,KAAK,KAGrD+c,EAAGO,QAAU,CAAEP,EAAGI,MAAOJ,EAAGG,QAASld,KAAK,KASvC+c,EAAAQ,kBAA0B,eAAmCR,EAAGM,SAAW,IAAMN,EAAGE,QAAU,IAMjGF,EAAGS,QAED,yFAGCT,EAAAd,SAAc,YAAcc,EAAGO,QAAU,uBAE5CP,EAAGR,SAED,kFAECQ,EAAAP,oBAED,cAAkCO,EAAGM,SAAW,6BAA+BN,EAAGM,SAAW,KAE5FN,EAAAZ,SAED,iBAGcY,EAAGO,QAHjB,2CAIoBP,EAAGO,QAAU,wBACbP,EAAGO,QAAU,wBACbP,EAAGO,QAAU,wBACbP,EAAGO,QAAU,yBACbP,EAAGO,QAAU,qBAChBP,EAAGQ,kBAAoB,sCASvBR,EAAGO,QAAU,cACfR,EAAK,OACZ,6BAEA,SAEF,OAASC,EAAGO,QAAU,UACbP,EAAGO,QAAU,aACVP,EAAGO,QAAU,gBACdP,EAAGO,QAAU,iBAOhCP,EAAGL,eAED,iEAEFK,EAAGU,OAED,wBAKFV,EAAGT,gBAGD,MACES,EAAGU,OACH,IACAV,EAAGQ,kBAAoB,UAG3BR,EAAGV,WAED,MACEU,EAAGU,OACH,OACQV,EAAGQ,kBAAoB,QAEvBR,EAAGQ,kBAAoB,QAAUR,EAAGQ,kBAAoB,UAAYR,EAAGQ,kBAAoB,KAGvGR,EAAGW,SAED,eAIgBX,EAAGV,WAAa,SAAWU,EAAGV,WAAsB,KAGtEU,EAAGY,eAED,MACEZ,EAAGS,QACL,aACgBT,EAAGV,WAAa,qBAG/BU,EAAAa,qBAED,YAAcb,EAAGV,WAAa,oBAE7BU,EAAAJ,gBAEDI,EAAGW,SAAWX,EAAGP,oBAEhBO,EAAAc,sBAEDd,EAAGY,eAAiBZ,EAAGP,oBAEzBO,EAAGb,qBAEDa,EAAGW,SAAWX,EAAGR,SAAWQ,EAAGP,oBAEjCO,EAAGe,2BAEDf,EAAGY,eAAiBZ,EAAGR,SAAWQ,EAAGP,oBAEvCO,EAAGgB,iCAEDhB,EAAGa,qBAAuBb,EAAGR,SAAWQ,EAAGP,oBAO1CO,EAAAiB,oBAED,sDAAwDjB,EAAGM,SAAW,SAErEN,EAAAkB,gBAEC,kBAAsClB,EAAGO,QAAU,KAC7CP,EAAGL,eAAiB,IAAMK,EAAGc,sBAAwB,IAE5Dd,EAAAmB,eAGC,mCAA0CnB,EAAGM,SAAW,qBAC9BN,EAAGe,2BAA6Bf,EAAGZ,SAAW,IAEzEY,EAAAoB,qBAGC,mCAA0CpB,EAAGM,SAAW,qBAC9BN,EAAGgB,iCAAmChB,EAAGZ,SAAW,IAE3EY,GDxBHqB,EAAO/U,EAAKgV,SAASpjB,QAWzB,SAAAqjB,EAAeC,GAAc,OAAAA,EAAI3iB,QAAQ,SAAUogB,EAAGwC,UATjDnV,EAAAoV,YAEApV,EAAKqV,mBACRN,EAAKtjB,KA5Ca,2VA8CpBsjB,EAAKtjB,KAAKkhB,EAAGyB,QAEVkB,EAAAH,SAAWJ,EAAKpe,KAAK,KAIxBgc,EAAG4C,YAAmB/c,OAAOyc,EAAMtC,EAAGiC,iBAAkB,KACxDjC,EAAG6C,WAAmBhd,OAAOyc,EAAMtC,EAAGkC,gBAAiB,KACvDlC,EAAG8C,iBAAmBjd,OAAOyc,EAAMtC,EAAGmC,sBAAuB,KAC7DnC,EAAG+C,gBAAmBld,OAAOyc,EAAMtC,EAAGgC,qBAAsB,KAM5D,IAAIgB,EAAU,GAId,SAAAC,EAAqBrb,EAAMsb,GACzB,MAAM,IAAIlV,MAAM,+BAAiCpG,EAAO,MAAQsb,GAHlE7V,EAAK8V,aAAe,GAMpBne,OAAOkC,KAAKmG,EAAK+V,aAAapc,SAAQ,SAAUY,GAC1C,IAAAsb,EAAM7V,EAAK+V,YAAYxb,GAG3B,GAAY,OAARsb,EAAJ,CAEA,IAAIG,EAAW,CAAEvD,SAAU,KAAMwD,KAAM,MAIvC,GAFAjW,EAAK8V,aAAavb,GAAQyb,EAzKkB,oBAAhB9D,GA2Kf2D,GAiBX,OA3LN,SAAkBtc,GAAO,MAAuB,oBAAhB2Y,GAAO3Y,GA2K7B2c,CAASL,EAAIpD,UAENN,GAAW0D,EAAIpD,UACxBuD,EAASvD,SAAWoD,EAAIpD,SAExBmD,EAAYrb,EAAMsb,GAJTG,EAAAvD,SAnEjB,SAAyBiB,GAChB,OAAA,SAAU5Q,EAAMhI,GACjB,IAAA4X,EAAO5P,EAAKlR,MAAMkJ,GAElB,OAAA4Y,EAAGliB,KAAKkhB,GACHA,EAAKhd,MAAMge,GAAI,GAAG7hB,OAEpB,GA4DiBskB,CAAgBN,EAAIpD,eAOtCN,GAAW0D,EAAIO,WACjBJ,EAASI,UAAYP,EAAIO,UACfP,EAAIO,UAGdR,EAAYrb,EAAMsb,GAFlBG,EAASI,UAjER,SAAUhc,EAAO4F,GACtBA,EAAKoW,UAAUhc,MAxHnB,SAAkBb,GAAO,MAAuB,oBAAhB2Y,GAAO3Y,GAgM/BO,CAAS+b,GAKbD,EAAYrb,EAAMsb,GAJhBF,EAAQlkB,KAAK8I,OAWTob,EAAAhc,SAAQ,SAAU0c,GACnBrW,EAAK8V,aAAa9V,EAAK+V,YAAYM,MAMxCrW,EAAK8V,aAAaO,GAAO5D,SACvBzS,EAAK8V,aAAa9V,EAAK+V,YAAYM,IAAQ5D,SAC7CzS,EAAK8V,aAAaO,GAAOD,UACvBpW,EAAK8V,aAAa9V,EAAK+V,YAAYM,IAAQD,cAM/CpW,EAAK8V,aAAa,IAAM,CAAErD,SAAU,KAAM2D,UArGnC,SAAUhc,EAAO4F,GACtBA,EAAKoW,UAAUhc,KAyGjB,IAAIkc,EAAQ3e,OAAOkC,KAAKmG,EAAK8V,cACRS,QAAO,SAAUhc,GAEhB,OAAOA,EAAK1I,OAAS,GAAKmO,EAAK8V,aAAavb,MAE7C6J,IAAIhJ,IACJzE,KAAK,KAErBqJ,EAAA2S,GAAG6D,YAAgBhe,OAAO,oBAA2Bma,EAAGqB,SAAW,MAAQsC,EAAQ,IAAK,KACxFtW,EAAA2S,GAAG8D,cAAgBje,OAAO,oBAA2Bma,EAAGqB,SAAW,MAAQsC,EAAQ,IAAK,MAE7FtW,EAAK2S,GAAG9M,QAAUrN,OAChB,IAAMwH,EAAK2S,GAAG6D,YAAY/d,OAAS,MAAQuH,EAAK2S,GAAG+C,gBAAgBjd,OAAS,MAC5E,KAxIJ,SAAwBuH,GACtBA,EAAK0W,WAAY,EACjB1W,EAAK2W,eAAmB,GA6ITC,CAAA5W,GAQjB,SAAA6W,GAAe7W,EAAMyK,GACf,IAAAhP,EAAQuE,EAAK0W,UACbvN,EAAQnJ,EAAK8W,eACbhU,EAAQ9C,EAAK2W,eAAe/kB,MAAM6J,EAAO0N,GAOxClW,KAAA+S,OAAYhG,EAAK+W,WAAWvhB,cAMjCvC,KAAKwN,MAAYhF,EAAQgP,EAMzBxX,KAAK8Q,UAAYoF,EAAMsB,EAMvBxX,KAAK+jB,IAAYlU,EAMjB7P,KAAK0L,KAAYmE,EAMjB7P,KAAK6B,IAAYgO,EAGnB,SAAAmU,GAAqBjX,EAAMyK,GACrB,IAAArQ,EAAQ,IAAIyc,GAAM7W,EAAMyK,GAIrB,OAFPzK,EAAK8V,aAAa1b,EAAM4L,QAAQoQ,UAAUhc,EAAO4F,GAE1C5F,EA0CT,SAAA8c,GAAmBC,EAASna,GACtB,qBAAkBoa,IACb,OAAA,IAAIA,GAAUD,EAASna,GAvUlC,IAAsBzD,EA0UfyD,IA1UezD,EA2UD4d,EA1UZxf,OAAOkC,KAAKN,GAAO,IAAI8d,QAAO,SAAUC,EAAKhhB,GAC3C,OAAAghB,GAAOlF,GAAexa,eAAetB,MAC3C,KAyUW0G,EAAAma,EACAA,EAAA,KAITlkB,KAAA0gB,SAAqBra,GAAO,GAAI8Y,GAAgBpV,GAGrD/J,KAAKyjB,WAAqB,EAC1BzjB,KAAK6jB,gBAAqB,EAC1B7jB,KAAK8jB,WAAqB,GAC1B9jB,KAAK0jB,eAAqB,GAErB1jB,KAAA8iB,YAAqBzc,GAAO,GAAIkZ,GAAgB2E,GACrDlkB,KAAK6iB,aAAqB,GAE1B7iB,KAAK+hB,SAAqBzB,GAC1BtgB,KAAKoiB,mBAAqB,EAE1BpiB,KAAK0f,GAAK,GAEFa,GAAAvgB,MAWVmkB,GAAUxiB,UAAU2iB,IAAM,SAAavR,EAAQwR,GAGtC,OAFPvkB,KAAK8iB,YAAY/P,GAAUwR,EACnBhE,GAAAvgB,MACDA,MAUTmkB,GAAUxiB,UAAU6iB,IAAM,SAAaza,GAE9B,OADF/J,KAAA0gB,SAAWra,GAAOrG,KAAK0gB,SAAU3W,GAC/B/J,MASTmkB,GAAUxiB,UAAUpD,KAAO,SAAcsR,GAKnC,GAHJ7P,KAAK0jB,eAAiB7T,EACtB7P,KAAKyjB,WAAiB,GAEjB5T,EAAKjR,OAAiB,OAAA,EAE3B,IAAI6lB,EAAGC,EAAIC,EAAIrY,EAAKkL,EAAOoN,EAAMnE,EAAIoE,EAGrC,GAAI7kB,KAAK0f,GAAG6D,YAAYhlB,KAAKsR,GAG3B,KAFA4Q,EAAKzgB,KAAK0f,GAAG8D,eACV1S,UAAY,EACgB,QAAnB2T,EAAAhE,EAAGpe,KAAKwN,KAElB,GADAvD,EAAMtM,KAAK8kB,aAAajV,EAAM4U,EAAE,GAAIhE,EAAG3P,WAC9B,CACP9Q,KAAK8jB,WAAiBW,EAAE,GACxBzkB,KAAKyjB,UAAiBgB,EAAEjX,MAAQiX,EAAE,GAAG7lB,OACrCoB,KAAK6jB,eAAiBY,EAAEjX,MAAQiX,EAAE,GAAG7lB,OAAS0N,EAC9C,MA8CN,OAzCItM,KAAK0gB,SAAStB,WAAapf,KAAK6iB,aAAa,WAErCgC,EAAAhV,EAAKtP,OAAOP,KAAK0f,GAAG+C,mBACf,IAETziB,KAAKyjB,UAAY,GAAKoB,EAAU7kB,KAAKyjB,YAC0D,QAAvFiB,EAAA7U,EAAKpN,MAAMzC,KAAK0gB,SAASpB,QAAUtf,KAAK0f,GAAG6C,WAAaviB,KAAK0f,GAAG8C,qBAEhEhL,EAAAkN,EAAGlX,MAAQkX,EAAG,GAAG9lB,QAErBoB,KAAKyjB,UAAY,GAAKjM,EAAQxX,KAAKyjB,aACrCzjB,KAAK8jB,WAAiB,GACtB9jB,KAAKyjB,UAAiBjM,EACtBxX,KAAK6jB,eAAiBa,EAAGlX,MAAQkX,EAAG,GAAG9lB,SAO7CoB,KAAK0gB,SAASrB,YAAcrf,KAAK6iB,aAAa,YAEvChT,EAAKjN,QAAQ,MACR,GAGmC,UAArCiN,EAAKpN,MAAMzC,KAAK0f,GAAG4C,gBAEnB9K,EAAAmN,EAAGnX,MAAQmX,EAAG,GAAG/lB,OACjBgmB,EAAAD,EAAGnX,MAAQmX,EAAG,GAAG/lB,QAErBoB,KAAKyjB,UAAY,GAAKjM,EAAQxX,KAAKyjB,WAClCjM,IAAUxX,KAAKyjB,WAAamB,EAAO5kB,KAAK6jB,kBAC3C7jB,KAAK8jB,WAAiB,UACtB9jB,KAAKyjB,UAAiBjM,EACtBxX,KAAK6jB,eAAiBe,IAMvB5kB,KAAKyjB,WAAa,GAW3BU,GAAUxiB,UAAUiR,QAAU,SAAiB/C,GACtC,OAAA7P,KAAK0f,GAAG9M,QAAQrU,KAAKsR,IAa9BsU,GAAUxiB,UAAUmjB,aAAe,SAAsBjV,EAAMkD,EAAQlL,GAErE,OAAK7H,KAAK6iB,aAAa9P,EAAOxQ,eAGvBvC,KAAK6iB,aAAa9P,EAAOxQ,eAAeid,SAAS3P,EAAMhI,EAAK7H,MAF1D,GAsBXmkB,GAAUxiB,UAAUc,MAAQ,SAAeoN,GACrC,IAAA2H,EAAQ,EAAGvZ,EAAS,GAGpB+B,KAAKyjB,WAAa,GAAKzjB,KAAK0jB,iBAAmB7T,IAC1C5R,EAAAO,KAAKwlB,GAAYhkB,KAAMwX,IAC9BA,EAAQxX,KAAK6jB,gBAOR,IAHP,IAAIpE,EAAOjI,EAAQ3H,EAAKlR,MAAM6Y,GAAS3H,EAGhC7P,KAAKzB,KAAKkhB,IACRxhB,EAAAO,KAAKwlB,GAAYhkB,KAAMwX,IAEvBiI,EAAAA,EAAK9gB,MAAMqB,KAAK6jB,gBACvBrM,GAASxX,KAAK6jB,eAGhB,OAAI5lB,EAAOW,OACFX,EAGF,MAmBTkmB,GAAUxiB,UAAUojB,KAAO,SAAc7W,EAAM8W,GAG7C,OAFA9W,EAAO1H,MAAM4H,QAAQF,GAAQA,EAAO,CAAEA,GAEjC8W,GAOAhlB,KAAA+hB,SAAW/hB,KAAK+hB,SAASlhB,OAAOqN,GACJ+W,OACA3B,QAAO,SAAU4B,EAAIpb,EAAKU,GAClB,OAAA0a,IAAO1a,EAAIV,EAAM,MAEzBqb,UAEzB5E,GAAAvgB,MACDA,OAdLA,KAAK+hB,SAAW7T,EAAKvP,QACrBqB,KAAKoiB,mBAAoB,EACjB7B,GAAAvgB,MACDA,OAmBXmkB,GAAUxiB,UAAUwhB,UAAY,SAAmBhc,GAK5CA,EAAM4L,SAAgB5L,EAAAtF,IAAM,UAAYsF,EAAMtF,KAE9B,YAAjBsF,EAAM4L,QAAyB,YAAYxU,KAAK4I,EAAMtF,OAClDsF,EAAAtF,IAAM,UAAYsF,EAAMtF,MAUlCsiB,GAAUxiB,UAAUwgB,UAAY,aAIhC,IAAAiD,GAAiBjB,GExnBjB,MAAMkB,GAAS,WAaTC,GAAgB,QAChBC,GAAgB,aAChBC,GAAkB,4BAGlBC,GAAS,CACdC,SAAY,kDACZ,YAAa,iDACb,gBAAiB,iBAKZC,GAAQnM,KAAKmM,MACbC,GAAqBvnB,OAAOC,aAUlC,SAAAunB,GAAezZ,GACR,MAAA,IAAI0Z,WAAWL,GAAOrZ,IA8B7B,SAAA2Z,GAAmBtoB,EAAQ6P,GACpB,MAAA0Y,EAAQvoB,EAAO0E,MAAM,KAC3B,IAAIlE,EAAS,GACT+nB,EAAMpnB,OAAS,IAGlBX,EAAS+nB,EAAM,GAAK,IACpBvoB,EAASuoB,EAAM,IAIV,MACAC,EA/BP,SAAaC,EAAO5Y,GACnB,MAAMrP,EAAS,GACf,IAAIW,EAASsnB,EAAMtnB,OACnB,KAAOA,KACCX,EAAAW,GAAU0O,EAAG4Y,EAAMtnB,IAEpB,OAAAX,EAyBSkT,EAFP1T,EAAAA,EAAO6B,QAAQkmB,GAAiB,MACnBrjB,MAAM,KACAmL,GAAI5J,KAAK,KACrC,OAAOzF,EAASgoB,EAgBjB,SAAAE,GAAoB1oB,GACnB,MAAM2oB,EAAS,GACf,IAAIC,EAAU,EACd,MAAMznB,EAASnB,EAAOmB,OACtB,KAAOynB,EAAUznB,GAAQ,CAClB,MAAA8S,EAAQjU,EAAOoB,WAAWwnB,KAChC,GAAI3U,GAAS,OAAUA,GAAS,OAAU2U,EAAUznB,EAAQ,CAErD,MAAA0nB,EAAQ7oB,EAAOoB,WAAWwnB,KACR,QAAX,MAARC,GACJF,EAAO5nB,OAAe,KAARkT,IAAkB,KAAe,QAAS,QAIxD0U,EAAO5nB,KAAKkT,GACZ2U,UAGDD,EAAO5nB,KAAKkT,GAGP,OAAA0U,EAWR,MAAMG,GAAaL,GAAS7nB,OAAOoJ,iBAAiBye,GAmC9CM,GAAe,SAASC,EAAOC,GAGpC,OAAOD,EAAQ,GAAK,IAAcA,EAAA,MAAgB,OAAM,IAQnDE,GAAQ,SAASC,EAAOC,EAAWC,GACxC,IAAIzjB,EAAI,EAGR,IAFAujB,EAAQE,EAAYnB,GAAMiB,EA1Kd,KA0K8BA,GAAS,EACnDA,GAASjB,GAAMiB,EAAQC,GACOD,EAAQG,IAA2B1jB,GAhLrD,GAiLXujB,EAAQjB,GAAMiB,EA3JMI,IA6JrB,OAAOrB,GAAMtiB,EAAK,GAAqBujB,GAAiBA,EAhL5C,MA0LPxnB,GAAS,SAAS6nB,GAEvB,MAAMb,EAAS,GACTc,EAAcD,EAAMroB,OAC1B,IAAIhB,EAAI,EACJupB,EA5LY,IA6LZC,EA9Le,GAoMfC,EAAQJ,EAAMpkB,YAlMD,KAmMbwkB,EAAQ,IACHA,EAAA,GAGT,IAAA,IAASjkB,EAAI,EAAGA,EAAIikB,IAASjkB,EAExB6jB,EAAMpoB,WAAWuE,IAAM,KACpByiB,GAAA,aAEAO,EAAA5nB,KAAKyoB,EAAMpoB,WAAWuE,IAM9B,IAAA,IAASoK,EAAQ6Z,EAAQ,EAAIA,EAAQ,EAAI,EAAG7Z,EAAQ0Z,GAAwC,CAO3F,IAAII,EAAO1pB,EACX,IAAA,IAAS2pB,EAAI,EAAGlkB,EAjOL,IAiOmCA,GAjOnC,GAiO8C,CAEpDmK,GAAS0Z,GACNrB,GAAA,iBAGD,MAAAY,GA9FqBe,EA8FAP,EAAMpoB,WAAW2O,MA7F9B,GAAO,GACfga,EAAY,GAEhBA,EAAY,GAAO,GACfA,EAAY,GAEhBA,EAAY,GAAO,GACfA,EAAY,GAjJR,IAyONf,GAzOM,IAyOWA,EAAQd,IAAON,GAASznB,GAAK2pB,KAC3C1B,GAAA,YAGPjoB,GAAK6oB,EAAQc,EACP,MAAAzX,EAAIzM,GAAK+jB,EA7OL,EA6OoB/jB,GAAK+jB,EA5OzB,GAAA,GA4O8C/jB,EAAI+jB,EAE5D,GAAIX,EAAQ3W,EACX,MAGD,MAAM2X,EApPI,GAoPgB3X,EACtByX,EAAI5B,GAAMN,GAASoC,IAChB5B,GAAA,YAGF0B,GAAAE,EAIA,MAAAC,EAAMtB,EAAOxnB,OAAS,EAC5BwoB,EAAOT,GAAM/oB,EAAI0pB,EAAMI,EAAa,GAARJ,GAIxB3B,GAAM/nB,EAAI8pB,GAAOrC,GAAS8B,GACvBtB,GAAA,YAGPsB,GAAKxB,GAAM/nB,EAAI8pB,GACV9pB,GAAA8pB,EAGEtB,EAAAtY,OAAOlQ,IAAK,EAAGupB,GAjIH,IAASK,EAqItB,OAAAnpB,OAAOoJ,iBAAiB2e,IAU1BloB,GAAS,SAAS+oB,GACvB,MAAMb,EAAS,GAMf,IAAIc,GAHJD,EAAQd,GAAWc,IAGKroB,OAGpBuoB,EA5RY,IA6RZP,EAAQ,EACRQ,EA/Re,GAkSnB,IAAA,MAAWO,KAAgBV,EACtBU,EAAe,KAClBvB,EAAO5nB,KAAKonB,GAAmB+B,IAIjC,IAAIC,EAAcxB,EAAOxnB,OACrBipB,EAAiBD,EAWrB,IALIA,GACHxB,EAAO5nB,KA9SS,KAkTVqpB,EAAiBX,GAAa,CAIpC,IAAIzC,EAAIY,GACR,IAAA,MAAWsC,KAAgBV,EACtBU,GAAgBR,GAAKQ,EAAelD,IACnCA,EAAAkD,GAMN,MAAMG,EAAwBD,EAAiB,EAC3CpD,EAAI0C,EAAIxB,IAAON,GAASuB,GAASkB,IAC9BjC,GAAA,YAGPe,MAAcO,GAAKW,EACfX,EAAA1C,EAEJ,IAAA,MAAWkD,KAAgBV,EAI1B,GAHIU,EAAeR,KAAOP,EAAQvB,IAC3BQ,GAAA,YAEH8B,GAAgBR,EAAG,CAEtB,IAAIY,EAAInB,EACC,IAAA,IAAAvjB,EArVA,IAqV8BA,GArV9B,GAqVyC,CAC3C,MAAAyM,EAAIzM,GAAK+jB,EArVP,EAqVsB/jB,GAAK+jB,EApV3B,GAAA,GAoVgD/jB,EAAI+jB,EAC5D,GAAIW,EAAIjY,EACP,MAED,MAAMkY,EAAUD,EAAIjY,EACd2X,EA3VE,GA2VkB3X,EAC1BsW,EAAO5nB,KACNonB,GAAmBY,GAAa1W,EAAIkY,EAAUP,EAAY,KAE3DM,EAAIpC,GAAMqC,EAAUP,GAGdrB,EAAA5nB,KAAKonB,GAAmBY,GAAauB,EAAG,KACxCX,EAAAT,GAAMC,EAAOkB,EAAuBD,GAAkBD,GACrDhB,EAAA,IACNiB,IAIFjB,IACAO,EAGH,OAAOf,EAAO1iB,KAAK,KAcdukB,GAAY,SAAShB,GACnB,OAAAlB,GAAUkB,GAAO,SAASxpB,GAChC,OAAO6nB,GAAc/mB,KAAKd,GACvB2B,GAAO3B,EAAOkB,MAAM,GAAG4D,eACvB9E,MAeCyqB,GAAU,SAASjB,GACjB,OAAAlB,GAAUkB,GAAO,SAASxpB,GAChC,OAAO8nB,GAAchnB,KAAKd,GACvB,OAASS,GAAOT,GAChBA,MAOC0qB,GAAW,CAMhBC,QAAW,QAQXC,KAAQ,CACPjpB,OAAU+mB,GACVjoB,OAAUqoB,IAEXnnB,OAAUA,GACVlB,OAAUA,GACVgqB,QAAWA,GACXD,UAAaA,yLC/aVK,GAAexkB,EACfuE,GAAetE,EACf8H,GAAe1F,EACfoiB,GAAetkB,GACfqW,GAAe9V,GACfsa,GAAeV,GACf+F,GAAe9F,GACfxa,GAAeyP,EACf6U,SAGAK,GAAS,CACXC,QCZe,CACf1e,QAAS,CACPmQ,MAAc,EACd3O,UAAc,EACdE,QAAc,EACdR,WAAc,YACd0H,SAAc,EAGdO,aAAc,EAOdlC,OAAQ,OAQRlG,UAAW,KAEX0P,WAAc,KAGhBkO,WAAY,CAEVC,KAAM,GACN1c,MAAO,GACP9C,OAAQ,KDpBVyf,KEZe,CACf7e,QAAS,CACPmQ,MAAc,EACd3O,UAAc,EACdE,QAAc,EACdR,WAAc,YACd0H,SAAc,EAGdO,aAAc,EAOdlC,OAAQ,OAQRlG,UAAW,KAEX0P,WAAc,IAGhBkO,WAAY,CAEVC,KAAM,CACJhf,MAAO,CACL,YACA,QACA,WAIJsC,MAAO,CACLtC,MAAO,CACL,cAIJR,OAAQ,CACNQ,MAAO,CACL,QAEFkf,OAAQ,CACN,gBACA,oBFtCNC,WGde,CACf/e,QAAS,CACPmQ,MAAc,EACd3O,UAAc,EACdE,QAAc,EACdR,WAAc,YACd0H,SAAc,EAGdO,aAAc,EAOdlC,OAAQ,OAQRlG,UAAW,KAEX0P,WAAc,IAGhBkO,WAAY,CAEVC,KAAM,CACJhf,MAAO,CACL,YACA,QACA,WAIJsC,MAAO,CACLtC,MAAO,CACL,aACA,OACA,QACA,UACA,KACA,aACA,WACA,OACA,YACA,cAIJR,OAAQ,CACNQ,MAAO,CACL,WACA,YACA,WACA,SACA,SACA,cACA,QACA,OACA,UACA,QAEFkf,OAAQ,CACN,gBACA,WACA,qBH5CJE,GAAe,oCACfC,GAAe,oCAEnB,SAAAlW,GAAsBjR,GAEhB,IAAAoF,EAAMpF,EAAIK,OAAOK,cAErB,OAAOwmB,GAAaxqB,KAAK0I,MAAQ+hB,GAAazqB,KAAK0I,GAMrD,IAAIgiB,GAAsB,CAAE,QAAS,SAAU,WAE/C,SAAApW,GAAuBhR,GACjB,IAAAqnB,EAASrlB,GAAMjC,MAAMC,GAAK,GAE9B,GAAIqnB,EAAO7oB,YAOJ6oB,EAAOjpB,UAAYgpB,GAAoBrmB,QAAQsmB,EAAOjpB,WAAa,GAClE,IACKipB,EAAA7oB,SAAW8nB,GAASD,QAAQgB,EAAO7oB,UAAA,MACnC8oB,IAIN,OAAAtlB,GAAM3F,OAAO2F,GAAMG,OAAOklB,IAGnC,SAAAlW,GAA2BnR,GACrB,IAAAqnB,EAASrlB,GAAMjC,MAAMC,GAAK,GAE9B,GAAIqnB,EAAO7oB,YAOJ6oB,EAAOjpB,UAAYgpB,GAAoBrmB,QAAQsmB,EAAOjpB,WAAa,GAClE,IACKipB,EAAA7oB,SAAW8nB,GAASF,UAAUiB,EAAO7oB,UAAA,MACrC8oB,IAKb,OAAOtlB,GAAMzE,OAAOyE,GAAMG,OAAOklB,GAASrlB,GAAMzE,OAAOjB,aAAe,KAyIxE,SAAAirB,GAAoBC,EAAYtf,GAC1B,qBAAkBqf,IACb,OAAA,IAAIA,GAAWC,EAAYtf,GAG/BA,GACEue,GAAMzhB,SAASwiB,KAClBtf,EAAUsf,GAAc,GACXA,EAAA,WAWjBrpB,KAAKmJ,OAAS,IAAI2V,GASlB9e,KAAKiM,MAAQ,IAAIqO,GASjBta,KAAK2oB,KAAO,IAAIJ,GAuBhBvoB,KAAKwM,SAAW,IAAIX,GASpB7L,KAAK2S,QAAU,IAAIwR,GAiBnBnkB,KAAK8S,aAAeA,GAQpB9S,KAAK6S,cAAgBA,GAOrB7S,KAAKgT,kBAAoBA,GAWzBhT,KAAKsoB,MAAQA,GAQRtoB,KAAAqI,QAAUigB,GAAMjiB,OAAO,GAAIgC,IAGhCrI,KAAK+J,QAAU,GACf/J,KAAKspB,UAAUD,GAEXtf,GAAW/J,KAAKwkB,IAAIza,GAuB1Bqf,GAAWznB,UAAU6iB,IAAM,SAAUza,GAE5B,OADDue,GAAAjiB,OAAOrG,KAAK+J,QAASA,GACpB/J,MAcTopB,GAAWznB,UAAU2nB,UAAY,SAAUC,GACzC,IAAiBF,EAAbtc,EAAO/M,KAEP,GAAAsoB,GAAMzhB,SAAS0iB,MAEjBA,EAAUf,GADGa,EAAAE,IAES,MAAA,IAAI7b,MAAM,+BAAiC2b,EAAa,iBAGhF,IAAKE,EAAW,MAAM,IAAI7b,MAAM,8CAczB,OAZH6b,EAAQxf,SAAWgD,EAAKyX,IAAI+E,EAAQxf,SAEpCwf,EAAQb,YACVhkB,OAAOkC,KAAK2iB,EAAQb,YAAYhiB,SAAQ,SAAUY,GAC5CiiB,EAAQb,WAAWphB,GAAMqC,OAC3BoD,EAAKzF,GAAMmH,MAAMJ,WAAWkb,EAAQb,WAAWphB,GAAMqC,OAEnD4f,EAAQb,WAAWphB,GAAMuhB,QAC3B9b,EAAKzF,GAAMuX,OAAOxQ,WAAWkb,EAAQb,WAAWphB,GAAMuhB,WAIrD7oB,MAqBTopB,GAAWznB,UAAUsM,OAAS,SAAUC,EAAMC,GAC5C,IAAIlQ,EAAS,GAERuI,MAAM4H,QAAQF,KAASA,EAAO,CAAEA,IAErC,CAAE,OAAQ,QAAS,UAAWxH,SAAQ,SAAU2G,GAC9CpP,EAASA,EAAO4C,OAAOb,KAAKqN,GAAOoB,MAAMR,OAAOC,GAAM,MACrDlO,MAEH/B,EAASA,EAAO4C,OAAOb,KAAKmJ,OAAO0V,OAAO5Q,OAAOC,GAAM,IAEvD,IAAIsb,EAAStb,EAAKoV,QAAO,SAAUhc,GAAe,OAAArJ,EAAO2E,QAAQ0E,GAAQ,KAErE,GAAAkiB,EAAO5qB,SAAWuP,EACd,MAAA,IAAIT,MAAM,iDAAmD8b,GAG9D,OAAAxpB,MAWTopB,GAAWznB,UAAU2M,QAAU,SAAUJ,EAAMC,GAC7C,IAAIlQ,EAAS,GAERuI,MAAM4H,QAAQF,KAASA,EAAO,CAAEA,IAErC,CAAE,OAAQ,QAAS,UAAWxH,SAAQ,SAAU2G,GAC9CpP,EAASA,EAAO4C,OAAOb,KAAKqN,GAAOoB,MAAMH,QAAQJ,GAAM,MACtDlO,MAEH/B,EAASA,EAAO4C,OAAOb,KAAKmJ,OAAO0V,OAAOvQ,QAAQJ,GAAM,IAExD,IAAIsb,EAAStb,EAAKoV,QAAO,SAAUhc,GAAe,OAAArJ,EAAO2E,QAAQ0E,GAAQ,KAErE,GAAAkiB,EAAO5qB,SAAWuP,EACd,MAAA,IAAIT,MAAM,kDAAoD8b,GAE/D,OAAAxpB,MAoBTopB,GAAWznB,UAAU8nB,IAAM,SAAUC,GAC/B,IAAAC,EAAO,CAAE3pB,MAAOa,OAAO2F,MAAM7E,UAAUhD,MAAMoG,KAAK0B,UAAW,IAE1D,OADPijB,EAAOE,MAAMF,EAAQC,GACd3pB,MAmBTopB,GAAWznB,UAAUC,MAAQ,SAAUgG,EAAKoC,GACtC,GAAe,iBAARpC,EACT,MAAM,IAAI8F,MAAM,iCAGlB,IAAInF,EAAQ,IAAIvI,KAAK2oB,KAAKtV,MAAMzL,EAAK5H,KAAMgK,GAI3C,OAFAhK,KAAK2oB,KAAKvV,QAAQ7K,GAEXA,EAAMsB,QAefuf,GAAWznB,UAAU4K,OAAS,SAAU3E,EAAKoC,GAGpC,OAFPA,EAAMA,GAAO,GAENhK,KAAKwM,SAASD,OAAOvM,KAAK4B,MAAMgG,EAAKoC,GAAMhK,KAAK+J,QAASC,IAalEof,GAAWznB,UAAUkoB,YAAc,SAAUjiB,EAAKoC,GAChD,IAAIzB,EAAQ,IAAIvI,KAAK2oB,KAAKtV,MAAMzL,EAAK5H,KAAMgK,GAK3C,OAHAzB,EAAMuJ,YAAa,EACnB9R,KAAK2oB,KAAKvV,QAAQ7K,GAEXA,EAAMsB,QAYfuf,GAAWznB,UAAU0K,aAAe,SAAUzE,EAAKoC,GAG1C,OAFPA,EAAMA,GAAO,GAENhK,KAAKwM,SAASD,OAAOvM,KAAK6pB,YAAYjiB,EAAKoC,GAAMhK,KAAK+J,QAASC,IAIxE,IIlkBA8f,GJkkBiBV"}