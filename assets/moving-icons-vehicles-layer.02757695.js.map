{"version":3,"file":"moving-icons-vehicles-layer.02757695.js","sources":["../../src/layers/moving-icons/moving-icons-vehicles-layer.ts"],"sourcesContent":["// BC 2021-04-30: this file forked from https://github.com/visgl/deck.gl\r\n//\r\n// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n\r\nimport { Layer, project32, picking, log } from '@deck.gl/core'\r\nimport GL from '@luma.gl/constants'\r\nimport { Model, Geometry } from '@luma.gl/core'\r\n\r\nimport vertShader from './icon-layer.glsl.vert?raw'\r\nimport fragShader from './icon-layer.glsl.frag?raw'\r\n\r\nimport IconManager from './icon-manager'\r\n\r\nconst DEFAULT_COLOR = [0, 0, 0, 255]\r\n\r\nconst defaultProps = {\r\n  iconAtlas: { type: 'image', value: null, async: true },\r\n  iconMapping: { type: 'object', value: {}, async: true },\r\n  sizeScale: { type: 'number', value: 1, min: 0 },\r\n  billboard: false,\r\n  sizeUnits: 'pixels',\r\n  sizeMinPixels: { type: 'number', min: 0, value: 0 }, //  min point radius in pixels\r\n  sizeMaxPixels: { type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER }, // max point radius in pixels\r\n  alphaCutoff: { type: 'number', value: 0.05, min: 0, max: 1 },\r\n  iconStill: { type: 'object', value: null },\r\n\r\n  getIcon: { type: 'accessor', value: 'vehicle' }, // (x: any) => x.icon },\r\n  getBOffsets: { type: 'accessor', value: [0, 0] }, // (x: any) => x.icon },\r\n  getBIconFrames: { type: 'accessor', value: [128, 128, 128, 128] }, // (x: any) => x.icon },\r\n  getBColorModes: { type: 'accessor', value: 1 }, // (x: any) => x.icon },\r\n\r\n  getColor: { type: 'accessor', value: DEFAULT_COLOR },\r\n  getSize: { type: 'accessor', value: 1 },\r\n  getAngle: { type: 'accessor', value: 0 },\r\n  getPixelOffset: { type: 'accessor', value: [0, 0] },\r\n\r\n  getPathStart: { type: 'accessor', value: null },\r\n  getPathEnd: { type: 'accessor', value: null },\r\n  getTimeStart: { type: 'accessor', value: null },\r\n  getTimeEnd: { type: 'accessor', value: null },\r\n  currentTime: { type: 'number', value: 0 },\r\n\r\n  pickable: { type: 'boolean', value: true },\r\n  onIconError: { type: 'function', value: null, compare: false, optional: true },\r\n}\r\n\r\nexport default class IconLayer extends Layer {\r\n  getShaders() {\r\n    return super.getShaders({ vs: vertShader, fs: fragShader, modules: [project32, picking] })\r\n  }\r\n\r\n  initializeState() {\r\n    this.state = {\r\n      iconManager: new IconManager(this.context.gl, {\r\n        onUpdate: this._onUpdate.bind(this),\r\n        onError: this._onError.bind(this) as any,\r\n      }),\r\n    }\r\n\r\n    const attributeManager = this.getAttributeManager()\r\n\r\n    /* eslint-disable max-len */\r\n    attributeManager.addInstanced({\r\n      instanceTimestamps: {\r\n        size: 1,\r\n        accessor: 'getTimeStart',\r\n      },\r\n      instanceTimestampsNext: {\r\n        size: 1,\r\n        accessor: 'getTimeEnd',\r\n      },\r\n      instanceStartPositions: {\r\n        size: 2,\r\n        accessor: 'getPathStart',\r\n      },\r\n      instanceEndPositions: {\r\n        size: 2,\r\n        accessor: 'getPathEnd',\r\n      },\r\n      instanceSizes: {\r\n        size: 1,\r\n        transition: true,\r\n        accessor: 'getSize',\r\n        defaultValue: 1,\r\n      },\r\n      instanceOffsets: {\r\n        size: 2,\r\n        defaultValue: [0, 0],\r\n        accessor: 'getBOffsets',\r\n        // transform: this.getInstanceOffset\r\n      },\r\n      instanceIconFrames: {\r\n        size: 4,\r\n        defaultValue: [0, 0, 128, 128],\r\n        accessor: 'getBIconFrames',\r\n        // transform: this.getInstanceIconFrame\r\n      },\r\n      instanceColorModes: {\r\n        size: 1,\r\n        type: GL.UNSIGNED_BYTE,\r\n        defaultValue: 1,\r\n        accessor: 'getBColorModes',\r\n        // accessor: 'getIcon',\r\n        // transform: this.getInstanceColorMode,\r\n      },\r\n\r\n      // instanceOffsets: { size: 2, accessor: 'getIcon', transform: this.getInstanceOffset },\r\n      // instanceIconFrames: { size: 4, accessor: 'getIcon', transform: this.getInstanceIconFrame },\r\n      // instanceColorModes: {\r\n      //   size: 1,\r\n      //   type: GL.UNSIGNED_BYTE,\r\n      //   accessor: 'getIcon',\r\n      //   transform: this.getInstanceColorMode,\r\n      // },\r\n      instanceColors: {\r\n        size: this.props.colorFormat.length,\r\n        type: GL.UNSIGNED_BYTE,\r\n        normalized: true,\r\n        transition: true,\r\n        accessor: 'getColor',\r\n        defaultValue: DEFAULT_COLOR,\r\n      },\r\n      instanceAngles: {\r\n        size: 1,\r\n        transition: true,\r\n        accessor: 'getAngle',\r\n      },\r\n      instancePixelOffset: {\r\n        size: 2,\r\n        transition: true,\r\n        accessor: 'getPixelOffset',\r\n      },\r\n    })\r\n    /* eslint-enable max-len */\r\n  }\r\n\r\n  /* eslint-disable max-statements, complexity */\r\n  updateState({ oldProps, props, changeFlags }: any) {\r\n    super.updateState({ props, oldProps, changeFlags })\r\n\r\n    const attributeManager = this.getAttributeManager()\r\n    const { iconAtlas, iconMapping, data, getIcon } = props\r\n    const { iconManager } = this.state\r\n\r\n    iconManager.setProps({ loadOptions: props.loadOptions })\r\n\r\n    let iconMappingChanged = false\r\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas')\r\n\r\n    // prepacked iconAtlas from user\r\n    if (prePacked) {\r\n      if (oldProps.iconAtlas !== props.iconAtlas) {\r\n        iconManager.setProps({ iconAtlas, autoPacking: false })\r\n      }\r\n\r\n      if (oldProps.iconMapping !== props.iconMapping) {\r\n        iconManager.setProps({ iconMapping })\r\n        iconMappingChanged = true\r\n      }\r\n    } else {\r\n      // otherwise, use autoPacking\r\n      iconManager.setProps({ autoPacking: true })\r\n    }\r\n\r\n    // handle data changed\r\n    if (\r\n      changeFlags.dataChanged ||\r\n      (changeFlags.updateTriggersChanged &&\r\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\r\n    ) {\r\n      iconManager.setProps({ data, getIcon })\r\n    }\r\n\r\n    if (iconMappingChanged) {\r\n      attributeManager.invalidate('instanceOffsets')\r\n      attributeManager.invalidate('instanceIconFrames')\r\n      attributeManager.invalidate('instanceColorModes')\r\n    }\r\n\r\n    if (changeFlags.extensionsChanged) {\r\n      const { gl } = this.context\r\n      this.state.model?.delete()\r\n      this.state.model = this._getModel(gl)\r\n      attributeManager.invalidateAll()\r\n    }\r\n  }\r\n  /* eslint-enable max-statements, complexity */\r\n\r\n  get isLoaded() {\r\n    return super.isLoaded && this.state.iconManager.isLoaded\r\n  }\r\n\r\n  finalizeState() {\r\n    super.finalizeState()\r\n    // Release resources held by the icon manager\r\n    this.state.iconManager.finalize()\r\n  }\r\n\r\n  draw({ uniforms }: any) {\r\n    const {\r\n      sizeScale,\r\n      sizeMinPixels,\r\n      sizeMaxPixels,\r\n      sizeUnits,\r\n      billboard,\r\n      alphaCutoff,\r\n      currentTime,\r\n      iconStill,\r\n      pickable,\r\n    } = this.props\r\n\r\n    const { iconManager } = this.state\r\n    const { viewport } = this.context\r\n\r\n    const iconsTexture = iconManager.getTexture()\r\n    if (iconsTexture) {\r\n      this.state.model\r\n        .setUniforms(uniforms)\r\n        .setUniforms({\r\n          iconsTexture,\r\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\r\n          sizeScale: sizeScale * (sizeUnits === 'pixels' ? viewport.metersPerPixel : 1),\r\n          sizeMinPixels,\r\n          sizeMaxPixels,\r\n          billboard,\r\n          alphaCutoff,\r\n          currentTime,\r\n          pickable,\r\n          iconStillOffsets: this.getInstanceOffset(iconStill),\r\n          iconStillFrames: this.getInstanceIconFrame(iconStill),\r\n        })\r\n        .draw()\r\n    }\r\n  }\r\n\r\n  _getModel(gl: any) {\r\n    // The icon-layer vertex shader uses 2d positions\r\n    // specifed via: attribute vec2 positions;\r\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1]\r\n\r\n    return new Model(gl, {\r\n      ...this.getShaders(),\r\n      id: this.props.id,\r\n      geometry: new Geometry({\r\n        drawMode: GL.TRIANGLE_FAN,\r\n        attributes: {\r\n          // The size must be explicitly passed here otherwise luma.gl\r\n          // will default to assuming that positions are 3D (x,y,z)\r\n          positions: {\r\n            size: 2,\r\n            value: new Float32Array(positions),\r\n          },\r\n        },\r\n      }),\r\n      isInstanced: true,\r\n    })\r\n  }\r\n\r\n  _onUpdate() {\r\n    this.setNeedsRedraw()\r\n  }\r\n\r\n  _onError(evt: any) {\r\n    const { onIconError } = this.getCurrentLayer().props\r\n    if (onIconError) {\r\n      onIconError(evt)\r\n    } else {\r\n      log.error(evt.error)()\r\n    }\r\n  }\r\n\r\n  getInstanceOffset(icon: any) {\r\n    const rect = this.state.iconManager.getIconMapping(icon)\r\n    return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0]\r\n  }\r\n\r\n  getInstanceColorMode(icon: any) {\r\n    const mapping = this.state.iconManager.getIconMapping(icon)\r\n    return mapping.mask ? 1 : 0\r\n  }\r\n\r\n  getInstanceIconFrame(icon: any) {\r\n    const rect = this.state.iconManager.getIconMapping(icon)\r\n    return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0]\r\n  }\r\n}\r\n\r\nIconLayer.layerName = 'FlatIconLayer'\r\nIconLayer.defaultProps = defaultProps\r\n"],"names":["DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","iconStill","getIcon","getBOffsets","getBIconFrames","getBColorModes","getColor","getSize","getAngle","getPixelOffset","getPathStart","getPathEnd","getTimeStart","getTimeEnd","currentTime","pickable","onIconError","compare","optional","IconLayer","Layer","getShaders","super","vs","vertShader","fs","fragShader","modules","project32","picking","initializeState","this","state","iconManager","IconManager","context","gl","onUpdate","_onUpdate","bind","onError","_onError","getAttributeManager","addInstanced","instanceTimestamps","size","accessor","instanceTimestampsNext","instanceStartPositions","instanceEndPositions","instanceSizes","transition","defaultValue","instanceOffsets","instanceIconFrames","instanceColorModes","GL","UNSIGNED_BYTE","instanceColors","props","colorFormat","length","normalized","instanceAngles","instancePixelOffset","updateState","oldProps","changeFlags","attributeManager","data","setProps","loadOptions","iconMappingChanged","internalState","isAsyncPropLoading","autoPacking","dataChanged","updateTriggersChanged","all","invalidate","extensionsChanged","_a","model","delete","_getModel","invalidateAll","isLoaded","finalizeState","finalize","draw","uniforms","viewport","iconsTexture","getTexture","setUniforms","iconsTextureDim","width","height","metersPerPixel","iconStillOffsets","getInstanceOffset","iconStillFrames","getInstanceIconFrame","Model","__spreadValues","id","geometry","Geometry","drawMode","TRIANGLE_FAN","attributes","positions","Float32Array","isInstanced","setNeedsRedraw","evt","getCurrentLayer","log","error","icon","rect","getIconMapping","anchorX","anchorY","getInstanceColorMode","mask","x","y","layerName"],"mappings":"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"}