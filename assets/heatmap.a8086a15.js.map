{"version":3,"file":"heatmap.a8086a15.js","sources":["../../src/dash-panels/heatmap.vue","../../src/dash-panels/heatmap.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\nVuePlotly.myplot(\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\nimport { transpose } from 'mathjs'\r\n\r\nimport VuePlotly from '@/components/VuePlotly.vue'\r\nimport DashboardDataManager, { FilterDefinition } from '@/js/DashboardDataManager'\r\nimport { DataTable, FileSystemConfig, BG_COLOR_DASHBOARD, UI_FONT, Status } from '@/Globals'\r\nimport globalStore from '@/store'\r\nimport { buildCleanTitle } from './_allPanels'\r\n\r\nexport default defineComponent({\r\n  name: 'HeatmapPanel',\r\n  components: { VuePlotly },\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    files: { type: Array, required: true },\r\n    config: { type: Object as any, required: true },\r\n    cardTitle: { type: String, required: true },\r\n    cardId: String,\r\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\r\n    zoomed: Boolean,\r\n  },\r\n  data: () => {\r\n    return {\r\n      globalState: globalStore.state,\r\n      // dataSet is either x,y or allRows[]\r\n      dataSet: {} as { x?: any[]; y?: any[]; allRows?: DataTable },\r\n      id: ('heatmap-' + Math.floor(1e12 * Math.random())) as any,\r\n      YAMLrequirementsHeatmap: { dataset: '', y: '', columns: [] },\r\n      layout: {\r\n        margin: { t: 8, b: 50 },\r\n        font: {\r\n          color: '#444444',\r\n          family: UI_FONT,\r\n        },\r\n        barmode: '',\r\n        bargap: 0.08,\r\n        xaxis: {\r\n          autorange: true,\r\n          title: '',\r\n        },\r\n        yaxis: {\r\n          autorange: true,\r\n          title: '',\r\n        },\r\n        legend: {\r\n          x: 1,\r\n          xanchor: 'right',\r\n          y: 1,\r\n        },\r\n      } as any,\r\n      data: [] as any[],\r\n      options: {\r\n        displaylogo: false,\r\n        responsive: true,\r\n        modeBarButtonsToRemove: [\r\n          'pan2d',\r\n          'zoom2d',\r\n          'select2d',\r\n          'lasso2d',\r\n          'zoomIn2d',\r\n          'zoomOut2d',\r\n          'autoScale2d',\r\n          'hoverClosestCartesian',\r\n          'hoverCompareCartesian',\r\n          'resetScale2d',\r\n          'toggleSpikelines',\r\n          'resetViewMapbox',\r\n        ],\r\n        toImageButtonOptions: {\r\n          format: 'png', // one of png, svg, jpeg, webp\r\n          filename: 'heatmap',\r\n          width: 1200,\r\n          height: 800,\r\n          scale: 1.0, // Multiply title/legend/axis/canvas sizes by this factor\r\n        },\r\n      },\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.updateTheme()\r\n    this.checkWarningsAndErrors()\r\n    this.dataSet = await this.loadData()\r\n\r\n    if (Object.keys(this.dataSet).length) {\r\n      this.updateChart()\r\n      this.options.toImageButtonOptions.filename = buildCleanTitle(this.cardTitle, this.subfolder)\r\n      this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\r\n    }\r\n    this.$emit('isLoaded')\r\n  },\r\n  beforeDestroy() {\r\n    this.datamanager?.removeFilterListener(this.config, this.handleFilterChanged)\r\n  },\r\n\r\n  watch: {\r\n    zoomed() {\r\n      this.resizePlot()\r\n    },\r\n    'globalState.isDarkMode'() {\r\n      this.updateTheme()\r\n    },\r\n  },\r\n  methods: {\r\n    changeDimensions(dimensions: { width: number; height: number }) {\r\n      this.layout = Object.assign({}, this.layout, dimensions)\r\n    },\r\n\r\n    resizePlot() {\r\n      var elements = document.getElementsByClassName('spinner-box')\r\n      if (this.zoomed) {\r\n        for (let element of elements) {\r\n          if (element.clientHeight > 0) {\r\n            this.layout.height = element.clientHeight\r\n          }\r\n        }\r\n      } else {\r\n        this.layout.height = 300\r\n      }\r\n    },\r\n\r\n    updateTheme() {\r\n      const colors = {\r\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\r\n      }\r\n      this.layout = Object.assign({}, this.layout, colors)\r\n    },\r\n\r\n    handleFilterChanged() {\r\n      if (!this.datamanager) return\r\n\r\n      const { filteredRows } = this.datamanager.getFilteredDataset(this.config) as any\r\n\r\n      if (!filteredRows || !filteredRows.length) {\r\n        this.dataSet = { allRows: {} }\r\n      } else {\r\n        const allRows = {} as any\r\n\r\n        const keys = Object.keys(filteredRows[0])\r\n        keys.forEach(key => (allRows[key] = { name: key, values: [] as any }))\r\n\r\n        filteredRows.forEach((row: any) => {\r\n          keys.forEach(key => allRows[key].values.push(row[key]))\r\n        })\r\n        this.dataSet = { allRows }\r\n      }\r\n\r\n      this.updateChart()\r\n    },\r\n\r\n    async loadData() {\r\n      try {\r\n        this.validateYAML()\r\n        let dataset = await this.datamanager.getDataset(this.config)\r\n\r\n        // no filter? we are done\r\n        if (!this.config.filters) return dataset\r\n\r\n        // filter data before returning:\r\n        this.datamanager.addFilterListener(this.config, this.handleFilterChanged)\r\n\r\n        for (const [column, value] of Object.entries(this.config.filters)) {\r\n          const filter: FilterDefinition = {\r\n            dataset: this.config.dataset,\r\n            column: column,\r\n            value: value,\r\n            range: Array.isArray(value),\r\n          }\r\n          this.datamanager.setFilter(filter)\r\n        }\r\n        // empty for now; filtered data will come back later via handleFilterChanged async.\r\n        return { allRows: {} }\r\n      } catch (e) {\r\n        console.error('' + e)\r\n      }\r\n      return { allRows: {} }\r\n    },\r\n\r\n    validateYAML() {\r\n      console.log('in heatmap validation')\r\n\r\n      for (const key in this.YAMLrequirementsHeatmap) {\r\n        if (key in this.config === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    updateChart() {\r\n      this.layout.xaxis.title = this.config.xAxisTitle || this.config.xAxisName || ''\r\n      this.layout.yaxis.title = this.config.yAxisTitle || this.config.yAxisName || ''\r\n\r\n      try {\r\n        if (this.config.groupBy) this.updateChartWithGroupBy()\r\n        else this.updateChartSimple()\r\n      } catch (e) {\r\n        const msg = '' + e\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg,\r\n          desc: 'Add a desription...',\r\n        })\r\n      }\r\n    },\r\n\r\n    updateChartWithGroupBy() {\r\n      // tba\r\n    },\r\n\r\n    updateChartSimple() {\r\n      var xaxis: any[] = []\r\n      var matrix: any[] = []\r\n\r\n      const allRows = this.dataSet.allRows || ({} as any)\r\n\r\n      const columns = this.config.columns || this.config.usedCol || []\r\n      if (!columns.length) return\r\n\r\n      // Reads all the data of the y-axis.\r\n      let yaxis = allRows[this.config.y].values\r\n\r\n      // Reads all the data of the x-axis.\r\n      for (const key of Object.keys(allRows)) {\r\n        if (columns.includes(key)) {\r\n          xaxis.push(key)\r\n        }\r\n      }\r\n\r\n      // Converts all data to the matrix format of the heatmap\r\n      let i = 0\r\n      for (const column of this.config.columns) {\r\n        matrix[i++] = allRows[column].values\r\n      }\r\n\r\n      if (!this.config.flipAxes) matrix = transpose(matrix)\r\n\r\n      // Pushes the data into the chart\r\n      this.data = [\r\n        {\r\n          x: this.config.flipAxes ? yaxis : xaxis,\r\n          y: this.config.flipAxes ? xaxis : yaxis,\r\n          z: matrix,\r\n          colorscale: 'Viridis', // 'YlOrRed', // 'Hot',\r\n          type: 'heatmap',\r\n          automargin: true,\r\n        },\r\n      ]\r\n    },\r\n\r\n    // Check this plot for warnings and errors\r\n    checkWarningsAndErrors() {\r\n      var plotTitle = this.cardTitle\r\n      // warnings\r\n      // missing title\r\n      if (plotTitle.length == 0) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `The plot title is missing!`,\r\n          desc: \"Please add a plot title in the .yaml-file (title: 'Example title')\",\r\n        })\r\n      }\r\n      // errors\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.myplot {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n</style>\r\n","\r\nVuePlotly.myplot(\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n"],"names":["__vue2_script","defineComponent","name","components","VuePlotly","props","fileSystemConfig","type","Object","required","subfolder","String","files","Array","config","cardTitle","cardId","datamanager","zoomed","Boolean","data","globalState","globalStore","state","dataSet","id","Math","floor","random","YAMLrequirementsHeatmap","dataset","y","columns","layout","margin","t","b","font","color","family","UI_FONT","barmode","bargap","xaxis","autorange","title","yaxis","legend","x","xanchor","options","displaylogo","responsive","modeBarButtonsToRemove","toImageButtonOptions","format","filename","width","height","scale","mounted","this","updateTheme","checkWarningsAndErrors","loadData","keys","length","updateChart","buildCleanTitle","$emit","resizer","changeDimensions","beforeDestroy","_a","removeFilterListener","handleFilterChanged","watch","resizePlot","methods","dimensions","assign","elements","document","getElementsByClassName","element","clientHeight","colors","paper_bgcolor","BG_COLOR_DASHBOARD","colorScheme","plot_bgcolor","isDarkMode","filteredRows","getFilteredDataset","allRows","forEach","key","values","row","push","validateYAML","getDataset","filters","addFilterListener","column","value","entries","filter","range","isArray","setFilter","e","console","error","log","$store","commit","Status","ERROR","msg","desc","xAxisTitle","xAxisName","yAxisTitle","yAxisName","groupBy","updateChartWithGroupBy","updateChartSimple","matrix","usedCol","includes","i","flipAxes","transpose","z","colorscale","automargin","WARNING","_vm","_h","$createElement","_self","_c","staticClass","attrs"],"mappings":"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"}