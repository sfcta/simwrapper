{"version":3,"file":"TransitDemand.ee56ffbc.js","sources":["../../src/components/LeftDataPanel.vue","../../src/components/LeftDataPanel.vue?vue&type=template&lang.js","../../src/plugins/transit-demand/LegendBox.vue","../../src/plugins/transit-demand/LegendBox.vue?vue&type=template&lang.js","../../src/plugins/transit-demand/TransitDemand.vue","../../src/plugins/transit-demand/TransitDemand.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\n#datapanel\r\n  .content-area(:class=\"{'is-hidden': isHidden, 'bye': isLeaving}\")\r\n    .info-header(v-if=\"title\")\r\n      h3(style=\"padding: 0.5rem 3rem; font-size: 1rem; font-weight: normal; color: white;\") {{ title }}\r\n\r\n    .top-area\r\n      slot\r\n\r\n  .restore-button(:class=\"{'add-margin': !isHidden}\")\r\n    button.button.is-small.hide-button(@click=\"toggleHidePanel\")\r\n      i.fa.fa-arrow-left(v-if=\"!isHidden\")\r\n      i.fa.fa-arrow-right(v-if=\"isHidden\")\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'LeftDataPanel',\r\n  props: {\r\n    title: String,\r\n  },\r\n  data: () => {\r\n    return {\r\n      isHidden: false,\r\n      isLeaving: false,\r\n    }\r\n  },\r\n  methods: {\r\n    toggleHidePanel() {\r\n      if (this.isHidden) this.isHidden = !this.isHidden\r\n      else {\r\n        this.isLeaving = true\r\n        setTimeout(() => {\r\n          this.isHidden = true\r\n          this.isLeaving = false\r\n        }, 300)\r\n      }\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n#datapanel {\r\n  display: flex;\r\n  flex-direction: row;\r\n  z-index: 7;\r\n  // margin: 0.5rem 0rem 0.5rem 0.5rem;\r\n  pointer-events: none;\r\n}\r\n\r\n.content-area {\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.1);\r\n  animation: 0.3s ease 0s 1 slideInFromLeft;\r\n  pointer-events: auto;\r\n}\r\n\r\n.is-hidden {\r\n  display: none;\r\n}\r\n\r\n.bye {\r\n  animation: 0.3s ease 0s 1 slideOutToLeft;\r\n}\r\n\r\n.top-area {\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  // background-color: #eeeefff4;\r\n  background-color: #d9ddec;\r\n  border-bottom-left-radius: 0.25rem;\r\n  border-bottom-right-radius: 0.25rem;\r\n  opacity: 0.97;\r\n}\r\n\r\n.lower-area {\r\n  padding: 0.5rem 0.5rem;\r\n}\r\n\r\n.bottom-nav-bar {\r\n  padding: 0.2rem 0rem;\r\n  background-color: white;\r\n  text-align: center;\r\n  border-bottom-left-radius: 0.25rem;\r\n  border-bottom-right-radius: 0.25rem;\r\n}\r\n\r\n.restore-button {\r\n  margin: auto 0rem 0.25rem 0.25rem;\r\n  pointer-events: auto;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.info-header {\r\n  text-align: center;\r\n  background-color: #09357c;\r\n  padding: 0.5rem 0rem;\r\n  // border-top-left-radius: 0.25rem;\r\n  // border-top-right-radius: 0.25rem;\r\n  border-top: solid 1px #888;\r\n  border-bottom: solid 1px #888;\r\n}\r\n\r\n.add-margin {\r\n  margin-left: 0.4rem;\r\n}\r\n\r\n.hide-button {\r\n  background-color: #4e6b3d;\r\n  color: white;\r\n}\r\n\r\n@keyframes slideInFromLeft {\r\n  from {\r\n    transform: translateX(-100%);\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n  }\r\n}\r\n\r\n@keyframes slideOutToLeft {\r\n  from {\r\n    transform: translateX(0);\r\n  }\r\n  to {\r\n    transform: translateX(-100%);\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n  #datapanel {\r\n    margin: 0rem 0rem 0rem 0rem;\r\n  }\r\n\r\n  .content-area {\r\n    margin-bottom: 0rem;\r\n  }\r\n\r\n  .info-header {\r\n    border-top-left-radius: 0rem;\r\n    border-top-right-radius: 0rem;\r\n    border-top: none;\r\n  }\r\n\r\n  .bottom-nav-bar {\r\n    border-bottom-left-radius: 0rem;\r\n    border-bottom-right-radius: 0rem;\r\n  }\r\n}\r\n</style>\r\n","\r\n#datapanel\r\n  .content-area(:class=\"{'is-hidden': isHidden, 'bye': isLeaving}\")\r\n    .info-header(v-if=\"title\")\r\n      h3(style=\"padding: 0.5rem 3rem; font-size: 1rem; font-weight: normal; color: white;\") {{ title }}\r\n\r\n    .top-area\r\n      slot\r\n\r\n  .restore-button(:class=\"{'add-margin': !isHidden}\")\r\n    button.button.is-small.hide-button(@click=\"toggleHidePanel\")\r\n      i.fa.fa-arrow-left(v-if=\"!isHidden\")\r\n      i.fa.fa-arrow-right(v-if=\"isHidden\")\r\n\r\n","<template lang=\"pug\">\r\n.legend-container\r\n  p.control-label Legend\r\n  .legend-item(v-for=\"item in rows\" :key=\"item[0]\")\r\n    .legend-col-1(:style=\"{'background-color': item[0]}\")\r\n    span.legend-col-2 {{ item[1] }}\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  name: 'LegendBox',\r\n  props: {\r\n    rows: { type: Array, required: true },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.legend-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: var(--text);\r\n\r\n  h3 {\r\n    font-size: 1rem;\r\n    margin-bottom: 0.25rem;\r\n  }\r\n}\r\n\r\n.control-label {\r\n  margin: 0 0;\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.legend-item {\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin-bottom: 0.25rem;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.legend-col-1 {\r\n  width: 3rem;\r\n}\r\n\r\n.legend-col-2 {\r\n  margin-left: 1rem;\r\n}\r\n\r\np.title {\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  margin-bottom: 1rem;\r\n  font-weight: normal;\r\n}\r\n</style>\r\n","\r\n.legend-container\r\n  p.control-label Legend\r\n  .legend-item(v-for=\"item in rows\" :key=\"item[0]\")\r\n    .legend-col-1(:style=\"{'background-color': item[0]}\")\r\n    span.legend-col-2 {{ item[1] }}\r\n","<template lang=\"pug\">\r\n.transit-viz(:class=\"{'hide-thumbnail': !thumbnail}\")\r\n  .map-container(:class=\"{'hide-thumbnail': !thumbnail }\")\r\n    div.map-styles(:id=\"mapID\")\r\n      .stop-marker(v-for=\"stop in stopMarkers\" :key=\"stop.i\"\r\n        :style=\"{transform: 'translate(-50%,-50%) rotate('+stop.bearing+'deg)', left: stop.xy.x + 'px', top: stop.xy.y+'px'}\"\r\n      )\r\n\r\n    legend-box.legend(v-if=\"!thumbnail\"\r\n      :rows=\"legendRows\"\r\n    )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\")\r\n  //- drawing-tool(v-if=\"!thumbnail\")\r\n\r\n  collapsible-panel.left-side(v-if=\"!thumbnail\"\r\n    :darkMode=\"isDarkMode\"\r\n    :locked=\"true\"\r\n    direction=\"left\")\r\n\r\n    .panel-items\r\n      //- .panel-item(v-if=\"vizDetails.title\")\r\n      //-   h3 {{ vizDetails.title }}\r\n      //-   p {{ vizDetails.description }}\r\n\r\n      .route-list(v-if=\"routesOnLink.length > 0\")\r\n        .route(v-for=\"route in routesOnLink\"\r\n            :key=\"route.uniqueRouteID\"\r\n            :class=\"{highlightedRoute: selectedRoute && route.id === selectedRoute.id}\"\r\n            @click=\"showRouteDetails(route.id)\")\r\n          .route-title {{route.id}}\r\n          .detailed-route-data\r\n            .col\r\n              p: b {{route.departures}} departures\r\n              p First: {{route.firstDeparture}}\r\n              p Last: {{route.lastDeparture}}\r\n            .col(v-if=\"route.passengersAtArrival\")\r\n              p: b {{ route.passengersAtArrival }} passengers\r\n              p {{ route.totalVehicleCapacity }} capacity\r\n\r\n  .control-panel(v-if=\"!thumbnail\"\r\n    :class=\"{'is-dashboard': config !== undefined }\"\r\n  )\r\n\r\n    .panel-item\r\n      p.control-label {{  $t('metrics') }}:\r\n      .metric-buttons\r\n        button.button.is-small.metric-button(\r\n          v-for=\"metric,i in metrics\" :key=\"metric.field\"\r\n          :style=\"{'color': activeMetric===metric.field ? 'white' : buttonColors[i], 'border': `1px solid ${buttonColors[i]}`, 'border-right': `0.4rem solid ${buttonColors[i]}`,'border-radius': '4px', 'background-color': activeMetric===metric.field ? buttonColors[i] : isDarkMode ? '#333':'white'}\"\r\n          @click=\"handleClickedMetric(metric)\") {{ $i18n.locale === 'de' ? metric.name_de : metric.name_en }}\r\n\r\n  .status-corner(v-if=\"!thumbnail && loadingText\")\r\n    p {{ loadingText }}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: { metrics: 'Metrics', viewer: 'Transit Network' },\r\n    de: { metrics: 'Metrics', viewer: 'Ã–V Netzwerk' },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport * as turf from '@turf/turf'\r\nimport colormap from 'colormap'\r\nimport crossfilter from 'crossfilter2'\r\nimport maplibregl, { GeoJSONSource, LngLatBoundsLike, LngLatLike, Popup } from 'maplibre-gl'\r\nimport Papa from '@simwrapper/papaparse'\r\nimport yaml from 'yaml'\r\n\r\nimport globalStore from '@/store'\r\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport LeftDataPanel from '@/components/LeftDataPanel.vue'\r\nimport { Network, NetworkInputs, NetworkNode, TransitLine, RouteDetails } from './Interfaces'\r\nimport NewXmlFetcher from '@/workers/NewXmlFetcher.worker?worker'\r\nimport TransitSupplyWorker from './TransitSupplyHelper.worker?worker'\r\nimport LegendBox from './LegendBox.vue'\r\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\n\r\nimport { FileSystem, FileSystemConfig, ColorScheme, VisualizationPlugin } from '@/Globals'\r\n\r\nimport GzipWorker from '@/workers/GzipFetcher.worker?worker'\r\n\r\nconst DEFAULT_PROJECTION = 'EPSG:31468' // 31468' // 2048'\r\n\r\nconst COLOR_CATEGORIES = 10\r\nconst SHOW_STOPS_AT_ZOOM_LEVEL = 11\r\n\r\nclass Departure {\r\n  public total: number = 0\r\n  public routes: Set<string> = new Set()\r\n}\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'TransitViewer',\r\n  i18n,\r\n  components: { CollapsiblePanel, LeftDataPanel, LegendBox, DrawingTool, ZoomButtons },\r\n\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    yamlConfig: String,\r\n    config: { type: Object as any },\r\n    thumbnail: Boolean,\r\n  },\r\n\r\n  data: () => {\r\n    const metrics = [{ field: 'departures', name_en: 'Departures', name_de: 'Abfahrten' }]\r\n\r\n    return {\r\n      mapPopup: new Popup({\r\n        closeButton: false,\r\n        closeOnClick: false,\r\n      }),\r\n      buttonColors: ['#5E8AAE', '#BF7230', '#269367', '#9C439C'],\r\n      metrics: metrics,\r\n      activeMetric: metrics[0].field as any,\r\n      vizDetails: {\r\n        transitSchedule: '',\r\n        network: '',\r\n        demand: '',\r\n        projection: '',\r\n        title: '',\r\n        description: '',\r\n      },\r\n      myState: {\r\n        subfolder: '',\r\n        yamlConfig: '',\r\n        thumbnail: true,\r\n      },\r\n      isDarkMode: globalStore.state.isDarkMode,\r\n      isMapMoving: false,\r\n      loadingText: 'MATSim Transit Inspector',\r\n      mymap: null as any,\r\n      mapID: `map-id-${Math.floor(1e12 * Math.random())}` as any,\r\n\r\n      projection: DEFAULT_PROJECTION,\r\n      routesOnLink: [] as any[],\r\n      selectedRoute: {} as any,\r\n      stopMarkers: [] as any[],\r\n\r\n      _attachedRouteLayers: [] as string[],\r\n      _departures: {} as { [linkID: string]: Departure },\r\n      _linkData: null as any,\r\n      _mapExtentXYXY: null as any,\r\n      _maximum: -Infinity,\r\n      _network: {} as Network,\r\n      _routeData: {} as { [index: string]: RouteDetails },\r\n      _stopFacilities: {} as { [index: string]: NetworkNode },\r\n      _transitLines: {} as { [index: string]: TransitLine },\r\n      _roadFetcher: {} as any,\r\n      _transitFetcher: {} as any,\r\n      _transitHelper: {} as any,\r\n      _transitLinks: null as any,\r\n      _geoTransitLinks: null as any,\r\n\r\n      resolvers: {} as { [id: number]: any },\r\n      resolverId: 0,\r\n      xmlWorker: null as null | Worker,\r\n      cfDemand: null as crossfilter.Crossfilter<any> | null,\r\n      cfDemandLink: null as crossfilter.Dimension<any, any> | null,\r\n      hoverWait: false,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    legendRows(): string[][] {\r\n      return [\r\n        ['#a03919', 'Rail'],\r\n        ['#448', 'Bus'],\r\n      ]\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    '$store.state.resizeEvents'() {\r\n      if (this.mymap) this.mymap.resize()\r\n    },\r\n\r\n    '$store.state.viewState'({ bearing, longitude, latitude, zoom, pitch }: any) {\r\n      // ignore my own farts; they smell like roses\r\n      if (!this.mymap || this.isMapMoving) {\r\n        this.isMapMoving = false\r\n        return\r\n      }\r\n\r\n      // sometimes closing a view returns a null map, ignore it!\r\n      if (!zoom) return\r\n\r\n      this.mymap.off('move', this.handleMapMotion)\r\n\r\n      this.mymap.jumpTo({\r\n        bearing,\r\n        zoom,\r\n        center: [longitude, latitude],\r\n        pitch,\r\n      })\r\n\r\n      this.mymap.on('move', this.handleMapMotion)\r\n\r\n      if (this.stopMarkers.length > 0) this.showTransitStops()\r\n    },\r\n\r\n    '$store.state.colorScheme'() {\r\n      this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\r\n      if (!this.mymap) return\r\n\r\n      this.removeAttachedRoutes()\r\n\r\n      this.mymap.setStyle(globalStore.getters.mapStyle)\r\n\r\n      this.mymap.on('style.load', () => {\r\n        if (this._geoTransitLinks) this.addTransitToMap(this._geoTransitLinks)\r\n        this.highlightAllAttachedRoutes()\r\n        if (this.selectedRoute) this.showTransitRoute(this.selectedRoute.id)\r\n      })\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    async getVizDetails() {\r\n      // are we in a dashboard?\r\n      if (this.config) {\r\n        this.vizDetails = Object.assign({}, this.config)\r\n        return true\r\n      }\r\n\r\n      // if a YAML file was passed in, just use it\r\n      if (this.myState.yamlConfig?.endsWith('yaml') || this.myState.yamlConfig?.endsWith('yml')) {\r\n        return this.loadYamlConfig()\r\n      }\r\n\r\n      // Build the config based on folder contents\r\n      const title = this.myState.yamlConfig.substring(\r\n        0,\r\n        15 + this.myState.yamlConfig.indexOf('transitSchedule')\r\n      )\r\n\r\n      this.vizDetails = {\r\n        transitSchedule: this.myState.yamlConfig,\r\n        network: '',\r\n        title,\r\n        description: '',\r\n        demand: '',\r\n        projection: '',\r\n      }\r\n\r\n      this.$emit('title', title)\r\n      return true\r\n    },\r\n\r\n    async prepareView() {\r\n      const { files } = await this.fileApi.getDirectory(this.myState.subfolder)\r\n\r\n      // Road network: first try the most obvious network filename:\r\n      let network =\r\n        this.vizDetails.network ?? this.myState.yamlConfig.replaceAll('transitSchedule', 'network')\r\n\r\n      // if the obvious network file doesn't exist, just grab... the first network file:\r\n      if (files.indexOf(network) == -1) {\r\n        const allNetworks = files.filter(f => f.endsWith('network.xml.gz'))\r\n        if (allNetworks.length) network = allNetworks[0]\r\n        else {\r\n          this.loadingText = 'No road network found.'\r\n          network = ''\r\n        }\r\n      }\r\n\r\n      // Departures: use them if we are in an output folder (and they exist)\r\n      let demandFiles = [] as string[]\r\n      if (this.myState.yamlConfig.indexOf('output_transitSchedule') > -1) {\r\n        demandFiles = files.filter(f => f.endsWith('pt_stop2stop_departures.csv.gz'))\r\n      }\r\n\r\n      // Save everything\r\n      this.vizDetails.network = network\r\n      if (demandFiles.length) this.vizDetails.demand = demandFiles[0]\r\n    },\r\n\r\n    async guessProjection(networks: any): Promise<string> {\r\n      // 00. If it's in config, use it\r\n      if (this.vizDetails.projection) return this.vizDetails.projection\r\n      if (this.config?.projection) return this.config.projection\r\n\r\n      // 0. If it's in the network, use it\r\n      if (networks?.roadXML?.network?.attributes?.attribute?.name === 'coordinateReferenceSystem') {\r\n        return networks?.roadXML?.network?.attributes?.attribute['#text']\r\n      }\r\n\r\n      // 1. if we have it in storage already, use it\r\n      const storagePath = `${this.root}/${this.subfolder}`\r\n      let savedConfig = undefined // localStorage.getItem(storagePath) as any\r\n\r\n      const goodEPSG = /EPSG:.\\d/\r\n\r\n      if (savedConfig) {\r\n        try {\r\n          const config = JSON.parse(savedConfig)\r\n\r\n          if (goodEPSG.test(config.networkProjection)) {\r\n            return config.networkProjection\r\n          } else {\r\n            savedConfig = {}\r\n          }\r\n        } catch (e) {\r\n          console.error('bad saved config in storage', savedConfig)\r\n          savedConfig = {}\r\n          // fail! ok try something else\r\n        }\r\n      }\r\n\r\n      // 2. try to get it from config\r\n      const { files } = await this.fileApi.getDirectory(this.myState.subfolder)\r\n      const outputConfigs = files.filter(\r\n        f => f.indexOf('.output_config.xml') > -1 || f.indexOf('.output_config_reduced.xml') > -1\r\n      )\r\n      if (outputConfigs.length && this.fileSystem) {\r\n        // console.log('trying to find CRS in', outputConfigs[0])\r\n\r\n        for (const xmlConfigFileName of outputConfigs) {\r\n          try {\r\n            const configXML: any = await this.fetchXML({\r\n              worker: null,\r\n              slug: this.fileSystem.slug,\r\n              filePath: this.myState.subfolder + '/' + xmlConfigFileName,\r\n            })\r\n\r\n            const global = configXML.config.module.filter((f: any) => f.$name === 'global')[0]\r\n            const crs = global.param.filter((p: any) => p.$name === 'coordinateSystem')[0]\r\n\r\n            const crsValue = crs.$value\r\n\r\n            // save it\r\n            // savedConfig = savedConfig || {}\r\n            // savedConfig.networkProjection = crsValue\r\n            // localStorage.setItem(storagePath, JSON.stringify(savedConfig))\r\n            return crsValue\r\n          } catch (e) {\r\n            console.warn('Failed parsing', xmlConfigFileName)\r\n          }\r\n        }\r\n      }\r\n\r\n      // 3. ask the user\r\n      let entry = prompt('Need coordinate EPSG number:', '') || ''\r\n\r\n      // if user cancelled, give up\r\n      if (!entry) return ''\r\n      // if user gave bad answer, try again\r\n      if (isNaN(parseInt(entry, 10)) && !goodEPSG.test(entry)) return this.guessProjection(networks)\r\n\r\n      // hopefully user gave a good EPSG number\r\n      if (!entry.startsWith('EPSG:')) entry = 'EPSG:' + entry\r\n\r\n      const networkProjection = entry\r\n      localStorage.setItem(storagePath, JSON.stringify({ networkProjection }))\r\n      return networkProjection\r\n    },\r\n\r\n    async loadYamlConfig() {\r\n      const filename =\r\n        this.myState.yamlConfig.indexOf('/') > -1\r\n          ? this.myState.yamlConfig\r\n          : this.myState.subfolder + '/' + this.myState.yamlConfig\r\n\r\n      try {\r\n        const text = await this.fileApi.getFileText(filename)\r\n        this.vizDetails = yaml.parse(text)\r\n      } catch (e) {\r\n        // maybe it failed because password?\r\n        const err = e as any\r\n        if (this.fileSystem && this.fileSystem.needPassword && err.status === 401) {\r\n          this.$store.commit('requestLogin', this.fileSystem.slug)\r\n        } else {\r\n          const msg = 'Could not load ' + filename\r\n          this.$store.commit('error', msg)\r\n          this.loadingText = msg\r\n        }\r\n        return false\r\n      }\r\n\r\n      const t = this.vizDetails.title ? this.vizDetails.title : 'Transit Ridership'\r\n      this.$emit('title', t)\r\n\r\n      this.projection = this.vizDetails.projection\r\n      return true\r\n    },\r\n\r\n    isMobile() {\r\n      const w = window\r\n      const d = document\r\n      const e = d.documentElement\r\n      const g = d.getElementsByTagName('body')[0]\r\n      const x = w.innerWidth || e.clientWidth || g.clientWidth\r\n      const y = w.innerHeight || e.clientHeight || g.clientHeight\r\n      return x < 640\r\n    },\r\n\r\n    setupMap() {\r\n      try {\r\n        this.mymap = new maplibregl.Map({\r\n          bearing: 0,\r\n          container: this.mapID,\r\n          logoPosition: 'bottom-left',\r\n          style: globalStore.getters.mapStyle,\r\n          pitch: 0,\r\n        })\r\n\r\n        const extent = localStorage.getItem(this.$route.fullPath + '-bounds')\r\n\r\n        if (extent) {\r\n          try {\r\n            const lnglat = JSON.parse(extent)\r\n            const mFac = this.isMobile() ? 0 : 1\r\n            const padding = { top: 50 * mFac, bottom: 50 * mFac, right: 50 * mFac, left: 50 * mFac }\r\n\r\n            this.mymap.fitBounds(lnglat, {\r\n              animate: false,\r\n              padding,\r\n            })\r\n          } catch (e) {\r\n            // ignore this, it's ok\r\n          }\r\n        }\r\n        // Start doing stuff AFTER the MapBox library has fully initialized\r\n        this.mymap.on('load', this.mapIsReady)\r\n        this.mymap.on('move', this.handleMapMotion)\r\n        this.mymap.on('click', this.handleEmptyClick)\r\n\r\n        this.mymap.keyboard.disable() // so arrow keys don't pan\r\n      } catch (e) {\r\n        console.error('' + e)\r\n\r\n        // no worries\r\n      }\r\n    },\r\n\r\n    handleClickedMetric(metric: { field: string }) {\r\n      console.log('transit metric:', metric.field)\r\n\r\n      this.activeMetric = metric.field\r\n\r\n      let widthExpression: any = 3\r\n\r\n      switch (metric.field) {\r\n        case 'departures':\r\n          widthExpression = ['max', 2, ['*', 0.03, ['get', 'departures']]]\r\n          break\r\n\r\n        case 'pax':\r\n          widthExpression = ['max', 2, ['*', 0.003, ['get', 'pax']]]\r\n          break\r\n\r\n        case 'loadfac':\r\n          widthExpression = ['max', 2, ['*', 200, ['get', 'loadfac']]]\r\n          break\r\n      }\r\n\r\n      this.mymap.setPaintProperty('transit-link', 'line-width', widthExpression)\r\n    },\r\n\r\n    handleMapMotion() {\r\n      const mapCamera = {\r\n        longitude: this.mymap.getCenter().lng,\r\n        latitude: this.mymap.getCenter().lat,\r\n        bearing: this.mymap.getBearing(),\r\n        zoom: this.mymap.getZoom(),\r\n        pitch: this.mymap.getPitch(),\r\n      }\r\n\r\n      if (!this.isMapMoving) this.$store.commit('setMapCamera', mapCamera)\r\n      this.isMapMoving = true\r\n\r\n      if (this.stopMarkers.length > 0) this.showTransitStops()\r\n    },\r\n\r\n    handleEmptyClick(e: mapboxgl.MapMouseEvent) {\r\n      this.removeStopMarkers()\r\n      this.removeSelectedRoute()\r\n      this.removeAttachedRoutes()\r\n      this.routesOnLink = []\r\n    },\r\n\r\n    showRouteDetails(routeID: string) {\r\n      if (!routeID && !this.selectedRoute) return\r\n\r\n      console.log({ routeID })\r\n\r\n      if (routeID) this.showTransitRoute(routeID)\r\n      else this.showTransitRoute(this.selectedRoute.id)\r\n\r\n      this.showTransitStops()\r\n    },\r\n\r\n    async mapIsReady() {\r\n      const networks = await this.loadNetworks()\r\n      const projection = await this.guessProjection(networks)\r\n      this.vizDetails.projection = projection\r\n      this.projection = this.vizDetails.projection\r\n      console.log(projection)\r\n\r\n      if (networks) this.processInputs(networks)\r\n\r\n      // TODO remove for now until we research whether this causes a memory leak:\r\n      // this.setupKeyListeners()\r\n    },\r\n\r\n    setupKeyListeners() {\r\n      window.addEventListener('keyup', event => {\r\n        if (event.keyCode === 27) {\r\n          // ESC\r\n          this.pressedEscape()\r\n        }\r\n      })\r\n      window.addEventListener('keydown', event => {\r\n        if (event.keyCode === 38) {\r\n          this.pressedArrowKey(-1) // UP\r\n        }\r\n        if (event.keyCode === 40) {\r\n          this.pressedArrowKey(+1) // DOWN\r\n        }\r\n      })\r\n    },\r\n\r\n    fetchXML(props: { worker: any; slug: string; filePath: string; options?: any }) {\r\n      let xmlWorker = props.worker\r\n\r\n      xmlWorker.onmessage = (message: MessageEvent) => {\r\n        // message.data will have .id and either .error or .xml\r\n        const { resolve, reject } = this.resolvers[message.data.id]\r\n\r\n        xmlWorker.terminate()\r\n\r\n        if (message.data.error) reject(message.data.error)\r\n        resolve(message.data.xml)\r\n      }\r\n\r\n      // save the promise by id so we can look it up when we get messages\r\n      const id = this.resolverId++\r\n\r\n      xmlWorker.postMessage({\r\n        id,\r\n        fileSystem: this.fileSystem,\r\n        filePath: props.filePath,\r\n        options: props.options,\r\n      })\r\n\r\n      const promise = new Promise((resolve, reject) => {\r\n        this.resolvers[id] = { resolve, reject }\r\n      })\r\n      return promise\r\n    },\r\n\r\n    async loadNetworks() {\r\n      try {\r\n        if (!this.fileSystem || !this.vizDetails.network || !this.vizDetails.transitSchedule) return\r\n\r\n        this.loadingText = 'Loading networks...'\r\n\r\n        const roads = this.fetchXML({\r\n          worker: this._roadFetcher,\r\n          slug: this.fileSystem.slug,\r\n          filePath: this.myState.subfolder + '/' + this.vizDetails.network,\r\n          options: { attributeNamePrefix: '' },\r\n        })\r\n\r\n        const transit = this.fetchXML({\r\n          worker: this._transitFetcher,\r\n          slug: this.fileSystem.slug,\r\n          filePath: this.myState.subfolder + '/' + this.vizDetails.transitSchedule,\r\n          options: {\r\n            attributeNamePrefix: '',\r\n            alwaysArray: [\r\n              'transitSchedule.transitLine.transitRoute',\r\n              'transitSchedule.transitLine.transitRoute.departures.departure',\r\n            ],\r\n          },\r\n        })\r\n\r\n        // and wait for them to all complete\r\n        const results = await Promise.all([roads, transit])\r\n        return { roadXML: results[0], transitXML: results[1], ridership: [] }\r\n      } catch (e) {\r\n        console.error('TRANSIT:', e)\r\n        this.loadingText = '' + e\r\n        globalStore.commit('error', 'Transit: ' + e)\r\n        return null\r\n      }\r\n    },\r\n\r\n    loadDemandData(filename: string): Promise<any[]> {\r\n      const promise: Promise<any[]> = new Promise<any[]>((resolve, reject) => {\r\n        if (!filename) resolve([])\r\n        this.loadingText = 'Loading demand...'\r\n        const worker = new GzipWorker() as Worker\r\n\r\n        worker.onmessage = (event: MessageEvent) => {\r\n          this.loadingText = 'Processing demand...'\r\n          const csvData = new TextDecoder('utf-8').decode(event.data)\r\n          worker.terminate()\r\n\r\n          Papa.parse(csvData, {\r\n            // preview: 10000,\r\n            header: true,\r\n            skipEmptyLines: true,\r\n            dynamicTyping: true,\r\n            worker: true,\r\n            complete: (results: any) => {\r\n              resolve(this.processDemand(results))\r\n            },\r\n          })\r\n        }\r\n\r\n        worker.postMessage({\r\n          filePath: this.myState.subfolder + '/' + filename,\r\n          fileSystem: this.fileSystem,\r\n        })\r\n      })\r\n      return promise\r\n    },\r\n\r\n    processDemand(results: any) {\r\n      // todo: make sure meta contains fields we need!\r\n      this.loadingText = 'Processing demand data...'\r\n\r\n      // build crossfilter\r\n      console.log('BUILD crossfilter')\r\n      this.cfDemand = crossfilter(results.data)\r\n      this.cfDemandLink = this.cfDemand.dimension((d: any) => d.linkIdsSincePreviousStop)\r\n\r\n      // build link-level passenger ridership\r\n      console.log('COUNTING RIDERSHIP')\r\n\r\n      const linkPassengersById = {} as any\r\n      const group = this.cfDemandLink.group()\r\n      group\r\n        .reduceSum((d: any) => d.passengersAtArrival)\r\n        .all()\r\n        .map(link => {\r\n          linkPassengersById[link.key as any] = link.value\r\n        })\r\n\r\n      // and pax load-factors\r\n      const capacity = {} as any\r\n      group\r\n        .reduceSum((d: any) => d.totalVehicleCapacity)\r\n        .all()\r\n        .map(link => {\r\n          capacity[link.key as any] = link.value\r\n        })\r\n\r\n      // update passenger value in the transit-link geojson.\r\n      for (const transitLink of this._transitLinks.features) {\r\n        transitLink.properties['pax'] = linkPassengersById[transitLink.properties.id]\r\n        transitLink.properties['cap'] = capacity[transitLink.properties.id]\r\n        transitLink.properties['loadfac'] =\r\n          Math.round(\r\n            (1000 * linkPassengersById[transitLink.properties.id]) /\r\n              capacity[transitLink.properties.id]\r\n          ) / 1000\r\n      }\r\n\r\n      this.metrics = this.metrics.concat([\r\n        { field: 'pax', name_en: 'Passengers', name_de: 'Passagiere' },\r\n        { field: 'loadfac', name_en: 'Load Factor', name_de: 'Auslastung' },\r\n      ])\r\n\r\n      const source = this.mymap.getSource('transit-source') as GeoJSONSource\r\n      source.setData(this._transitLinks)\r\n\r\n      this.loadingText = ''\r\n      return []\r\n    },\r\n\r\n    async processInputs(networks: NetworkInputs) {\r\n      this.loadingText = 'Preparing...'\r\n      // spawn transit helper web worker\r\n      this._transitHelper = new TransitSupplyWorker()\r\n\r\n      this._transitHelper.onmessage = async (buffer: MessageEvent) => {\r\n        this.receivedProcessedTransit(buffer)\r\n      }\r\n\r\n      this._transitHelper.postMessage({\r\n        xml: networks,\r\n        projection: this.projection,\r\n      })\r\n    },\r\n\r\n    async receivedProcessedTransit(buffer: MessageEvent) {\r\n      if (buffer.data.status) {\r\n        this.loadingText = buffer.data.status\r\n        return\r\n      }\r\n\r\n      if (buffer.data.error) {\r\n        console.error(buffer.data.error)\r\n        this.$store.commit('error', buffer.data.error)\r\n        return\r\n      }\r\n\r\n      const { network, routeData, stopFacilities, transitLines, mapExtent } = buffer.data\r\n      this._network = network\r\n      this._routeData = routeData\r\n      this._stopFacilities = stopFacilities\r\n      this._transitLines = transitLines\r\n      this._mapExtentXYXY = mapExtent\r\n\r\n      this._transitHelper.terminate()\r\n\r\n      this.loadingText = 'Summarizing departures...'\r\n\r\n      await this.processDepartures()\r\n\r\n      // Build the links layer and add it\r\n      this._transitLinks = await this.constructDepartureFrequencyGeoJson()\r\n      this.addTransitToMap(this._transitLinks)\r\n\r\n      this.handleClickedMetric({ field: 'departures' })\r\n\r\n      localStorage.setItem(this.$route.fullPath + '-bounds', JSON.stringify(this._mapExtentXYXY))\r\n      this.mymap.fitBounds(this._mapExtentXYXY, { animate: false })\r\n\r\n      if (this.vizDetails.demand) await this.loadDemandData(this.vizDetails.demand)\r\n\r\n      this.loadingText = ''\r\n    },\r\n\r\n    async processDepartures() {\r\n      this.loadingText = 'Processing departures...'\r\n\r\n      for (const id in this._transitLines) {\r\n        if (this._transitLines.hasOwnProperty(id)) {\r\n          const transitLine = this._transitLines[id]\r\n          for (const route of transitLine.transitRoutes) {\r\n            for (const linkID of route.route) {\r\n              if (!(linkID in this._departures))\r\n                this._departures[linkID] = { total: 0, routes: new Set() }\r\n\r\n              this._departures[linkID].total += route.departures\r\n              this._departures[linkID].routes.add(route.id)\r\n\r\n              this._maximum = Math.max(this._maximum, this._departures[linkID].total)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    addTransitToMap(geodata: any) {\r\n      this._geoTransitLinks = geodata\r\n\r\n      this.mymap.addSource('transit-source', {\r\n        data: geodata,\r\n        type: 'geojson',\r\n      } as any)\r\n\r\n      this.mymap.addLayer({\r\n        id: 'transit-link',\r\n        source: 'transit-source',\r\n        type: 'line',\r\n        paint: {\r\n          'line-opacity': 1.0,\r\n          'line-width': 1,\r\n          'line-color': ['get', 'color'],\r\n        },\r\n      })\r\n\r\n      this.mymap.on('click', 'transit-link', (e: maplibregl.MapMouseEvent) => {\r\n        this.clickedOnTransitLink(e)\r\n      })\r\n\r\n      // turn \"hover cursor\" into a pointer, so user knows they can click.\r\n      this.mymap.on('mousemove', 'transit-link', (e: maplibregl.MapLayerMouseEvent) => {\r\n        this.mymap.getCanvas().style.cursor = e ? 'pointer' : 'grab'\r\n        this.hoveredOnElement(e)\r\n      })\r\n\r\n      // and back to normal when they mouse away\r\n      this.mymap.on('mouseleave', 'transit-link', () => {\r\n        this.mymap.getCanvas().style.cursor = 'grab'\r\n        this.mapPopup.remove()\r\n      })\r\n    },\r\n\r\n    hoveredOnElement(event: any) {\r\n      const props = event.features[0].properties\r\n\r\n      let content = '<div class=\"map-popup\">'\r\n\r\n      for (const metric of this.metrics) {\r\n        let label = this.$i18n.locale == 'de' ? metric.name_de : metric.name_en\r\n        label = label.replaceAll(' ', '&nbsp;')\r\n\r\n        if (!isNaN(props[metric.field]))\r\n          content += `\r\n          <div style=\"display: flex\">\r\n            <div>${label}:&nbsp;&nbsp;</div>\r\n            <b style=\"margin-left: auto; text-align: right\">${props[metric.field]}</b>\r\n          </div>`\r\n      }\r\n\r\n      content += '<div>'\r\n      this.mapPopup.setLngLat(event.lngLat).setHTML(content).addTo(this.mymap)\r\n    },\r\n\r\n    async constructDepartureFrequencyGeoJson() {\r\n      const geojson = []\r\n\r\n      for (const linkID in this._departures) {\r\n        if (this._departures.hasOwnProperty(linkID)) {\r\n          const link = this._network.links[linkID]\r\n          if (!link) continue\r\n\r\n          const coordinates = [\r\n            [this._network.nodes[link.from].x, this._network.nodes[link.from].y],\r\n            [this._network.nodes[link.to].x, this._network.nodes[link.to].y],\r\n          ]\r\n\r\n          const departures = this._departures[linkID].total\r\n\r\n          // shift scale from 0->1 to 0.25->1.0, because dark blue is hard to see on a black map\r\n          const ratio = 0.25 + (0.75 * (departures - 1)) / this._maximum\r\n          const colorBin = Math.floor(COLOR_CATEGORIES * ratio)\r\n\r\n          let isRail = true\r\n          for (const route of this._departures[linkID].routes) {\r\n            if (this._routeData[route].transportMode === 'bus') {\r\n              isRail = false\r\n            }\r\n          }\r\n\r\n          let line = {\r\n            type: 'Feature',\r\n            geometry: {\r\n              type: 'LineString',\r\n              coordinates: coordinates,\r\n            },\r\n            properties: {\r\n              color: isRail ? '#a03919' : _colorScale[colorBin],\r\n              colorBin: colorBin,\r\n              departures: departures,\r\n              // pax: 0,\r\n              // loadfac: 0,\r\n              // cap: 0,\r\n              id: linkID,\r\n              isRail: isRail,\r\n              from: link.from, // _stopFacilities[fromNode].name || fromNode,\r\n              to: link.to, // _stopFacilities[toNode].name || toNode,\r\n            },\r\n          }\r\n\r\n          line = this.offsetLineByMeters(line, 15)\r\n          geojson.push(line)\r\n        }\r\n      }\r\n\r\n      geojson.sort(function (a: any, b: any) {\r\n        if (a.isRail && !b.isRail) return -1\r\n        if (b.isRail && !a.isRail) return 1\r\n        return 0\r\n      })\r\n\r\n      return { type: 'FeatureCollection', features: geojson }\r\n    },\r\n\r\n    offsetLineByMeters(line: any, metersToTheRight: number) {\r\n      try {\r\n        const offsetLine = turf.lineOffset(line, metersToTheRight, { units: 'meters' })\r\n        return offsetLine\r\n      } catch (e) {\r\n        // offset can fail if points are exactly on top of each other; ignore.\r\n      }\r\n      return line\r\n    },\r\n\r\n    removeStopMarkers() {\r\n      this.stopMarkers = []\r\n    },\r\n\r\n    async showTransitStops() {\r\n      this.removeStopMarkers()\r\n\r\n      const route = this.selectedRoute\r\n      const stopSizeClass = 'stopmarker' // this.mymap.getZoom() > SHOW_STOPS_AT_ZOOM_LEVEL ? 'stop-marker-big' : 'stop-marker'\r\n      const mapBearing = this.mymap.getBearing()\r\n\r\n      let bearing\r\n\r\n      for (const [i, stop] of route.routeProfile.entries()) {\r\n        const coord = [this._stopFacilities[stop.refId].x, this._stopFacilities[stop.refId].y]\r\n        // recalc bearing for every node except the last\r\n        if (i < route.routeProfile.length - 1) {\r\n          const point1 = turf.point([coord[0], coord[1]])\r\n          const point2 = turf.point([\r\n            this._stopFacilities[route.routeProfile[i + 1].refId].x,\r\n            this._stopFacilities[route.routeProfile[i + 1].refId].y,\r\n          ])\r\n          bearing = turf.bearing(point1, point2) - mapBearing // so icons rotate along with map\r\n        }\r\n\r\n        const xy = this.mymap.project([coord[0], coord[1]])\r\n\r\n        // every marker has a latlng coord and a bearing\r\n        const marker = { i, bearing, xy: { x: Math.floor(xy.x), y: Math.floor(xy.y) } }\r\n        this.stopMarkers.push(marker)\r\n      }\r\n    },\r\n\r\n    showTransitRoute(routeID: string) {\r\n      if (!routeID) return\r\n\r\n      const route = this._routeData[routeID]\r\n      // console.log({ selectedRoute: route })\r\n\r\n      this.selectedRoute = route\r\n\r\n      const source = this.mymap.getSource('selected-route-data') as GeoJSONSource\r\n      if (source) {\r\n        source.setData(route.geojson)\r\n      } else {\r\n        this.mymap.addSource('selected-route-data', {\r\n          data: route.geojson,\r\n          type: 'geojson',\r\n        })\r\n      }\r\n\r\n      if (!this.mymap.getLayer('selected-route')) {\r\n        this.mymap.addLayer({\r\n          id: 'selected-route',\r\n          source: 'selected-route-data',\r\n          type: 'line',\r\n          paint: {\r\n            'line-opacity': 1.0,\r\n            'line-width': 5, // ['get', 'width'],\r\n            'line-color': '#097c43', // ['get', 'color'],\r\n          },\r\n        })\r\n      }\r\n    },\r\n\r\n    removeSelectedRoute() {\r\n      if (this.selectedRoute) {\r\n        try {\r\n          this.mymap.removeLayer('selected-route')\r\n        } catch (e) {\r\n          // oh well\r\n        }\r\n        this.selectedRoute = null\r\n      }\r\n    },\r\n\r\n    clickedOnTransitLink(e: any) {\r\n      this.removeStopMarkers()\r\n      this.removeSelectedRoute()\r\n\r\n      // the browser delivers some details that we need, in the fn argument 'e'\r\n      const props = e.features[0].properties\r\n      const routeIDs = this._departures[props.id].routes\r\n\r\n      this.calculatePassengerVolumes(props.id)\r\n\r\n      const routes = []\r\n      for (const id of routeIDs) {\r\n        routes.push(this._routeData[id])\r\n      }\r\n\r\n      // sort by highest departures first\r\n      routes.sort(function (a, b) {\r\n        return a.departures > b.departures ? -1 : 1\r\n      })\r\n\r\n      this.routesOnLink = routes\r\n      this.highlightAllAttachedRoutes()\r\n\r\n      // highlight the first route, if there is one\r\n      if (routes.length > 0) this.showRouteDetails(routes[0].id)\r\n    },\r\n\r\n    calculatePassengerVolumes(id: string) {\r\n      if (!this.cfDemandLink || !this.cfDemand) return\r\n\r\n      this.cfDemandLink.filter(id)\r\n\r\n      const allLinks = this.cfDemand.allFiltered()\r\n      let sum = 0\r\n\r\n      allLinks.map(d => {\r\n        sum = sum + d.passengersBoarding + d.passengersAtArrival - d.passengersAlighting\r\n      })\r\n\r\n      // console.log({ sum, allLinks })\r\n    },\r\n\r\n    removeAttachedRoutes() {\r\n      for (const layerID of this._attachedRouteLayers) {\r\n        try {\r\n          this.mymap.removeLayer('route-' + layerID)\r\n          this.mymap.removeSource('source-route-' + layerID)\r\n        } catch (e) {\r\n          //meh\r\n        }\r\n      }\r\n      this._attachedRouteLayers = []\r\n    },\r\n\r\n    highlightAllAttachedRoutes() {\r\n      this.removeAttachedRoutes()\r\n\r\n      for (const route of this.routesOnLink) {\r\n        this.mymap.addSource('source-route-' + route.id, {\r\n          data: route.geojson,\r\n          type: 'geojson',\r\n        })\r\n        this.mymap.addLayer({\r\n          id: 'route-' + route.id,\r\n          source: 'source-route-' + route.id,\r\n          type: 'line',\r\n          paint: {\r\n            'line-opacity': 0.7,\r\n            'line-width': 8, // ['get', 'width'],\r\n            'line-color': '#ccff33', // ['get', 'color'],\r\n          },\r\n        })\r\n        this._attachedRouteLayers.push(route.id)\r\n      }\r\n    },\r\n\r\n    pressedEscape() {\r\n      this.removeSelectedRoute()\r\n      this.removeStopMarkers()\r\n      this.removeAttachedRoutes()\r\n\r\n      this.selectedRoute = null\r\n      this.routesOnLink = []\r\n    },\r\n\r\n    pressedArrowKey(delta: number) {\r\n      if (!this.selectedRoute) return\r\n\r\n      let i = this.routesOnLink.indexOf(this.selectedRoute)\r\n      i = i + delta\r\n\r\n      if (i < 0 || i >= this.routesOnLink.length) return\r\n\r\n      this.showRouteDetails(this.routesOnLink[i].id)\r\n    },\r\n\r\n    clearData() {\r\n      this._attachedRouteLayers = []\r\n      this._departures = {}\r\n      this._mapExtentXYXY = [180, 90, -180, -90]\r\n      this._maximum = 0\r\n      this._network = { nodes: {}, links: {} }\r\n      this._routeData = {}\r\n      this._stopFacilities = {}\r\n      this._transitLinks = null\r\n      this._transitLines = {}\r\n      this.selectedRoute = null\r\n      this.cfDemand = null\r\n      this.cfDemandLink?.dispose()\r\n      this.resolvers = {}\r\n      this.routesOnLink = []\r\n      this.selectedRoute = {}\r\n      this.stopMarkers = []\r\n      this._linkData = null\r\n      this._geoTransitLinks = null\r\n    },\r\n  },\r\n\r\n  async mounted() {\r\n    this.$store.commit('setFullScreen', !this.thumbnail)\r\n\r\n    this.clearData()\r\n\r\n    this._roadFetcher = new NewXmlFetcher()\r\n    this._transitFetcher = new NewXmlFetcher()\r\n    this._transitHelper = new TransitSupplyWorker()\r\n\r\n    // populate props after we attach, not before!\r\n    this.myState.subfolder = this.subfolder\r\n    this.myState.yamlConfig = this.yamlConfig ?? ''\r\n    this.myState.thumbnail = this.thumbnail\r\n\r\n    const status = await this.getVizDetails()\r\n    if (!status) return\r\n\r\n    if (this.thumbnail) return\r\n\r\n    await this.prepareView()\r\n    this.setupMap()\r\n  },\r\n\r\n  beforeDestroy() {\r\n    if (this.mymap) this.mymap.remove()\r\n\r\n    this.clearData()\r\n\r\n    if (this.xmlWorker) this.xmlWorker.terminate()\r\n    if (this._roadFetcher) this._roadFetcher.terminate()\r\n    if (this._transitFetcher) this._transitFetcher.terminate()\r\n    if (this._transitHelper) this._transitHelper.terminate()\r\n\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n})\r\n\r\nconst _colorScale = colormap({ colormap: 'viridis', nshades: COLOR_CATEGORIES })\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.mapboxgl-popup-content {\r\n  padding: 0px 20px 0px 0px;\r\n  opacity: 0.95;\r\n  box-shadow: 0 0 3px #00000080;\r\n}\r\n\r\nh4,\r\np {\r\n  margin: 0px 10px;\r\n}\r\n\r\n.transit-popup {\r\n  padding: 0px 0px;\r\n  margin: 0px 0px;\r\n  border-style: solid;\r\n  border-width: 0px 0px 0px 20px;\r\n}\r\n\r\n.transit-viz {\r\n  position: relative;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: $thumbnailHeight;\r\n  background: url('assets/thumbnail.jpg') no-repeat;\r\n  background-size: cover;\r\n  pointer-events: none;\r\n}\r\n\r\n.map-container {\r\n  position: relative;\r\n  flex: 1;\r\n  pointer-events: auto;\r\n  background: url('assets/thumbnail.jpg') no-repeat;\r\n  background-color: #eee;\r\n  background-size: cover;\r\n  min-height: $thumbnailHeight;\r\n}\r\n\r\n.hide-thumbnail {\r\n  background: none;\r\n  z-index: 0;\r\n}\r\n\r\n.control-panel {\r\n  position: absolute;\r\n  bottom: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: 0.8rem;\r\n  margin: 0 0 0.5rem 0.5rem;\r\n  pointer-events: auto;\r\n  background-color: var(--bgPanel);\r\n  padding: 0.5rem 0.5rem;\r\n  filter: drop-shadow(0px 2px 4px #22222233);\r\n}\r\n\r\n.is-dashboard {\r\n  position: static;\r\n  margin: 0 0;\r\n  padding: 0.25rem 0 0 0;\r\n  filter: unset;\r\n  background-color: unset;\r\n}\r\n\r\n.legend {\r\n  background-color: var(--bgPanel);\r\n  padding: 0.25rem 0.5rem;\r\n  position: absolute;\r\n  bottom: 3.5rem;\r\n  right: 0.5rem;\r\n}\r\n\r\n.control-label {\r\n  margin: 0 0;\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.route {\r\n  padding: 5px 0px;\r\n  text-align: left;\r\n  color: var(--text);\r\n  border-left: solid 8px #00000000;\r\n  border-right: solid 8px #00000000;\r\n}\r\n\r\n.route:hover {\r\n  background-color: var(--bgCream3);\r\n  cursor: pointer;\r\n}\r\n\r\nh3 {\r\n  margin: 0px 0px;\r\n  font-size: 1.5rem;\r\n  line-height: 1.7rem;\r\n}\r\n\r\n.route-title {\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  line-height: 1.2rem;\r\n  margin-left: 10px;\r\n  color: var(--link);\r\n}\r\n\r\n.stopmarker {\r\n  width: 12px;\r\n  height: 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n.stop-marker-big {\r\n  background: url('assets/icon-stop-triangle.png') no-repeat;\r\n  background-size: 100%;\r\n  width: 16px;\r\n  height: 16px;\r\n}\r\n\r\n.highlightedRoute {\r\n  background-color: #faffae;\r\n  border-left: solid 8px #606aff;\r\n  color: black;\r\n}\r\n\r\n.highlightedRoute:hover {\r\n  background-color: #faffae;\r\n}\r\n\r\n.bigtitle {\r\n  font-weight: bold;\r\n  font-style: italic;\r\n  font-size: 20px;\r\n  margin: 20px 0px;\r\n}\r\n\r\n.info-header {\r\n  text-align: center;\r\n  background-color: #097c43;\r\n  padding: 0.5rem 0rem;\r\n  border-top: solid 1px #888;\r\n  border-bottom: solid 1px #888;\r\n}\r\n\r\n.project-summary-block {\r\n  width: 16rem;\r\n  grid-column: 1 / 2;\r\n  grid-row: 1 / 2;\r\n  margin: 0px auto auto 0px;\r\n  z-index: 10;\r\n}\r\n\r\n@keyframes slideInFromLeft {\r\n  from {\r\n    transform: translateX(-100%);\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n  }\r\n}\r\n\r\n.stop-marker {\r\n  position: absolute;\r\n  width: 12px;\r\n  height: 12px;\r\n  background: url('assets/icon-stop-triangle.png') no-repeat;\r\n  transform: translate(-50%, -50%);\r\n  background-size: 100%;\r\n  cursor: pointer;\r\n}\r\n\r\n.help-text {\r\n  color: #ccc;\r\n}\r\n\r\n.left-side {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  margin-bottom: auto;\r\n  margin-right: auto;\r\n  display: flex;\r\n  flex-direction: row;\r\n  pointer-events: auto;\r\n  max-height: 40%;\r\n  max-width: 80%;\r\n  opacity: 0.96;\r\n}\r\n\r\n.right-side {\r\n  z-index: 1;\r\n  position: absolute;\r\n  bottom: 3.75rem;\r\n  right: 0;\r\n  color: white;\r\n  display: flex;\r\n  flex-direction: row;\r\n  pointer-events: auto;\r\n}\r\n\r\n.panel-items {\r\n  color: var(--text);\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 0;\r\n  max-height: 100%;\r\n}\r\n\r\n.panel-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  h3 {\r\n    padding: 0.5rem 1rem 1.5rem 0.5rem;\r\n  }\r\n}\r\n\r\n.route-list {\r\n  user-select: none;\r\n  position: relative;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  cursor: pointer;\r\n  scrollbar-color: #888 var(--bgCream);\r\n  -webkit-scrollbar-color: #888 var(--bgCream);\r\n\r\n  h3 {\r\n    font-size: 1.2rem;\r\n  }\r\n}\r\n\r\n.dashboard-panel {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.metric-buttons {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.metric-button {\r\n  margin-right: 0.5rem;\r\n}\r\n\r\n.detailed-route-data {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.col {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.map-styles {\r\n  height: 100%;\r\n}\r\n\r\n.status-corner {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 15;\r\n  display: flex;\r\n  flex-direction: row;\r\n  background-color: var(--bgPanel);\r\n  padding: 0rem 3rem;\r\n\r\n  a {\r\n    color: white;\r\n    text-decoration: none;\r\n\r\n    &.router-link-exact-active {\r\n      color: white;\r\n    }\r\n  }\r\n\r\n  p {\r\n    color: var(--textFancy);\r\n    font-weight: normal;\r\n    font-size: 1.3rem;\r\n    line-height: 2.6rem;\r\n    margin: auto 0.5rem auto 0;\r\n    padding: 0 0;\r\n  }\r\n}\r\n</style>\r\n","\r\n.transit-viz(:class=\"{'hide-thumbnail': !thumbnail}\")\r\n  .map-container(:class=\"{'hide-thumbnail': !thumbnail }\")\r\n    div.map-styles(:id=\"mapID\")\r\n      .stop-marker(v-for=\"stop in stopMarkers\" :key=\"stop.i\"\r\n        :style=\"{transform: 'translate(-50%,-50%) rotate('+stop.bearing+'deg)', left: stop.xy.x + 'px', top: stop.xy.y+'px'}\"\r\n      )\r\n\r\n    legend-box.legend(v-if=\"!thumbnail\"\r\n      :rows=\"legendRows\"\r\n    )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\")\r\n  //- drawing-tool(v-if=\"!thumbnail\")\r\n\r\n  collapsible-panel.left-side(v-if=\"!thumbnail\"\r\n    :darkMode=\"isDarkMode\"\r\n    :locked=\"true\"\r\n    direction=\"left\")\r\n\r\n    .panel-items\r\n      //- .panel-item(v-if=\"vizDetails.title\")\r\n      //-   h3 {{ vizDetails.title }}\r\n      //-   p {{ vizDetails.description }}\r\n\r\n      .route-list(v-if=\"routesOnLink.length > 0\")\r\n        .route(v-for=\"route in routesOnLink\"\r\n            :key=\"route.uniqueRouteID\"\r\n            :class=\"{highlightedRoute: selectedRoute && route.id === selectedRoute.id}\"\r\n            @click=\"showRouteDetails(route.id)\")\r\n          .route-title {{route.id}}\r\n          .detailed-route-data\r\n            .col\r\n              p: b {{route.departures}} departures\r\n              p First: {{route.firstDeparture}}\r\n              p Last: {{route.lastDeparture}}\r\n            .col(v-if=\"route.passengersAtArrival\")\r\n              p: b {{ route.passengersAtArrival }} passengers\r\n              p {{ route.totalVehicleCapacity }} capacity\r\n\r\n  .control-panel(v-if=\"!thumbnail\"\r\n    :class=\"{'is-dashboard': config !== undefined }\"\r\n  )\r\n\r\n    .panel-item\r\n      p.control-label {{  $t('metrics') }}:\r\n      .metric-buttons\r\n        button.button.is-small.metric-button(\r\n          v-for=\"metric,i in metrics\" :key=\"metric.field\"\r\n          :style=\"{'color': activeMetric===metric.field ? 'white' : buttonColors[i], 'border': `1px solid ${buttonColors[i]}`, 'border-right': `0.4rem solid ${buttonColors[i]}`,'border-radius': '4px', 'background-color': activeMetric===metric.field ? buttonColors[i] : isDarkMode ? '#333':'white'}\"\r\n          @click=\"handleClickedMetric(metric)\") {{ $i18n.locale === 'de' ? metric.name_de : metric.name_en }}\r\n\r\n  .status-corner(v-if=\"!thumbnail && loadingText\")\r\n    p {{ loadingText }}\r\n\r\n"],"names":["__vue2_script$1","defineComponent","name","props","title","String","data","isHidden","isLeaving","methods","toggleHidePanel","this","setTimeout","_vm","_h","$createElement","_c","_self","attrs","id","staticClass","class","bye","staticStyle","padding","color","_v","_s","_e","_t","on","click","__vue2_script","rows","type","Array","required","_l","item","key","style","MyComponent","i18n","messages","en","metrics","viewer","de","components","CollapsiblePanel","LeftDataPanel","LegendBox","DrawingTool","ZoomButtons","root","subfolder","yamlConfig","config","Object","thumbnail","Boolean","field","name_en","name_de","mapPopup","Popup","closeButton","closeOnClick","buttonColors","activeMetric","vizDetails","transitSchedule","network","demand","projection","description","myState","isDarkMode","globalStore","state","isMapMoving","loadingText","mymap","mapID","Math","floor","random","routesOnLink","selectedRoute","stopMarkers","_attachedRouteLayers","_departures","_linkData","_mapExtentXYXY","_maximum","Infinity","_network","_routeData","_stopFacilities","_transitLines","_roadFetcher","_transitFetcher","_transitHelper","_transitLinks","_geoTransitLinks","resolvers","resolverId","xmlWorker","cfDemand","cfDemandLink","hoverWait","computed","fileApi","HTTPFileSystem","fileSystem","svnProject","$store","svnProjects","filter","a","slug","length","console","log","Error","legendRows","watch","resize","bearing","bearing2","longitude","latitude","zoom","pitch","off","handleMapMotion","jumpTo","center","showTransitStops","colorScheme","ColorScheme","DarkMode","removeAttachedRoutes","setStyle","getters","mapStyle","addTransitToMap","highlightAllAttachedRoutes","showTransitRoute","getVizDetails","assign","_a","endsWith","_b","loadYamlConfig","substring","indexOf","$emit","prepareView","files","getDirectory","replaceAll","allNetworks","f","demandFiles","guessProjection","networks","_d","roadXML","attributes","attribute","_f","_g","storagePath","outputConfigs","xmlConfigFileName","configXML","fetchXML","worker","filePath","crs","module","$name","param","p","$value","e","warn","entry","prompt","isNaN","parseInt","test","startsWith","networkProjection","localStorage","setItem","JSON","stringify","filename","text","getFileText","yaml","parse","err","needPassword","status","commit","msg","t","isMobile","w","window","d","document","documentElement","g","getElementsByTagName","x","innerWidth","clientWidth","innerHeight","clientHeight","setupMap","maplibregl","Map","container","logoPosition","extent","getItem","$route","fullPath","lnglat","mFac","top","bottom","right","left","fitBounds","animate","mapIsReady","handleEmptyClick","keyboard","disable","error","handleClickedMetric","metric","widthExpression","setPaintProperty","mapCamera","getCenter","lng","lat","getBearing","getZoom","getPitch","removeStopMarkers","removeSelectedRoute","showRouteDetails","routeID","loadNetworks","processInputs","setupKeyListeners","addEventListener","event","keyCode","pressedEscape","pressedArrowKey","onmessage","message","resolve","reject","terminate","xml","postMessage","options","Promise","roads","attributeNamePrefix","transit","alwaysArray","results","all","transitXML","ridership","loadDemandData","GzipWorker","csvData","TextDecoder","decode","Papa","header","skipEmptyLines","dynamicTyping","complete","processDemand","crossfilter","dimension","linkIdsSincePreviousStop","linkPassengersById","group","reduceSum","passengersAtArrival","map","link","value","capacity","totalVehicleCapacity","transitLink","features","properties","round","concat","getSource","setData","TransitSupplyWorker","async","buffer","receivedProcessedTransit","routeData","stopFacilities","transitLines","mapExtent","processDepartures","constructDepartureFrequencyGeoJson","hasOwnProperty","transitLine","route","transitRoutes","linkID","total","routes","Set","departures","add","max","geodata","addSource","addLayer","source","paint","clickedOnTransitLink","getCanvas","cursor","hoveredOnElement","remove","content","label","$i18n","locale","setLngLat","lngLat","setHTML","addTo","geojson","links","coordinates","nodes","from","y","to","ratio","colorBin","isRail","transportMode","line","geometry","_colorScale","offsetLineByMeters","push","sort","b","metersToTheRight","turf.lineOffset","units","mapBearing","i","stop","routeProfile","entries","coord","refId","point1","turf.point","point2","turf.bearing","xy","project","marker","getLayer","removeLayer","routeIDs","calculatePassengerVolumes","allLinks","allFiltered","sum","passengersBoarding","passengersAlighting","layerID","removeSource","delta","clearData","dispose","mounted","NewXmlFetcher","beforeDestroy","colormap","nshades","transform","darkMode","locked","direction","uniqueRouteID","highlightedRoute","$event","firstDeparture","lastDeparture","$t","border"],"mappings":"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"}