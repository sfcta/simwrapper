{"version":3,"file":"XyTime.ede197db.js","sources":["../../src/plugins/xy-time/ScatterplotColorBinsLayer.ts","../../src/plugins/xy-time/XyTimeDeckMap.tsx","../../src/plugins/xy-time/XyTime.vue","../../src/plugins/xy-time/XyTime.vue?vue&type=template&lang.js"],"sourcesContent":["import { ScatterplotLayer } from '@deck.gl/layers'\r\n\r\nexport default class ScatterplotColorBinsLayer extends ScatterplotLayer {\r\n  public initializeState(context: any) {\r\n    super.initializeState(context)\r\n\r\n    this.getAttributeManager().addInstanced({\r\n      instanceValue: {\r\n        accessor: 'getValue',\r\n        size: 1,\r\n        defaultValue: 0.0,\r\n        transition: true,\r\n      },\r\n    })\r\n  }\r\n\r\n  public getShaders() {\r\n    return {\r\n      ...super.getShaders(),\r\n      inject: {\r\n        'vs:#decl': `\r\n            #define MAX_COLORS 21\r\n            #define MAX_BREAKPOINTS 20\r\n            uniform int numBreakpoints;\r\n            uniform vec3 colors[MAX_COLORS];\r\n            uniform float breakpoints[MAX_BREAKPOINTS];\r\n            attribute float instanceValue;\r\n            `,\r\n        'vs:DECKGL_FILTER_COLOR': `\r\n            // geometry.pickingColor = instancePickingColors;\r\n            picking_setPickingColor(geometry.pickingColor);\r\n\r\n            int lastBreakpoint = numBreakpoints;\r\n\r\n            for(int i=0; i < MAX_BREAKPOINTS; ++i) {\r\n              if (instanceValue < breakpoints[i]) {\r\n                color = vec4(colors[i], 1.0);\r\n                return;\r\n              }\r\n              if (i == lastBreakpoint) {\r\n                color = vec4(colors[i], 1.0);\r\n                return;\r\n              }\r\n            }\r\n            color = vec4(1.0, 0.0, 0.0, 1.0);\r\n            return;\r\n          `,\r\n      },\r\n    }\r\n  }\r\n\r\n  // uniform cannot change size, so we pre-allocate the\r\n  // max storage for colors and breakpoints here.\r\n  private MAX_COLORS = 21\r\n  private uniformColors = new Array(this.MAX_COLORS * 3)\r\n  private uniformBreakpoints = new Array(this.MAX_COLORS - 1)\r\n\r\n  draw({ uniforms }: any) {\r\n    const { colors, breakpoints } = this.props\r\n\r\n    colors.map((c: number[], i: number) => {\r\n      this.uniformColors[i * 3] = c[0] / 256\r\n      this.uniformColors[i * 3 + 1] = c[1] / 256\r\n      this.uniformColors[i * 3 + 2] = c[2] / 256\r\n    })\r\n\r\n    breakpoints.map((c: number, i: number) => {\r\n      this.uniformBreakpoints[i] = c\r\n    })\r\n\r\n    const combinedUniforms = {\r\n      ...uniforms,\r\n      colors: this.uniformColors,\r\n      breakpoints: this.uniformBreakpoints,\r\n      numBreakpoints: breakpoints.length,\r\n    }\r\n\r\n    super.draw({\r\n      uniforms: combinedUniforms,\r\n    })\r\n  }\r\n}\r\n\r\nScatterplotColorBinsLayer.layerName = 'ScatterplotColorBinsLayer'\r\nScatterplotColorBinsLayer.defaultProps = {\r\n  colors: [\r\n    [128, 128, 128],\r\n    [128, 128, 128],\r\n  ],\r\n  breakpoints: [0.0],\r\n}\r\n","import React, { useState, useMemo, useEffect } from 'react'\r\nimport DeckGL from '@deck.gl/react'\r\nimport { StaticMap } from 'react-map-gl'\r\nimport { DataFilterExtension } from '@deck.gl/extensions'\r\nimport * as timeConvert from 'convert-seconds'\r\n\r\nimport { REACT_VIEW_HANDLES, MAPBOX_TOKEN } from '@/Globals'\r\nimport ScatterplotColorBinsLayer from '@/plugins/xy-time/ScatterplotColorBinsLayer'\r\nimport globalStore from '@/store'\r\n\r\nconst dataFilter = new DataFilterExtension({ filterSize: 1 })\r\n\r\nfunction convertSecondsToClockTimeMinutes(index: number) {\r\n  const seconds = index\r\n\r\n  try {\r\n    const hms = timeConvert(seconds)\r\n    const minutes = ('00' + hms.minutes).slice(-2)\r\n    return `${hms.hours}:${minutes}`\r\n  } catch (e) {\r\n    return '00:00'\r\n  }\r\n}\r\n\r\nconst INITIAL_VIEW = {\r\n  pitch: 0,\r\n  zoom: 11,\r\n  bearing: 0,\r\n  longitude: 13.38,\r\n  latitude: 52.5,\r\n}\r\n\r\n// -------------------------------------------------------------------\r\nexport default function Component({\r\n  viewId = 0,\r\n  pointLayers = [] as {\r\n    coordinates: Float32Array\r\n    time: Float32Array\r\n    color: Uint8Array\r\n    value: Float32Array\r\n    timeRange: number[]\r\n  }[],\r\n  timeFilter = [] as number[],\r\n  dark = false,\r\n  colors = [\r\n    [1, 0, 0],\r\n    [0.25, 0.25, 1],\r\n  ] as number[][],\r\n  breakpoints = [0.0] as number[],\r\n  radius = 5,\r\n  mapIsIndependent = false,\r\n}) {\r\n  // manage SimWrapper centralized viewState - for linked maps\r\n  const [viewState, setViewState] = useState(INITIAL_VIEW)\r\n\r\n  REACT_VIEW_HANDLES[viewId] = () => {\r\n    setViewState(globalStore.state.viewState)\r\n  }\r\n\r\n  function handleViewState(view: any) {\r\n    if (!view.latitude) return\r\n\r\n    if (!view.center) view.center = [0, 0]\r\n    view.center[0] = view.longitude\r\n    view.center[1] = view.latitude\r\n    setViewState(view)\r\n\r\n    if (!mapIsIndependent) globalStore.commit('setMapCamera', view)\r\n  }\r\n\r\n  function getTooltip(element: any) {\r\n    // console.log(element)\r\n    if (element.index < 0) return null\r\n\r\n    const layerId = element?.layer?.id\r\n    if (layerId === undefined) return null\r\n\r\n    const time = pointLayers[layerId].time[element.index]\r\n    const humanTime = convertSecondsToClockTimeMinutes(time)\r\n\r\n    const value = pointLayers[layerId].value[element.index]\r\n    const cleanValue = Math.round(1e6 * value) / 1e6\r\n    return {\r\n      html: `\\\r\n        <table style=\"font-size: 0.9rem\">\r\n        <tr>\r\n          <td>Value</td>\r\n          <td style=\"padding-left: 0.5rem;\"><b>${cleanValue}</b></td>\r\n        </tr><tr>\r\n          <td style=\"text-align: right;\">Time</td>\r\n          <td style=\"padding-left: 0.5rem;\"><b>${humanTime}</b></td>\r\n        </tr>\r\n        </table>\r\n      `,\r\n      style: dark\r\n        ? { color: '#ccc', backgroundColor: '#2a3c4f' }\r\n        : { color: '#223', backgroundColor: 'white' },\r\n    }\r\n  }\r\n\r\n  // add a scatterplotlayer for each set of points in pointLayers\r\n  const layers = pointLayers.map((points, layerIndex) => {\r\n    // The entire layer can be hidden if all of its points\r\n    // are beyond the timeFilter range that is being shown.\r\n    const outOfRange = points.timeRange[0] > timeFilter[1] || points.timeRange[1] < timeFilter[0]\r\n\r\n    //@ts-ignore\r\n    return new ScatterplotColorBinsLayer({\r\n      data: {\r\n        length: points.time.length,\r\n        attributes: {\r\n          getPosition: { value: points.coordinates, size: 2 },\r\n          getFilterValue: { value: points.time, size: 1 },\r\n          getValue: { value: points.value, size: 1 },\r\n        },\r\n      },\r\n      autoHighlight: true,\r\n      breakpoints: breakpoints,\r\n      colors: colors,\r\n      extensions: [dataFilter],\r\n      id: layerIndex,\r\n      filled: true,\r\n      filterRange: timeFilter.length ? timeFilter : null,\r\n      getRadius: radius, // 5 // (d: any) => Math.sqrt(d...),\r\n      // getFillColor: [10, 50, 10],\r\n      highlightColor: [255, 0, 224],\r\n      opacity: 1,\r\n      parameters: { depthTest: false },\r\n      pickable: true,\r\n      radiusScale: 1,\r\n      stroked: false,\r\n      updateTriggers: {\r\n        getPosition: pointLayers,\r\n        getFillColor: pointLayers,\r\n        getFilterValue: timeFilter,\r\n      },\r\n      // transitions: {\r\n      //   getFillColor: 500,\r\n      //   getColor: 500,\r\n      //   getValue: 500,\r\n      //   getFilterValue: 500,\r\n      // },\r\n      // hide layers that are entirely outside the time window filter:\r\n      visible: !outOfRange,\r\n    })\r\n  })\r\n\r\n  // initialViewState={initialViewState}\r\n  return (\r\n    <DeckGL\r\n      layers={layers}\r\n      controller={true}\r\n      useDevicePixels={true}\r\n      viewState={viewState}\r\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\r\n      pickingRadius={4}\r\n      onClick={getTooltip}\r\n      getTooltip={getTooltip}\r\n    >\r\n      {\r\n        /*\r\n        // @ts-ignore */\r\n        <StaticMap\r\n          mapStyle={globalStore.getters.mapStyle}\r\n          preventStyleDiffing={true}\r\n          mapboxApiAccessToken={MAPBOX_TOKEN}\r\n        />\r\n      }\r\n    </DeckGL>\r\n  )\r\n}\r\n","<template lang=\"pug\">\r\n.viz-plugin(:class=\"{'hide-thumbnail': !thumbnail}\" oncontextmenu=\"return false\" :id=\"`id-${viewId}`\")\r\n\r\n  xy-time-deck-map.map-layer(v-if=\"!thumbnail\"\r\n    :viewId=\"viewId\"\r\n    :pointLayers=\"pointLayers\"\r\n    :timeFilter=\"timeFilter\"\r\n    :dark=\"this.$store.state.isDarkMode\"\r\n    :colors=\"this.colors\"\r\n    :breakpoints=\"this.breakpoints\"\r\n    :radius=\"this.guiConfig.radius\"\r\n    :mapIsIndependent=\"false\"\r\n  )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\" corner=\"bottom\")\r\n\r\n  .top-right\r\n    .gui-config(:id=\"configId\")\r\n\r\n  .bottom-right\r\n    .legend-area(v-if=\"legendStore\")\r\n      legend-box(:legendStore=\"legendStore\")\r\n\r\n  time-slider.time-slider-area(v-if=\"isLoaded\"\r\n    :range=\"timeRange\"\r\n    :activeTimeExtent=\"timeFilter\"\r\n    :labels=\"timeLabels\"\r\n    :isAnimating=\"isAnimating\"\r\n    @timeExtent=\"handleTimeSliderValues\"\r\n    @toggleAnimation=\"toggleAnimation\"\r\n    @drag=\"isAnimating=false\"\r\n  )\r\n\r\n  .message(v-if=\"!thumbnail && myState.statusMessage\")\r\n    p.status-message {{ myState.statusMessage }}\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {\r\n      loading: 'Loading data...',\r\n      sorting: 'Sorting into bins...',\r\n      aggregate: 'Summary',\r\n      maxHeight: '3D Height',\r\n      showDetails: 'Show Details',\r\n      selection: 'Selection',\r\n      areas: 'Areas',\r\n      count: 'Count',\r\n      promptCRS: `Enter the coordinate reference system, e.g. EPSG:25832\\n\\nThese coordinates are not in long/lat format. To fix this permanently, convert them to long/lat or add \"# EPSG:xxxx\" to your CSV header`,\r\n    },\r\n    de: {\r\n      loading: 'Dateien laden...',\r\n      sorting: 'Sortieren...',\r\n      aggregate: 'Daten',\r\n      maxHeight: '3-D Höhe',\r\n      showDetails: 'Details anzeigen',\r\n      selection: 'Ausgewählt',\r\n      areas: 'Orte',\r\n      count: 'Anzahl',\r\n    },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\n\r\nimport GUI from 'lil-gui'\r\nimport YAML from 'yaml'\r\nimport colormap from 'colormap'\r\n\r\nimport util from '@/js/util'\r\nimport globalStore from '@/store'\r\nimport CollapsiblePanel from '@/components/CollapsiblePanel.vue'\r\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport LegendBox from '@/components/viz-configurator/LegendBox.vue'\r\nimport LegendStore from '@/js/LegendStore'\r\nimport TimeSlider from '@/components/TimeSlider.vue'\r\nimport XyTimeDeckMap from './XyTimeDeckMap'\r\nimport XytDataParser from './XytDataParser.worker.ts?worker'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\n\r\nimport {\r\n  ColorScheme,\r\n  FileSystem,\r\n  LegendItem,\r\n  LegendItemType,\r\n  FileSystemConfig,\r\n  VisualizationPlugin,\r\n  Status,\r\n  REACT_VIEW_HANDLES,\r\n} from '@/Globals'\r\n\r\ninterface VizDetail {\r\n  title: string\r\n  description?: string\r\n  file: string\r\n  projection: any\r\n  thumbnail?: string\r\n  center: any\r\n  zoom: number\r\n  buckets: number\r\n  clipMax: number\r\n  exponent: number\r\n  radius: number\r\n  colorRamp: string\r\n  breakpoints: string\r\n}\r\n\r\ninterface PointLayer {\r\n  color: Uint8Array\r\n  value: Float32Array\r\n  coordinates: Float32Array\r\n  time: Float32Array\r\n  timeRange: number[]\r\n}\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'XYTime',\r\n  i18n,\r\n  components: {\r\n    CollapsiblePanel,\r\n    DrawingTool,\r\n    LegendBox,\r\n    TimeSlider,\r\n    ZoomButtons,\r\n    XyTimeDeckMap,\r\n  },\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    yamlConfig: String,\r\n    config: Object,\r\n    thumbnail: Boolean,\r\n  },\r\n  data: () => {\r\n    return {\r\n      guiConfig: {\r\n        buckets: 7,\r\n        exponent: 4,\r\n        radius: 5,\r\n        'clip max': 100,\r\n        'color ramp': 'viridis',\r\n        colorRamps: ['bathymetry', 'electric', 'inferno', 'jet', 'magma', 'par', 'viridis'],\r\n        flip: false,\r\n        'manual breaks': '',\r\n      },\r\n      viewId: `xyt-id-${Math.floor(1e12 * Math.random())}` as any,\r\n      configId: `gui-config-${Math.floor(1e12 * Math.random())}` as any,\r\n      timeLabels: [0, 1] as any[],\r\n      startTime: 0,\r\n      isAnimating: false,\r\n      timeFilter: [0, 3599],\r\n      colors: [\r\n        [128, 128, 128],\r\n        [128, 128, 128],\r\n      ] as number[][],\r\n      breakpoints: [0.0],\r\n      range: [Infinity, -Infinity],\r\n      timeRange: [Infinity, -Infinity],\r\n      legendStore: null as LegendStore | null,\r\n      standaloneYAMLconfig: {\r\n        title: '',\r\n        description: '',\r\n        file: '',\r\n        projection: '',\r\n        thumbnail: '',\r\n        radius: 250,\r\n        maxHeight: 0,\r\n        center: null as any,\r\n        zoom: 9,\r\n      },\r\n      YAMLrequirementsXY: { file: '' },\r\n      columnLookup: [] as number[],\r\n      gzipWorker: null as Worker | null,\r\n      vizDetails: {\r\n        title: '',\r\n        description: '',\r\n        file: '',\r\n        projection: '',\r\n        thumbnail: '',\r\n        center: null as any,\r\n        zoom: 9,\r\n        // x-y-t details:\r\n        buckets: 5,\r\n        exponent: 4,\r\n        clipMax: 100,\r\n        radius: 5,\r\n        colorRamp: 'viridis',\r\n        flip: false,\r\n        breakpoints: '',\r\n      } as VizDetail,\r\n      myState: {\r\n        statusMessage: '',\r\n        subfolder: '',\r\n        yamlConfig: '',\r\n        thumbnail: false,\r\n      },\r\n      pointLayers: [] as PointLayer[],\r\n      isLoaded: false,\r\n      animator: null as any,\r\n      guiController: null as GUI | null,\r\n      resizer: null as ResizeObserver | null,\r\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\r\n      ANIMATE_SPEED: 4,\r\n      animationElapsedTime: 0,\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.$store.commit('setFullScreen', !this.thumbnail)\r\n    this.myState.thumbnail = this.thumbnail\r\n    this.myState.yamlConfig = this.yamlConfig || ''\r\n    this.myState.subfolder = this.subfolder\r\n\r\n    await this.getVizDetails()\r\n    await this.buildThumbnail()\r\n\r\n    if (this.thumbnail) return\r\n\r\n    this.setupLogoMover()\r\n\r\n    // ----------------------------------------------------\r\n    this.setupGui()\r\n    this.myState.statusMessage = `${this.$i18n.t('loading')}`\r\n\r\n    if (!this.isLoaded) await this.loadFiles()\r\n  },\r\n  beforeDestroy() {\r\n    // MUST erase the React view handle to prevent gigantic memory leak!\r\n    REACT_VIEW_HANDLES[this.viewId] = undefined\r\n    delete REACT_VIEW_HANDLES[this.viewId]\r\n\r\n    try {\r\n      if (this.gzipWorker) {\r\n        this.gzipWorker.postMessage({ terminate: true })\r\n        this.gzipWorker.terminate()\r\n      }\r\n      if (this.guiController) this.guiController.destroy()\r\n    } catch (e) {\r\n      console.warn(e)\r\n    }\r\n\r\n    if (this.animator) window.cancelAnimationFrame(this.animator)\r\n\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    urlThumbnail(): any {\r\n      return this.thumbnailUrl\r\n    },\r\n  },\r\n  watch: {\r\n    '$store.state.viewState'() {\r\n      if (REACT_VIEW_HANDLES[this.viewId]) REACT_VIEW_HANDLES[this.viewId]()\r\n    },\r\n  },\r\n  methods: {\r\n    handleTimeSliderValues(timeValues: any[]) {\r\n      this.animationElapsedTime = timeValues[0]\r\n      this.timeFilter = timeValues\r\n      this.timeLabels = [\r\n        this.convertSecondsToClockTimeMinutes(timeValues[0]),\r\n        this.convertSecondsToClockTimeMinutes(timeValues[1]),\r\n      ]\r\n    },\r\n\r\n    setupLogoMover() {\r\n      this.resizer = new ResizeObserver(this.moveLogo)\r\n      const deckmap = document.getElementById(`id-${this.viewId}`) as HTMLElement\r\n      this.resizer.observe(deckmap)\r\n    },\r\n\r\n    moveLogo() {\r\n      const deckmap = document.getElementById(`${this.viewId}`) as HTMLElement\r\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\r\n      if (logo) {\r\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\r\n        logo.style.right = right\r\n      }\r\n    },\r\n\r\n    setupGui() {\r\n      this.guiController = new GUI({\r\n        title: 'Settings',\r\n        injectStyles: true,\r\n        width: 200,\r\n        container: document.getElementById(this.configId) || undefined,\r\n      })\r\n\r\n      const config = this.guiController // .addFolder('Colors')\r\n      config.add(this.guiConfig, 'radius', 1, 20, 1)\r\n\r\n      const colors = config.addFolder('colors')\r\n      colors.add(this.guiConfig, 'color ramp', this.guiConfig.colorRamps).onChange(this.setColors)\r\n      colors.add(this.guiConfig, 'flip').onChange(this.setColors)\r\n\r\n      const breakpoints = config.addFolder('breakpoints')\r\n      breakpoints.add(this.guiConfig, 'buckets', 2, 19, 1).onChange(this.setColors)\r\n      breakpoints.add(this.guiConfig, 'clip max', 0, 100, 1).onChange(this.setColors)\r\n      breakpoints.add(this.guiConfig, 'exponent', 1, 10, 1).onChange(this.setColors)\r\n      breakpoints.add(this.guiConfig, 'manual breaks').onChange(this.setColors)\r\n\r\n      // const times = this.guiController.addFolder('Time')\r\n    },\r\n    async solveProjection() {\r\n      if (this.thumbnail) return\r\n\r\n      console.log('WHAT PROJECTION:')\r\n\r\n      try {\r\n        const text = await this.fileApi.getFileText(\r\n          this.myState.subfolder + '/' + this.myState.yamlConfig\r\n        )\r\n        this.vizDetails = YAML.parse(text)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    },\r\n\r\n    async getVizDetails() {\r\n      if (this.config) {\r\n        this.validateYAML()\r\n        this.vizDetails = Object.assign({}, this.config) as VizDetail\r\n        return\r\n      }\r\n\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n\r\n      if (hasYaml) {\r\n        await this.loadStandaloneYAMLConfig()\r\n      } else {\r\n        // console.log('NO YAML WTF')\r\n        this.setConfigForRawCSV()\r\n      }\r\n    },\r\n\r\n    setConfigForRawCSV() {\r\n      let projection = 'EPSG:4326' // Include \"# EPSG:xxx\" in header of CSV to set EPSG\r\n\r\n      // output_trips:\r\n      this.vizDetails = Object.assign(this.vizDetails, {\r\n        title: 'Point Data: ' + this.myState.yamlConfig,\r\n        description: this.myState.yamlConfig,\r\n        file: this.myState.yamlConfig,\r\n        projection,\r\n        center: this.vizDetails.center,\r\n        zoom: this.vizDetails.zoom,\r\n      })\r\n\r\n      this.$emit('title', this.vizDetails.title || this.vizDetails.file)\r\n      return\r\n    },\r\n\r\n    async loadStandaloneYAMLConfig() {\r\n      try {\r\n        // might be a project config:\r\n        const filename =\r\n          this.myState.yamlConfig.indexOf('/') > -1\r\n            ? this.myState.yamlConfig\r\n            : this.myState.subfolder + '/' + this.myState.yamlConfig\r\n\r\n        const text = await this.fileApi.getFileText(filename)\r\n        this.standaloneYAMLconfig = Object.assign({}, YAML.parse(text))\r\n        this.validateYAML()\r\n        this.setVizDetails()\r\n      } catch (err) {\r\n        const e = err as any\r\n        console.log('failed')\r\n\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg: `File not found`,\r\n          desc: `Could not find: ${this.myState.subfolder}/${this.myState.yamlConfig}`,\r\n        })\r\n      }\r\n    },\r\n\r\n    validateYAML() {\r\n      const hasYaml = new RegExp('.*(yml|yaml)$').test(this.myState.yamlConfig)\r\n      let configuration = {} as any\r\n\r\n      if (hasYaml) {\r\n        console.log('has yaml')\r\n        configuration = this.standaloneYAMLconfig\r\n      } else {\r\n        console.log('no yaml')\r\n        configuration = this.config\r\n      }\r\n\r\n      for (const key in this.YAMLrequirementsXY) {\r\n        if (key in configuration === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n\r\n      if (configuration.radius == 0) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Radius set to zero`,\r\n          desc: 'Radius can not be zero, preset value used instead. ',\r\n        })\r\n      }\r\n\r\n      if (configuration.zoom < 5 || configuration.zoom > 20) {\r\n        this.$store.commit('setStatus', {\r\n          type: Status.WARNING,\r\n          msg: `Zoom is out of the recommended range `,\r\n          desc: 'Zoom levels should be between 5 and 20. ',\r\n        })\r\n      }\r\n    },\r\n\r\n    setVizDetails() {\r\n      this.vizDetails = Object.assign({}, this.vizDetails, this.standaloneYAMLconfig)\r\n\r\n      const t = this.vizDetails.title\r\n        ? this.vizDetails.title\r\n        : 'Point Data: ' + this.vizDetails.file\r\n      this.$emit('title', t)\r\n\r\n      if (this.vizDetails.buckets) this.guiConfig.buckets = this.vizDetails.buckets\r\n      if (this.vizDetails.exponent) this.guiConfig.exponent = this.vizDetails.exponent\r\n      if (this.vizDetails.radius) this.guiConfig.radius = this.vizDetails.radius\r\n      if (this.vizDetails.clipMax) this.guiConfig['clip max'] = this.vizDetails.clipMax\r\n      if (this.vizDetails.colorRamp) this.guiConfig['color ramp'] = this.vizDetails.colorRamp\r\n      if (this.vizDetails.breakpoints) this.guiConfig['manual breaks'] = this.vizDetails.breakpoints\r\n    },\r\n\r\n    setManualBreakpoints() {\r\n      const breakpoints = this.guiConfig['manual breaks'].split(',').map(b => {\r\n        return Number.parseFloat(b.trim())\r\n      })\r\n      this.breakpoints = breakpoints\r\n      this.guiConfig.buckets = 1 + breakpoints.length\r\n    },\r\n\r\n    async buildThumbnail() {\r\n      if (this.thumbnail && this.vizDetails.thumbnail) {\r\n        try {\r\n          const blob = await this.fileApi.getFileBlob(\r\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\r\n          )\r\n          const buffer = await blob.arrayBuffer()\r\n          const base64 = util.arrayBufferToBase64(buffer)\r\n          if (base64)\r\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      }\r\n    },\r\n\r\n    async parseCSVFile(filename: string) {\r\n      this.myState.statusMessage = 'Loading file...'\r\n\r\n      let totalRows = 0\r\n      // get the raw unzipped arraybuffer\r\n      this.gzipWorker = new XytDataParser()\r\n\r\n      this.gzipWorker.onmessage = async (event: MessageEvent) => {\r\n        if (event.data.status) {\r\n          this.myState.statusMessage = event.data.status\r\n        } else if (event.data.error) {\r\n          this.myState.statusMessage = event.data.error\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `XYT Loading Error`,\r\n            desc: `Error loading: ${this.myState.subfolder}/${this.vizDetails.file}`,\r\n          })\r\n        } else if (event.data.finished) {\r\n          this.finishedLoadingData(totalRows, event.data)\r\n        } else if (event.data.needCRS) {\r\n          if (this.gzipWorker) this.gzipWorker.terminate()\r\n          let userCRS = prompt('' + this.$t('promptCRS')) || 'EPSG:25833'\r\n          if (Number.isFinite(parseInt(userCRS))) userCRS = `EPSG:${userCRS}`\r\n          this.vizDetails.projection = userCRS.toUpperCase()\r\n          this.parseCSVFile(filename)\r\n        } else {\r\n          const rows = event.data.time.length\r\n          // zoom map on first load\r\n          if (!totalRows) this.setFirstZoom(event.data.coordinates, rows)\r\n          // save layer data\r\n          totalRows += rows\r\n          this.timeRange = [\r\n            Math.min(this.timeRange[0], event.data.time[0]),\r\n            Math.max(this.timeRange[1], event.data.time[rows - 1]),\r\n          ]\r\n          this.pointLayers.push(event.data)\r\n        }\r\n      }\r\n\r\n      this.gzipWorker.postMessage({\r\n        filepath: filename,\r\n        fileSystem: this.fileSystem,\r\n        projection: this.vizDetails.projection,\r\n      })\r\n    },\r\n\r\n    setFirstZoom(coordinates: any[], rows: number) {\r\n      const longitude = 0.5 * (coordinates[0] + coordinates[rows * 2 - 2])\r\n      const latitude = 0.5 * (coordinates[1] + coordinates[rows * 2 - 1])\r\n\r\n      if (Number.isFinite(longitude) && Number.isFinite(latitude)) {\r\n        globalStore.commit(\r\n          'setMapCamera',\r\n          Object.assign({}, globalStore.state.viewState, { longitude, latitude, zoom: 10 })\r\n        )\r\n      }\r\n    },\r\n\r\n    finishedLoadingData(totalRows: number, data: any) {\r\n      console.log('ALL DONE', { totalRows, data: data.range, time: this.timeRange })\r\n      this.myState.statusMessage = ''\r\n      this.timeFilter = [this.timeRange[0], this.timeRange[0] + 3599]\r\n      this.isLoaded = true\r\n      this.range = data.range\r\n      // if (!this.timeRange[1]) this.timeRange[1] = 1\r\n      if (this.gzipWorker) this.gzipWorker.terminate()\r\n\r\n      this.setColors()\r\n      this.moveLogo()\r\n    },\r\n\r\n    animate() {\r\n      if (!this.isAnimating) return\r\n\r\n      this.animationElapsedTime = this.ANIMATE_SPEED * (Date.now() - this.startTime)\r\n      const animationClockTime = this.animationElapsedTime + this.timeRange[0]\r\n\r\n      if (animationClockTime > this.timeRange[1]) {\r\n        this.startTime = Date.now()\r\n        this.animationElapsedTime = 0 // this.timeRange[0]\r\n      }\r\n\r\n      const span = this.timeFilter[1] - this.timeFilter[0]\r\n      this.timeFilter = [animationClockTime, animationClockTime + span]\r\n\r\n      this.animator = window.requestAnimationFrame(this.animate)\r\n    },\r\n\r\n    toggleAnimation() {\r\n      this.isAnimating = !this.isAnimating\r\n      if (this.isAnimating) {\r\n        this.animationElapsedTime = this.timeFilter[0] - this.timeRange[0]\r\n        this.startTime = Date.now() - this.animationElapsedTime / this.ANIMATE_SPEED\r\n        this.animate()\r\n      }\r\n    },\r\n\r\n    setColors() {\r\n      const EXPONENT = this.guiConfig.exponent // powerFunction // 4 // log-e? not steep enough\r\n\r\n      let colors256 = colormap({\r\n        colormap: this.guiConfig['color ramp'],\r\n        nshades: 256,\r\n        format: 'rba',\r\n        alpha: 1,\r\n      }).map((c: number[]) => [c[0], c[1], c[2]])\r\n\r\n      if (this.guiConfig.flip) colors256 = colors256.reverse()\r\n\r\n      const step = 256 / (this.guiConfig.buckets - 1)\r\n      const colors = []\r\n      for (let i = 0; i < this.guiConfig.buckets - 1; i++) {\r\n        colors.push(colors256[Math.round(step * i)])\r\n      }\r\n      colors.push(colors256[255])\r\n\r\n      this.colors = colors\r\n\r\n      // figure out min and max\r\n      const max1 = Math.pow(this.range[1], 1 / EXPONENT)\r\n      const max2 = (max1 * this.guiConfig['clip max']) / 100.0\r\n      // const clippedMin = (this.range[1] * this.clipData[0]) / 100.0\r\n      // console.log({ max1, max2 })\r\n\r\n      // generate some breakpoints if user didn't supply them\r\n      if (this.guiConfig['manual breaks']) {\r\n        this.setManualBreakpoints()\r\n      } else {\r\n        if (!this.vizDetails.breakpoints) {\r\n          const breakpoints = [] as number[]\r\n          for (let i = 1; i < this.guiConfig.buckets; i++) {\r\n            const raw = (max2 * i) / this.guiConfig.buckets\r\n            const breakpoint = Math.pow(raw, EXPONENT)\r\n            breakpoints.push(breakpoint)\r\n          }\r\n\r\n          this.breakpoints = breakpoints\r\n        }\r\n      }\r\n\r\n      // only update legend if we have the full dataset already\r\n      if (this.isLoaded) this.setLegend(colors, this.breakpoints)\r\n    },\r\n\r\n    setLegend(colors: any[], breakpoints: number[]) {\r\n      // hide the legend if there is no data to show.\r\n      if (this.range[1] - this.range[0] === 0) return\r\n\r\n      this.legendStore = new LegendStore()\r\n      this.legendStore.setLegendSection({\r\n        section: 'Legend',\r\n        column: 'Legend',\r\n        values: colors.map((rgb, index) => {\r\n          const breakpoint = breakpoints[index == 0 ? index : index - 1]\r\n          let label = '' + Math.round(1e6 * breakpoint) / 1e6\r\n          if (index == 0) label = '< ' + label\r\n          if (index == colors.length - 1) label = '> ' + label\r\n          return { label, value: rgb }\r\n        }),\r\n      })\r\n    },\r\n\r\n    async loadFiles() {\r\n      await this.fileApi.getChromePermission(this.fileSystem.handle)\r\n\r\n      try {\r\n        let filename = `${this.myState.subfolder}/${this.vizDetails.file}`\r\n        await this.parseCSVFile(filename)\r\n        this.$emit('isLoaded')\r\n      } catch (e) {\r\n        console.error(e)\r\n        this.myState.statusMessage = '' + e\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg: `Loading/Parsing Error`,\r\n          desc: 'Error loading/parsing: ${this.myState.subfolder}/${this.vizDetails.file}',\r\n        })\r\n      }\r\n    },\r\n\r\n    convertSecondsToClockTimeMinutes(index: number) {\r\n      const h = Math.floor(index / 3600)\r\n      const m = Math.floor((index - h * 3600) / 60)\r\n      const s = index - h * 3600 - m * 60\r\n\r\n      const hms = { h: `${h}`, m: `${m}`.padStart(2, '0'), s: `${s}`.padStart(2, '0') }\r\n\r\n      return `${hms.h}:${hms.m}`\r\n    },\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.viz-plugin {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: $thumbnailHeight;\r\n  background: url('assets/thumbnail.jpg') center / cover no-repeat;\r\n  z-index: -1;\r\n}\r\n\r\n.viz-plugin.hide-thumbnail {\r\n  background: none;\r\n  z-index: 0;\r\n}\r\n\r\n.message {\r\n  z-index: 5;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  box-shadow: 0px 2px 10px #22222222;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: auto auto 0 0;\r\n  background-color: var(--bgPanel);\r\n  padding: 0.5rem 1.5rem;\r\n\r\n  a {\r\n    color: white;\r\n    text-decoration: none;\r\n\r\n    &.router-link-exact-active {\r\n      color: white;\r\n    }\r\n  }\r\n\r\n  p {\r\n    color: var(--textFancy);\r\n    font-size: 1.2rem;\r\n    font-weight: normal;\r\n    line-height: 1.75rem;\r\n    margin: auto 0.5rem auto 0;\r\n    padding: 0 0;\r\n  }\r\n}\r\n\r\n.map-layer {\r\n  pointer-events: auto;\r\n}\r\n\r\n.drawing-tool {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.bottom-right {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  margin: auto 7px 15rem auto;\r\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\r\n}\r\n\r\n.legend-area {\r\n  background-color: var(--bgPanel);\r\n  border: 1px solid var(--bgPanel2);\r\n}\r\n\r\n.time-slider-area {\r\n  position: absolute;\r\n  bottom: 2.5rem;\r\n  left: 0;\r\n  right: 0;\r\n  margin: 0 8rem 0 0.5rem;\r\n  filter: $filterShadow;\r\n}\r\n\r\n.buckets {\r\n  color: var(--text);\r\n  padding: 4px 4px 4px 4px;\r\n  display: flex;\r\n}\r\n\r\n.ramp-selector {\r\n  background-color: var(--bgBold);\r\n}\r\n\r\n.configurator {\r\n  user-select: none;\r\n  background-color: var(--bgPanel);\r\n  margin-top: 2rem;\r\n}\r\n\r\n.clip-slider {\r\n  margin: 0 0.5rem;\r\n}\r\n\r\n.top-right {\r\n  background-color: var(--bgPanel2);\r\n  color: white;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: 5;\r\n  border-left: 1px solid #66669940;\r\n  border-bottom: 1px solid #66669940;\r\n  box-shadow: 0px 0px 5px 3px rgba(128, 128, 128, 0.1);\r\n}\r\n\r\n* > .number {\r\n  background-color: yellow;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n  .message {\r\n    padding: 0.5rem 0.5rem;\r\n  }\r\n}\r\n</style>\r\n","\r\n.viz-plugin(:class=\"{'hide-thumbnail': !thumbnail}\" oncontextmenu=\"return false\" :id=\"`id-${viewId}`\")\r\n\r\n  xy-time-deck-map.map-layer(v-if=\"!thumbnail\"\r\n    :viewId=\"viewId\"\r\n    :pointLayers=\"pointLayers\"\r\n    :timeFilter=\"timeFilter\"\r\n    :dark=\"this.$store.state.isDarkMode\"\r\n    :colors=\"this.colors\"\r\n    :breakpoints=\"this.breakpoints\"\r\n    :radius=\"this.guiConfig.radius\"\r\n    :mapIsIndependent=\"false\"\r\n  )\r\n\r\n  zoom-buttons(v-if=\"!thumbnail\" corner=\"bottom\")\r\n\r\n  .top-right\r\n    .gui-config(:id=\"configId\")\r\n\r\n  .bottom-right\r\n    .legend-area(v-if=\"legendStore\")\r\n      legend-box(:legendStore=\"legendStore\")\r\n\r\n  time-slider.time-slider-area(v-if=\"isLoaded\"\r\n    :range=\"timeRange\"\r\n    :activeTimeExtent=\"timeFilter\"\r\n    :labels=\"timeLabels\"\r\n    :isAnimating=\"isAnimating\"\r\n    @timeExtent=\"handleTimeSliderValues\"\r\n    @toggleAnimation=\"toggleAnimation\"\r\n    @drag=\"isAnimating=false\"\r\n  )\r\n\r\n  .message(v-if=\"!thumbnail && myState.statusMessage\")\r\n    p.status-message {{ myState.statusMessage }}\r\n\r\n"],"names":["ScatterplotColorBinsLayer","ScatterplotLayer","constructor","super","arguments","__publicField","this","Array","MAX_COLORS","initializeState","context","getAttributeManager","addInstanced","instanceValue","accessor","size","defaultValue","transition","getShaders","__spreadProps","__spreadValues","inject","draw","uniforms","colors","breakpoints","props","map","c","i","uniformColors","uniformBreakpoints","combinedUniforms","numBreakpoints","length","layerName","defaultProps","dataFilter","DataFilterExtension","filterSize","INITIAL_VIEW","pitch","zoom","bearing","longitude","latitude","MyComponent","defineComponent","name","i18n","messages","en","loading","sorting","aggregate","maxHeight","showDetails","selection","areas","count","promptCRS","de","components","CollapsiblePanel","DrawingTool","LegendBox","TimeSlider","ZoomButtons","XyTimeDeckMap","viewId","pointLayers","timeFilter","dark","radius","mapIsIndependent","viewState","setViewState","useState","exports","getTooltip","element","index","layerId","layer","id","humanTime","seconds","hms","timeConvert","minutes","slice","hours","e","convertSecondsToClockTimeMinutes","time","value","html","Math","round","style","color","backgroundColor","REACT_VIEW_HANDLES","globalStore","state","layers","points","layerIndex","outOfRange","timeRange","data","attributes","getPosition","coordinates","getFilterValue","getValue","autoHighlight","extensions","filled","filterRange","getRadius","highlightColor","opacity","parameters","depthTest","pickable","radiusScale","stroked","updateTriggers","getFillColor","visible","DeckGL","controller","useDevicePixels","onViewStateChange","handleViewState","view","center","commit","pickingRadius","onClick","StaticMap","mapStyle","getters","preventStyleDiffing","mapboxApiAccessToken","MAPBOX_TOKEN","root","type","String","required","subfolder","yamlConfig","config","Object","thumbnail","Boolean","guiConfig","buckets","exponent","colorRamps","flip","floor","random","configId","timeLabels","startTime","isAnimating","range","Infinity","legendStore","standaloneYAMLconfig","title","description","file","projection","YAMLrequirementsXY","columnLookup","gzipWorker","vizDetails","clipMax","colorRamp","myState","statusMessage","isLoaded","animator","guiController","resizer","thumbnailUrl","ANIMATE_SPEED","animationElapsedTime","mounted","$store","getVizDetails","buildThumbnail","setupLogoMover","setupGui","$i18n","t","loadFiles","beforeDestroy","postMessage","terminate","destroy","console","warn","window","cancelAnimationFrame","computed","fileApi","HTTPFileSystem","fileSystem","svnProject","svnProjects","filter","a","slug","log","Error","urlThumbnail","watch","methods","handleTimeSliderValues","timeValues","ResizeObserver","moveLogo","deckmap","document","getElementById","observe","logo","querySelector","right","clientWidth","GUI","injectStyles","width","container","add","addFolder","onChange","setColors","solveProjection","text","getFileText","YAML","parse","error","validateYAML","assign","RegExp","test","loadStandaloneYAMLConfig","setConfigForRawCSV","$emit","filename","indexOf","setVizDetails","err","Status","ERROR","msg","desc","configuration","key","WARNING","setManualBreakpoints","split","b","Number","parseFloat","trim","blob","getFileBlob","buffer","arrayBuffer","base64","util","arrayBufferToBase64","parseCSVFile","totalRows","XytDataParser","onmessage","async","event","status","finished","finishedLoadingData","needCRS","userCRS","prompt","$t","isFinite","parseInt","toUpperCase","rows","setFirstZoom","min","max","push","filepath","animate","Date","now","animationClockTime","span","requestAnimationFrame","toggleAnimation","EXPONENT","colors256","colormap","nshades","format","alpha","reverse","step","max2","pow","raw","breakpoint","setLegend","LegendStore","setLegendSection","section","column","values","rgb","label","getChromePermission","handle","h","m","s","padStart","_vm","_h","$createElement","_c","_self","staticClass","class","attrs","oncontextmenu","_e","isDarkMode","corner","activeTimeExtent","labels","on","timeExtent","drag","$event","_v","_s"],"mappings":"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"}