{"version":3,"file":"defaultLocale.52699303.js","sources":["../../node_modules/d3-format/src/formatDecimal.js","../../node_modules/d3-format/src/exponent.js","../../node_modules/d3-format/src/formatSpecifier.js","../../node_modules/d3-format/src/formatPrefixAuto.js","../../node_modules/d3-format/src/formatRounded.js","../../node_modules/d3-format/src/formatTypes.js","../../node_modules/d3-format/src/identity.js","../../node_modules/d3-format/src/locale.js","../../node_modules/d3-format/src/defaultLocale.js","../../node_modules/d3-format/src/formatGroup.js","../../node_modules/d3-format/src/formatNumerals.js","../../node_modules/d3-format/src/formatTrim.js"],"sourcesContent":["export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": formatDecimal,\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"],\n  minus: \"-\"\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n"],"names":["formatDecimalParts","x","p","i","toExponential","indexOf","coefficient","slice","length","exponent","Math","abs","NaN","prefixExponent","re","formatSpecifier","specifier","match","exec","Error","FormatSpecifier","fill","align","sign","symbol","zero","width","comma","precision","trim","type","this","formatRounded","d","exponent2","Array","join","prototype","toString","max","formatTypes","toFixed","b","round","c","toLocaleString","replace","e","f","g","toPrecision","o","r","s","min","floor","n","X","toUpperCase","identity","locale","format","formatPrefix","map","prefixes","formatLocale","locale2","grouping","thousands","group","call","Number","value","t","j","push","substring","reverse","currencyPrefix","currency","currencySuffix","decimal","numerals","formatNumerals","String","percent","minus","nan","newFormat","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","format2","valuePrefix","valueSuffix","valueNegative","isNaN","out","i1","i0","formatTrim","charCodeAt","Infinity","padding","k","pow","value2"],"mappings":"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"}