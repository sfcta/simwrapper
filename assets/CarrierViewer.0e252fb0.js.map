{"version":3,"file":"CarrierViewer.0e252fb0.js","sources":["../../node_modules/@deck.gl/extensions/dist/esm/path-style/shaders.glsl.js","../../node_modules/@deck.gl/extensions/dist/esm/path-style/path-style.js","../../node_modules/javascript-natural-sort/naturalSort.js","../../src/plugins/carrier-viewer/TourViz.tsx","../../src/plugins/carrier-viewer/CarrierViewer.vue","../../src/components/LegendColors.tsx","../../src/plugins/carrier-viewer/CarrierViewer.vue?vue&type=template&lang.js"],"sourcesContent":["export const dashShaders = {\n  inject: {\n    'vs:#decl': \"\\nattribute vec2 instanceDashArrays;\\nattribute float instanceDashOffsets;\\nvarying vec2 vDashArray;\\nvarying float vDashOffset;\\n\",\n    'vs:#main-end': \"\\nvDashArray = instanceDashArrays;\\nvDashOffset = instanceDashOffsets / width.x;\\n\",\n    'fs:#decl': \"\\nuniform float dashAlignMode;\\nuniform float capType;\\nuniform bool dashGapPickable;\\nvarying vec2 vDashArray;\\nvarying float vDashOffset;\\n\\nfloat round(float x) {\\n  return floor(x + 0.5);\\n}\\n\",\n    'fs:#main-start': \"\\n  float solidLength = vDashArray.x;\\n  float gapLength = vDashArray.y;\\n  float unitLength = solidLength + gapLength;\\n\\n  float offset;\\n\\n  if (unitLength > 0.0) {\\n    if (dashAlignMode == 0.0) {\\n      offset = vDashOffset;\\n    } else {\\n      unitLength = vPathLength / round(vPathLength / unitLength);\\n      offset = solidLength / 2.0;\\n    }\\n\\n    float unitOffset = mod(clamp(vPathPosition.y, 0.0, vPathLength) + offset, unitLength);\\n\\n    if (gapLength > 0.0 && unitOffset > solidLength) {\\n      if (capType <= 0.5) {\\n        if (!(dashGapPickable && picking_uActive)) {\\n          discard;\\n        }\\n      } else {\\n        // caps are rounded, test the distance to solid ends\\n        float distToEnd = length(vec2(\\n          min(unitOffset - solidLength, unitLength - unitOffset),\\n          vPathPosition.x\\n        ));\\n        if (distToEnd > 1.0) {\\n          if (!(dashGapPickable && picking_uActive)) {\\n            discard;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"\n  }\n};\nexport const offsetShaders = {\n  inject: {\n    'vs:#decl': \"\\nattribute float instanceOffsets;\\n\",\n    'vs:DECKGL_FILTER_SIZE': \"\\n  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;\\n  size *= offsetWidth;\\n\",\n    'vCornerOffset = offsetVec;': \"\\n  float offsetWidth = abs(instanceOffsets * 2.0) + 1.0;\\n  vec2 offsetCenter = -instanceOffsets * (isCap ? perp : miterVec * miterSize) * 2.0;\\n  vCornerOffset = vCornerOffset * offsetWidth - offsetCenter;\\n\",\n    'fs:#main-start': \"\\n  float isInside;\\n  isInside = step(-1.0, vPathPosition.x) * step(vPathPosition.x, 1.0);\\n  if (isInside == 0.0) {\\n    discard;\\n  }\\n\"\n  }\n};\n//# sourceMappingURL=shaders.glsl.js.map","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { LayerExtension, _mergeShaders as mergeShaders } from '@deck.gl/core';\nimport { dashShaders, offsetShaders } from './shaders.glsl';\nimport { dist } from 'gl-matrix/vec3';\nconst defaultProps = {\n  getDashArray: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getOffset: {\n    type: 'accessor',\n    value: 0\n  },\n  dashJustified: false,\n  dashGapPickable: false\n};\nexport default class PathStyleExtension extends LayerExtension {\n  constructor({\n    dash = false,\n    offset = false,\n    highPrecisionDash = false\n  } = {}) {\n    super({\n      dash: dash || highPrecisionDash,\n      offset,\n      highPrecisionDash\n    });\n  }\n\n  isEnabled(layer) {\n    return 'pathTesselator' in layer.state;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    let result = {};\n\n    if (extension.opts.dash) {\n      result = mergeShaders(result, dashShaders);\n    }\n\n    if (extension.opts.offset) {\n      result = mergeShaders(result, offsetShaders);\n    }\n\n    return result;\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n\n    if (!attributeManager || !extension.isEnabled(this)) {\n      return;\n    }\n\n    if (extension.opts.dash) {\n      attributeManager.addInstanced({\n        instanceDashArrays: {\n          size: 2,\n          accessor: 'getDashArray'\n        }\n      });\n    }\n\n    if (extension.opts.highPrecisionDash) {\n      attributeManager.addInstanced({\n        instanceDashOffsets: {\n          size: 1,\n          accessor: 'getPath',\n          transform: extension.getDashOffsets.bind(this)\n        }\n      });\n    }\n\n    if (extension.opts.offset) {\n      attributeManager.addInstanced({\n        instanceOffsets: {\n          size: 1,\n          accessor: 'getOffset'\n        }\n      });\n    }\n  }\n\n  updateState(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const uniforms = {};\n\n    if (extension.opts.dash) {\n      uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;\n      uniforms.dashGapPickable = Boolean(this.props.dashGapPickable);\n    }\n\n    this.state.model.setUniforms(uniforms);\n  }\n\n  getDashOffsets(path) {\n    const result = [0];\n    const positionSize = this.props.positionFormat === 'XY' ? 2 : 3;\n    const isNested = Array.isArray(path[0]);\n    const geometrySize = isNested ? path.length : path.length / positionSize;\n    let p;\n    let prevP;\n\n    for (let i = 0; i < geometrySize - 1; i++) {\n      p = isNested ? path[i] : path.slice(i * positionSize, i * positionSize + positionSize);\n      p = this.projectPosition(p);\n\n      if (i > 0) {\n        result[i] = result[i - 1] + dist(prevP, p);\n      }\n\n      prevP = p;\n    }\n\n    return result;\n  }\n\n}\n\n_defineProperty(PathStyleExtension, \"defaultProps\", defaultProps);\n\n_defineProperty(PathStyleExtension, \"extensionName\", 'PathStyleExtension');\n//# sourceMappingURL=path-style.js.map","/*\r\n * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license\r\n * Author: Jim Palmer (based on chunking idea from Dave Koelle)\r\n */\r\n/*jshint unused:false */\r\nmodule.exports = function naturalSort (a, b) {\r\n\t\"use strict\";\r\n\tvar re = /(^([+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?$|^0x[0-9a-f]+$|\\d+)/gi,\r\n\t\tsre = /(^[ ]*|[ ]*$)/g,\r\n\t\tdre = /(^([\\w ]+,?[\\w ]+)?[\\w ]+,?[\\w ]+\\d+:\\d+(:\\d+)?[\\w ]?|^\\d{1,4}[\\/\\-]\\d{1,4}[\\/\\-]\\d{1,4}|^\\w+, \\w+ \\d+, \\d{4})/,\r\n\t\thre = /^0x[0-9a-f]+$/i,\r\n\t\tore = /^0/,\r\n\t\ti = function(s) { return naturalSort.insensitive && ('' + s).toLowerCase() || '' + s; },\r\n\t\t// convert all to strings strip whitespace\r\n\t\tx = i(a).replace(sre, '') || '',\r\n\t\ty = i(b).replace(sre, '') || '',\r\n\t\t// chunk/tokenize\r\n\t\txN = x.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\tyN = y.replace(re, '\\0$1\\0').replace(/\\0$/,'').replace(/^\\0/,'').split('\\0'),\r\n\t\t// numeric, hex or date detection\r\n\t\txD = parseInt(x.match(hre), 16) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),\r\n\t\tyD = parseInt(y.match(hre), 16) || xD && y.match(dre) && Date.parse(y) || null,\r\n\t\toFxNcL, oFyNcL;\r\n\t// first try and sort Hex codes or Dates\r\n\tif (yD) {\r\n\t\tif ( xD < yD ) { return -1; }\r\n\t\telse if ( xD > yD ) { return 1; }\r\n\t}\r\n\t// natural sorting through split numeric strings and default strings\r\n\tfor(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {\r\n\t\t// find floats not starting with '0', string or 0 if not defined (Clint Priest)\r\n\t\toFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;\r\n\t\toFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;\r\n\t\t// handle numeric vs string comparison - number < string - (Kyle Adams)\r\n\t\tif (isNaN(oFxNcL) !== isNaN(oFyNcL)) { return (isNaN(oFxNcL)) ? 1 : -1; }\r\n\t\t// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'\r\n\t\telse if (typeof oFxNcL !== typeof oFyNcL) {\r\n\t\t\toFxNcL += '';\r\n\t\t\toFyNcL += '';\r\n\t\t}\r\n\t\tif (oFxNcL < oFyNcL) { return -1; }\r\n\t\tif (oFxNcL > oFyNcL) { return 1; }\r\n\t}\r\n\treturn 0;\r\n};\r\n","import React, { useState, useMemo, useEffect } from 'react'\r\nimport { StaticMap } from 'react-map-gl'\r\nimport { AmbientLight, PointLight, LightingEffect } from '@deck.gl/core'\r\nimport DeckGL from '@deck.gl/react'\r\nimport { ArcLayer, ScatterplotLayer, IconLayer, PathLayer, TextLayer } from '@deck.gl/layers'\r\nimport PathOffsetLayer from '@/layers/PathOffsetLayer'\r\nimport { PathStyleExtension } from '@deck.gl/extensions'\r\n\r\nimport globalStore from '@/store'\r\nimport { MAPBOX_TOKEN, REACT_VIEW_HANDLES } from '@/Globals'\r\n\r\n// -------------------------------------------------------------\r\n// Tour viz has several layers, top to bottom:\r\n//\r\n// - shipments (arc layer, orig->destination)\r\n// - destination text on top of circles\r\n// - destination circles\r\n// - delivery legs (path layer, each leg is its own path)\r\n// - shipment link (dashed line on stopActivity link itself)\r\n\r\ninterface Shipment {\r\n  $id: string\r\n  fromX: number\r\n  fromY: number\r\n  toX: number\r\n  toY: number\r\n}\r\n\r\nconst ICON_MAPPING = {\r\n  circle: { x: 0, y: 0, width: 128, height: 128, mask: true },\r\n}\r\n\r\nconst ActivityColor = {\r\n  pickup: [0, 150, 255],\r\n  delivery: [240, 0, 60],\r\n  service: [255, 64, 255],\r\n}\r\n\r\nexport default function Component(props: {\r\n  activeTab: string\r\n  shipments: Shipment[]\r\n  legs: any[]\r\n  stopActivities: any[]\r\n  depots: { link: string; midpoint: number[]; coords: number[] }[]\r\n  colors: any\r\n  center: [number, number]\r\n  onClick: any\r\n  viewId: number\r\n  settings: any\r\n  dark: boolean\r\n  numSelectedTours: number\r\n}) {\r\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\r\n  const [hoverInfo, setHoverInfo] = useState({} as any)\r\n  const [pickupsAndDeliveries, setPickupsAndDeliveries] = useState({\r\n    type: 'activity',\r\n    pickups: [] as any[],\r\n    deliveries: [] as any[],\r\n  })\r\n\r\n  const {\r\n    dark,\r\n    activeTab,\r\n    numSelectedTours,\r\n    shipments,\r\n    depots,\r\n    legs,\r\n    settings,\r\n    stopActivities,\r\n    center,\r\n    onClick,\r\n  } = props\r\n\r\n  const { simplifyTours, scaleFactor, shipmentDotsOnTourMap } = settings\r\n\r\n  // range is (1/) 16384 - 0.000001\r\n  // slider is 0-100, which we invert and scale to [14 to -6], then 2^value is scaleFactor.\r\n  let widthScale = scaleFactor == 0 ? 1e-6 : 1 / Math.pow(2, (100 - scaleFactor) / 5 - 6.0)\r\n\r\n  const layers: any = []\r\n\r\n  // register setViewState in global view updater\r\n  // so we can respond to external map motion\r\n  REACT_VIEW_HANDLES[props.viewId] = () => {\r\n    setViewState(globalStore.state.viewState)\r\n  }\r\n\r\n  // update pickups and deliveries only when shipments change ----------------------\r\n  useEffect(() => {\r\n    const pickups: { [xy: string]: { type: string; coord: number[]; shipmentIds: string[] } } = {}\r\n    const deliveries: { [xy: string]: { type: string; coord: number[]; shipmentIds: string[] } } =\r\n      {}\r\n\r\n    shipments.forEach(shipment => {\r\n      let xy = `${shipment.fromX}-${shipment.fromY}`\r\n      if (!pickups[xy])\r\n        pickups[xy] = { type: 'pickup', shipmentIds: [], coord: [shipment.fromX, shipment.fromY] }\r\n      pickups[xy].shipmentIds.push(shipment.$id)\r\n\r\n      xy = `${shipment.toX}-${shipment.toY}`\r\n      if (!deliveries[xy])\r\n        deliveries[xy] = { type: 'delivery', shipmentIds: [], coord: [shipment.toX, shipment.toY] }\r\n      deliveries[xy].shipmentIds.push(shipment.$id)\r\n    })\r\n\r\n    setPickupsAndDeliveries({\r\n      type: 'activity',\r\n      pickups: Object.values(pickups),\r\n      deliveries: Object.values(deliveries),\r\n    })\r\n  }, [shipments])\r\n\r\n  function handleClick(event: any) {\r\n    if (!event.object) {\r\n      // no object: send null as message that blank area was clicked\r\n      onClick(null)\r\n    } else {\r\n      onClick(event.object)\r\n    }\r\n  }\r\n\r\n  function handleViewState(view: any) {\r\n    setViewState(view)\r\n    view.center = [view.longitude, view.latitude]\r\n    globalStore.commit('setMapCamera', view)\r\n  }\r\n\r\n  function renderTooltip(hoverInfo: any) {\r\n    const { object } = hoverInfo\r\n    if (!object) return null\r\n\r\n    // console.log(555, object)\r\n\r\n    if (object?.type == 'pickup') return renderActivityTooltip(hoverInfo, 'pickup')\r\n    if (object?.type == 'delivery') return renderActivityTooltip(hoverInfo, 'delivery')\r\n    if (object?.color) return renderLegTooltip(hoverInfo)\r\n    if (object?.type == 'depot') return null\r\n    return renderStopTooltip(hoverInfo)\r\n  }\r\n\r\n  function renderActivityTooltip(hoverInfo: any, activity: string) {\r\n    const { object, x, y } = hoverInfo\r\n\r\n    return (\r\n      <div\r\n        className=\"tooltip\"\r\n        style={{\r\n          backgroundColor: '#334455ee',\r\n          boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\r\n          color: '#eee',\r\n          padding: '0.5rem 0.5rem',\r\n          position: 'absolute',\r\n          opacity: 0.9,\r\n          left: x + 20,\r\n          top: y + 20,\r\n        }}\r\n      >\r\n        <table style={{ maxWidth: '30rem', fontSize: '0.8rem' }}>\r\n          <tbody>\r\n            <tr>\r\n              <td style={{ textAlign: 'right', paddingRight: '0.5rem', paddingTop: '0.2rem' }}>\r\n                {activity}:\r\n              </td>\r\n              <td style={{ paddingTop: '0.2rem' }}>{object.shipmentIds.join(', ')}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function renderLegTooltip(hoverInfo: any) {\r\n    const { object, x, y } = hoverInfo\r\n\r\n    return (\r\n      <div\r\n        className=\"tooltip\"\r\n        style={{\r\n          fontSize: '0.8rem',\r\n          backgroundColor: '#334455ee',\r\n          boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\r\n          color: '#eee',\r\n          padding: '0.5rem 0.5rem',\r\n          position: 'absolute',\r\n          left: x + 20,\r\n          top: y - 30,\r\n        }}\r\n      >\r\n        <b>{object?.tour?.vehicleId}</b>\r\n        <br />\r\n        Leg # {1 + object?.count} <br />\r\n        Shipments on board: {object?.shipmentsOnBoard?.length} <br />\r\n        Total size: {object?.totalSize}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function renderStopTooltip(hoverInfo: any) {\r\n    const { object, x, y } = hoverInfo\r\n\r\n    // collect some info\r\n    const visits = object.visits.length\r\n    const pickups = object.visits.reduce(\r\n      (prev: number, visit: any) => prev + visit.pickup.length,\r\n      0\r\n    )\r\n    const deliveries = object.visits.reduce(\r\n      (prev: number, visit: any) => prev + visit.delivery.length,\r\n      0\r\n    )\r\n\r\n    const numPickupsAndDeliveries = pickups + deliveries\r\n    const overview = { visits, pickups, deliveries } as any\r\n\r\n    // delivery stop has complicated position stuff\r\n    const tipHeight = Object.keys(object).length * 20 + 32 // good guess\r\n    let yPosition = y - 30\r\n    if (yPosition + tipHeight > window.innerHeight) {\r\n      yPosition = y - tipHeight\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className=\"tooltip\"\r\n        style={{\r\n          fontSize: '0.7rem',\r\n          backgroundColor: '#334455ee',\r\n          boxShadow: '2.5px 2px 4px rgba(0,0,0,0.25)',\r\n          color: '#eee',\r\n          padding: '0.5rem 0.5rem',\r\n          position: 'absolute',\r\n          left: x + 20,\r\n          top: yPosition,\r\n        }}\r\n      >\r\n        <table\r\n          style={{\r\n            fontSize: '0.8rem',\r\n          }}\r\n        >\r\n          <tbody>\r\n            {Object.keys(overview).map((a: any) => {\r\n              return (\r\n                <tr key={a}>\r\n                  <td style={{ textAlign: 'right', paddingRight: '0.5rem' }}>{a}:</td>\r\n                  <td style={{ fontWeight: 'bold' }}> {overview[a]}</td>\r\n                </tr>\r\n              )\r\n            })}\r\n\r\n            {/* <tr>\r\n              <td\r\n                style={{\r\n                  fontSize: '1rem',\r\n                  fontWeight: 'bold',\r\n                  textAlign: 'right',\r\n                  paddingRight: '0.5rem',\r\n                }}\r\n              >\r\n                {object.type} {object.count}:\r\n              </td>\r\n              <td style={{ fontSize: '1rem', fontWeight: 'bold' }}> {object.id}</td>\r\n            </tr> */}\r\n\r\n            {numPickupsAndDeliveries == 1 &&\r\n              Object.keys(object.details).map((a: any) => {\r\n                return (\r\n                  <tr key={a}>\r\n                    <td\r\n                      style={{ textAlign: 'right', paddingRight: '0.5rem', paddingTop: '0.2rem' }}\r\n                    >\r\n                      {a.slice(1)}:\r\n                    </td>\r\n                    <td style={{ paddingTop: '0.2rem' }}>{object.details[a]}</td>\r\n                  </tr>\r\n                )\r\n              })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  function clickedDepot() {}\r\n\r\n  if (activeTab == 'tours') {\r\n    layers.push(\r\n      //@ts-ignore:\r\n      new PathLayer({\r\n        id: 'shipmentLocationDashedLine',\r\n        data: stopActivities,\r\n        getPath: (d: any) => [d.ptFrom, d.ptTo],\r\n        getColor: [128, 128, 128],\r\n        getOffset: 2, // 2: RIGHT-SIDE TRAFFIC\r\n        opacity: 1,\r\n        widthMinPixels: 3,\r\n        rounded: true,\r\n        shadowEnabled: false,\r\n        pickable: false,\r\n        autoHighlight: false,\r\n        highlightColor: [255, 255, 255],\r\n        parameters: { depthTest: false },\r\n        getDashArray: [3, 2],\r\n        dashJustified: true,\r\n        extensions: [new PathStyleExtension({ dash: true })],\r\n      })\r\n    )\r\n\r\n    if (simplifyTours) {\r\n      layers.push(\r\n        //@ts-ignore:\r\n        new ArcLayer({\r\n          id: 'leg-arcs',\r\n          data: legs,\r\n          getSourcePosition: (d: any) => d.points[0],\r\n          getTargetPosition: (d: any) => d.points[d.points.length - 1],\r\n          getSourceColor: (d: any) => d.color, // [200, 32, 224],\r\n          getTargetColor: (d: any) => d.color, // [200, 32, 224],\r\n          getWidth: scaleFactor ? (d: any) => d.totalSize / 2 : 3,\r\n          getHeight: 0.5,\r\n          widthMinPixels: 2,\r\n          widthMaxPixels: 200,\r\n          widthUnits: 'pixels',\r\n          widthScale: widthScale,\r\n          opacity: 0.9,\r\n          parameters: { depthTest: false },\r\n          updateTriggers: { getWidth: [scaleFactor] },\r\n          transitions: { getWidth: 150 },\r\n          pickable: true,\r\n          autoHighlight: true,\r\n          highlightColor: [255, 255, 255], // [64, 255, 64],\r\n          onHover: setHoverInfo,\r\n        })\r\n      )\r\n    } else {\r\n      layers.push(\r\n        //@ts-ignore:\r\n        new PathOffsetLayer({\r\n          id: 'deliveryroutes',\r\n          data: legs,\r\n          getPath: (d: any) => d.points,\r\n          getColor: (d: any) => d.color,\r\n          getWidth: scaleFactor ? (d: any) => d.totalSize : 3,\r\n          getOffset: 2, // 2: RIGHT-SIDE TRAFFIC\r\n          opacity: 1,\r\n          widthMinPixels: 3,\r\n          widthMaxPixels: 200,\r\n          widthUnits: 'pixels',\r\n          widthScale: widthScale,\r\n          rounded: true,\r\n          shadowEnabled: false,\r\n          pickable: true,\r\n          autoHighlight: true,\r\n          highlightColor: [255, 255, 255], // [64, 255, 64],\r\n          onHover: setHoverInfo,\r\n          parameters: { depthTest: false },\r\n          updateTriggers: { getWidth: [scaleFactor] },\r\n          transitions: { getWidth: 150 },\r\n        })\r\n      )\r\n    }\r\n\r\n    // destination labels\r\n    layers.push(\r\n      //@ts-ignore\r\n      new TextLayer({\r\n        id: 'dest-labels',\r\n        data: stopActivities,\r\n        background: true,\r\n        backgroundPadding: numSelectedTours !== 1 ? [2, 1, 2, 1] : [3, 2, 3, 1],\r\n        getColor: [255, 255, 255],\r\n        getBackgroundColor: (d: any) => {\r\n          const pickups = d.visits.reduce(\r\n            (prev: number, visit: any) => prev + visit.pickup.length,\r\n            0\r\n          )\r\n          const deliveries = d.visits.reduce(\r\n            (prev: number, visit: any) => prev + visit.delivery.length,\r\n            0\r\n          )\r\n          if (pickups && deliveries) return [0, 0, 255]\r\n          if (pickups) return ActivityColor.pickup\r\n          if (deliveries) return ActivityColor.delivery\r\n          return [240, 130, 0]\r\n        },\r\n        getPosition: (d: any) => d.midpoint,\r\n        getText: (d: any) =>\r\n          d.label == 'Depot' ? d.label : numSelectedTours !== 1 ? ' ' : `${d.label}`,\r\n        getSize: (d: any) => (d.label == 'Depot' ? 11 : numSelectedTours !== 1 ? 4 : 11),\r\n        getTextAnchor: 'middle',\r\n        getAlignmentBaseline: 'center',\r\n        opacity: 1,\r\n        noAlloc: false,\r\n        billboard: true,\r\n        sizeScale: 1,\r\n        pickable: true,\r\n        autoHighlight: true,\r\n        highlightColor: [255, 255, 255],\r\n        onHover: setHoverInfo,\r\n        visible: shipmentDotsOnTourMap,\r\n      })\r\n    )\r\n  }\r\n\r\n  // shipment panel\r\n  if (activeTab == 'shipments') {\r\n    layers.push(\r\n      //@ts-ignore:\r\n      new ScatterplotLayer({\r\n        id: 'deliveries',\r\n        data: pickupsAndDeliveries.deliveries,\r\n        getPosition: (d: any) => d.coord,\r\n        getColor: ActivityColor.delivery,\r\n        getRadius: 3,\r\n        opacity: 0.9,\r\n        parameters: { depthTest: false },\r\n        pickable: true,\r\n        radiusUnits: 'pixels',\r\n        onHover: setHoverInfo,\r\n      })\r\n    )\r\n    layers.push(\r\n      //@ts-ignore:\r\n      new ScatterplotLayer({\r\n        id: 'pickups',\r\n        data: pickupsAndDeliveries.pickups,\r\n        getPosition: (d: any) => d.coord,\r\n        getColor: ActivityColor.pickup,\r\n        getRadius: 2,\r\n        opacity: 0.9,\r\n        parameters: { depthTest: false },\r\n        pickable: true,\r\n        radiusUnits: 'pixels',\r\n        onHover: setHoverInfo,\r\n      })\r\n    )\r\n\r\n    const opacity = shipments.length > 1 ? 32 : 255\r\n\r\n    layers.push(\r\n      //@ts-ignore:\r\n      new ArcLayer({\r\n        id: 'shipments',\r\n        data: shipments,\r\n        getSourcePosition: (d: any) => [d.fromX, d.fromY],\r\n        getTargetPosition: (d: any) => [d.toX, d.toY],\r\n        getSourceColor: [0, 228, 255, opacity],\r\n        getTargetColor: [240, 0, 60, 224],\r\n        getWidth: scaleFactor ? (d: any) => parseInt(d.$size) || 1.0 : 1,\r\n        widthUnits: 'pixels',\r\n        getHeight: 0.5,\r\n        opacity: 0.9,\r\n        parameters: { depthTest: false },\r\n        widthScale: widthScale,\r\n        widthMinPixels: 1,\r\n        widthMaxPixels: 100,\r\n        updateTriggers: { getWidth: [scaleFactor] },\r\n        transitions: { getWidth: 200 },\r\n      })\r\n    )\r\n  }\r\n\r\n  // DEPOTS ------\r\n  layers.push(\r\n    //@ts-ignore:\r\n    new TextLayer({\r\n      id: 'depots',\r\n      data: depots,\r\n      background: true,\r\n      backgroundPadding: [3, 2, 3, 1],\r\n      getColor: [255, 255, 255],\r\n      getBackgroundColor: [0, 150, 240],\r\n      getPosition: (d: any) => d.midpoint,\r\n      getText: (d: any) => 'Depot',\r\n      getTextAnchor: 'middle',\r\n      getAlignmentBaseline: 'center',\r\n      getSize: 11,\r\n      opacity: 1,\r\n      noAlloc: false,\r\n      billboard: true,\r\n      sizeScale: 1,\r\n      pickable: true,\r\n      autoHighlight: true,\r\n      highlightColor: [255, 255, 255],\r\n      onHover: setHoverInfo,\r\n    })\r\n  )\r\n\r\n  return (\r\n    <DeckGL\r\n      layers={layers}\r\n      pickingRadius={3}\r\n      controller={true}\r\n      getCursor={() => 'pointer'}\r\n      onClick={handleClick}\r\n      viewState={viewState}\r\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\r\n    >\r\n      {\r\n        /*\r\n        // @ts-ignore */\r\n        <StaticMap mapboxApiAccessToken={MAPBOX_TOKEN} mapStyle={globalStore.getters.mapStyle} />\r\n      }\r\n      {renderTooltip(hoverInfo)}\r\n    </DeckGL>\r\n  )\r\n}\r\n","<template lang=\"pug\">\r\n.carrier-viewer(:class=\"{'hide-thumbnail': !thumbnail}\"\r\n                :style='{\"background\": urlThumbnail}'\r\n                oncontextmenu=\"return false\")\r\n\r\n  .container-1\r\n    .main-panel\r\n      tour-viz.anim(v-if=\"!thumbnail\"\r\n                  :activeTab=\"activeTab\"\r\n                  :shipments=\"shownShipments\"\r\n                  :depots=\"shownDepots\"\r\n                  :legs=\"shownLegs\"\r\n                  :stopActivities=\"stopActivities\"\r\n                  :dark=\"globalState.isDarkMode\"\r\n                  :center=\"vizDetails.center\"\r\n                  :viewId=\"linkLayerId\"\r\n                  :settings=\"vizSettings\"\r\n                  :numSelectedTours=\"selectedTours.length\"\r\n                  :onClick=\"handleClick\")\r\n      ZoomButtons(v-if=\"!thumbnail\")\r\n      .xmessage(v-if=\"myState.statusMessage\") {{ myState.statusMessage }}\r\n\r\n    .right-panel(v-if=\"!thumbnail\" :darkMode=\"true\")\r\n      h3(style=\"margin-left: 0.25rem\" v-if=\"carriers.length\") {{ $t('carriers') }}\r\n\r\n      .carrier-list\r\n        .carrier(v-for=\"carrier in carriers\" :key=\"carrier.$id\"\r\n                 :class=\"{selected: carrier.$id===selectedCarrier}\"\r\n                 @click=\"handleSelectCarrier(carrier)\")\r\n          .carrier-title {{ carrier.$id }}\r\n\r\n      h4 {{ selectedCarrier || 'Details' }}\r\n\r\n\r\n      b-field.detail-buttons(v-if=\"selectedCarrier\" size=\"is-small\")\r\n\r\n        b-radio-button(v-model=\"activeTab\" native-value=\"shipments\" size=\"is-small\" type=\"is-warning\")\r\n          span {{ $t('shipments') }}\r\n        b-radio-button(v-model=\"activeTab\" native-value=\"tours\" size=\"is-small\" type=\"is-warning\")\r\n          span {{ $t('tours') }}\r\n        b-radio-button(v-model=\"activeTab\" native-value=\"vehicles\" size=\"is-small\" type=\"is-warning\")\r\n          span {{ $t('vehicles') }}\r\n        b-radio-button(v-if=\"services.length\" v-model=\"activeTab\" native-value=\"services\" size=\"is-small\" type=\"is-warning\")\r\n          span {{ $t('services') }}\r\n\r\n      .detail-area\r\n        .shipments(v-if=\"activeTab=='shipments'\")\r\n            span {{ $t('shipments')}}: {{ shipments.length}}\r\n            .leaf.tour(v-for=\"shipment,i in shipments\" :key=\"`${i}-${shipment.$id}`\"\r\n                @click=\"handleSelectShipment(shipment)\"\r\n                :class=\"{selected: shipment==selectedShipment, 'shipment-in-tour': shipmentIdsInTour.includes(shipment.$id)}\"\r\n            ) {{ `${shipment.$id}: ${shipment.$from}-${shipment.$to}` }}\r\n\r\n        .tours(v-if=\"activeTab=='tours'\")\r\n            .dropdown(v-if=\"this.plans.length > 1\" :class=\"{'is-active': dropdownIsActive}\" style=\"width: 100%\")\r\n              .dropdown-trigger(@click=\"selectDropdown()\")\r\n                button\r\n                  span Plan {{ selectedPlanIndex + 1 }}\r\n                  span.icon.is-small\r\n                    i.fas.fa-angle-down\r\n              .dropdown-menu\r\n                .dropdown-content\r\n                  a.dropdown-item(v-for=\"(plan, index) in this.plans\" @click=\"selectPlan(plan)\" :class=\"{'is-active': plan.$selected == 'true'}\") Plan {{ index + 1 }}\r\n\r\n            span {{ $t('tours')}}: {{ tours.length}}\r\n            .leaf.tour(v-for=\"tour,i in tours\" :key=\"`${i}-${tour.$id}`\"\r\n                @click=\"handleSelectTour(tour)\"\r\n                :class=\"{selected: selectedTours.includes(tour)}\") {{ `${tour.vehicleId}` }}\r\n\r\n        .vehicles(v-if=\"activeTab=='vehicles'\")\r\n            span {{ $t('vehicles')}}: {{ vehicles.length}}\r\n            .leaf.tour(v-for=\"veh,i in vehicles\" :key=\"`${i}-${veh.$id}`\") {{ veh.$id }}\r\n\r\n        .services(v-if=\"activeTab=='services'\")\r\n            span {{ $t('services')}}: {{ services.length}}\r\n            .leaf.tour(v-for=\"service,i in services\" :key=\"`${i}-${service.$id}`\") {{ `${service.$id}` }}\r\n\r\n      .switchbox\r\n        .switches\r\n          p {{$t('scaleSize')}}\r\n          b-slider.slider(:tooltip=\"false\" type=\"is-link\" size=\"is-small\" v-model=\"vizSettings.scaleFactor\")\r\n        .switches\r\n          b-switch(v-model=\"vizSettings.shipmentDotsOnTourMap\")\r\n            span(v-html=\"$t('shipmentDots')\")\r\n          b-switch(v-model=\"vizSettings.simplifyTours\")\r\n            span(v-html=\"$t('flatten')\")\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {\r\n      carriers: 'Carriers',\r\n      vehicles: 'VEHICLES',\r\n      services: 'SERVICES',\r\n      shipments: 'SHIPMENTS',\r\n      tours: 'TOURS',\r\n      pickup: 'Pickup',\r\n      delivery: 'Delivery',\r\n      flatten: 'Simple&nbsp;tours',\r\n      shipmentDots: 'Show shipments',\r\n      scaleSize: 'Widths',\r\n      scaleFactor: 'Width',\r\n    },\r\n    de: {\r\n      carriers: 'Unternehmen',\r\n      vehicles: 'FAHRZEUGE',\r\n      services: 'BETRIEBE',\r\n      shipments: 'LIEFERUNGEN',\r\n      tours: 'TOUREN',\r\n      pickup: 'Abholung',\r\n      delivery: 'Lieferung',\r\n    },\r\n  },\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport { ToggleButton } from 'vue-js-toggle-button'\r\nimport readBlob from 'read-blob'\r\nimport YAML from 'yaml'\r\nimport naturalSort from 'javascript-natural-sort'\r\nimport colorMap from 'colormap'\r\nimport pako from '@aftersim/pako'\r\nimport { blobToArrayBuffer, blobToBinaryString } from 'blob-util'\r\nimport * as coroutines from 'js-coroutines'\r\n\r\nimport globalStore from '@/store'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport LegendColors from '@/components/LegendColors'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\nimport { parseXML, findMatchingGlobInFiles, arrayBufferToBase64 } from '@/js/util'\r\n\r\nimport RoadNetworkLoader from '@/workers/RoadNetworkLoader.worker.ts?worker'\r\n\r\nimport TourViz from './TourViz'\r\n\r\nimport {\r\n  FileSystem,\r\n  LegendItem,\r\n  LegendItemType,\r\n  FileSystemConfig,\r\n  VisualizationPlugin,\r\n  LIGHT_MODE,\r\n  DARK_MODE,\r\n  REACT_VIEW_HANDLES,\r\n  MAP_STYLES_OFFLINE,\r\n  ColorScheme,\r\n} from '@/Globals'\r\n\r\ninterface NetworkLinks {\r\n  source: Float32Array\r\n  dest: Float32Array\r\n  linkIds: any[]\r\n  projection: String\r\n}\r\n\r\nnaturalSort.insensitive = true\r\n\r\n// An ActivityLocation is a link on which activities occur.\r\n// A location can have multiple visits on a tour!\r\n// Visits can have multiple pickups/dropoffs.\r\ninterface ActivityLocation {\r\n  link: string\r\n  midpoint: number[]\r\n  visits: any[]\r\n  label: string\r\n  tour: any\r\n  details?: any\r\n  ptFrom: number[]\r\n  ptTo: number[]\r\n}\r\n\r\nconst CarrierPlugin = defineComponent({\r\n  name: 'CarrierPlugin',\r\n  i18n,\r\n  components: {\r\n    LegendColors,\r\n    ToggleButton,\r\n    TourViz,\r\n    ZoomButtons,\r\n  },\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    yamlConfig: String,\r\n    config: Object as any,\r\n    thumbnail: Boolean,\r\n  },\r\n  data: () => {\r\n    return {\r\n      linkLayerId: Math.floor(1e12 * Math.random()),\r\n\r\n      vizSettings: {\r\n        simplifyTours: false,\r\n        scaleShipmentSizes: true,\r\n        shipmentDotsOnTourMap: true,\r\n        scaleFactor: 0, // 0 means don't scale at all\r\n      },\r\n\r\n      vizDetails: {\r\n        network: '',\r\n        carriers: '',\r\n        projection: '',\r\n        title: '',\r\n        description: '',\r\n        thumbnail: '',\r\n        center: null as any,\r\n      },\r\n\r\n      myState: {\r\n        statusMessage: '',\r\n        isRunning: false,\r\n        subfolder: '',\r\n        yamlConfig: '',\r\n        thumbnail: true,\r\n        data: [] as any[],\r\n      },\r\n\r\n      searchTerm: '',\r\n      searchEnabled: false,\r\n\r\n      globalState: globalStore.state,\r\n      isLoaded: true,\r\n      showHelp: false,\r\n      activeTab: 'shipments',\r\n\r\n      speedStops: [-10, -5, -2, -1, -0.5, -0.25, 0, 0.25, 0.5, 1, 2, 5, 10],\r\n      speed: 1,\r\n\r\n      legendBits: [] as any[],\r\n\r\n      links: null as any,\r\n\r\n      toggleTours: true,\r\n      toggleVehicles: true,\r\n      toggleShipments: true,\r\n      toggleServices: true,\r\n\r\n      detailContent: '',\r\n\r\n      data: null as any,\r\n\r\n      carriers: [] as any[],\r\n      vehicles: [] as any[],\r\n      shipments: [] as any[],\r\n      shipmentLookup: {} as any, // keyed on $id\r\n      services: [] as any[],\r\n      stopActivities: [] as any[],\r\n      tours: [] as any[],\r\n      plans: [] as any[],\r\n\r\n      shownShipments: [] as any[],\r\n      shipmentIdsInTour: [] as any[],\r\n\r\n      depots: [] as any,\r\n      shownDepots: [] as any,\r\n\r\n      shownLegs: [] as {\r\n        count: number\r\n        shipmentsOnBoard: string[]\r\n        totalSize: number\r\n        points: number[][]\r\n        tour: any\r\n        color: number[]\r\n        type: string\r\n      }[],\r\n\r\n      selectedCarrier: '',\r\n      selectedTours: [] as any[],\r\n      selectedPlan: null as any,\r\n      selectedPlanIndex: null as any,\r\n      selectedShipment: null as any,\r\n\r\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\r\n\r\n      vehicleLookup: [] as string[],\r\n      vehicleLookupString: {} as { [id: string]: number },\r\n\r\n      // always pick the same \"random\" colors\r\n      rgb: colorMap({\r\n        colormap: 'phase',\r\n        nshades: 9,\r\n        format: 'rba',\r\n      })\r\n        .map((a: any) => a.slice(0, 3))\r\n        .reverse(),\r\n\r\n      dropdownIsActive: false,\r\n    }\r\n  },\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    urlThumbnail(): string {\r\n      return this.thumbnailUrl\r\n    },\r\n\r\n    textColor(): any {\r\n      const lightmode = {\r\n        text: '#3498db',\r\n        bg: '#eeeef480',\r\n      }\r\n\r\n      const darkmode = {\r\n        text: 'white',\r\n        bg: '#181518aa',\r\n      }\r\n\r\n      return this.globalState.isDarkMode ? darkmode : lightmode\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    '$store.state.viewState'() {\r\n      if (!REACT_VIEW_HANDLES[this.linkLayerId]) return\r\n      REACT_VIEW_HANDLES[this.linkLayerId]()\r\n    },\r\n\r\n    'globalState.isDarkMode'() {\r\n      this.updateLegendColors()\r\n    },\r\n\r\n    async 'globalState.authAttempts'() {\r\n      console.log('AUTH CHANGED - Reload')\r\n      if (!this.yamlConfig) this.buildRouteFromUrl()\r\n      await this.getVizDetails()\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    handleSelectShipment(shipment: any) {\r\n      console.log({ shipment })\r\n\r\n      if (this.selectedShipment === shipment) {\r\n        this.selectedShipment = null\r\n        this.shownShipments = []\r\n\r\n        // if everything is deselected, reset view\r\n        if (!this.selectedTours.length) {\r\n          const carrier = this.carriers.filter(c => c.$id == this.selectedCarrier)\r\n          this.selectedCarrier = ''\r\n          this.handleSelectCarrier(carrier[0])\r\n        }\r\n\r\n        return\r\n      }\r\n\r\n      this.shownShipments = this.shipments.filter(s => s.$id === shipment.$id)\r\n      this.selectedShipment = shipment\r\n    },\r\n\r\n    processActivitiesInTour(tour: any): {\r\n      shipmentIdsInTour: any[]\r\n      stopActivities: ActivityLocation[]\r\n    } {\r\n      const shipmentIdsInTour: any[] = []\r\n      let stopCount = 0\r\n\r\n      // link ID is the lookup key for activity locations.\r\n      // BUT, since link-IDs are often numbers, we must always\r\n      // prepend an \"L\" to the link-id so that the key order\r\n      // is stable and based on insertion order.\r\n      const locations: { [link: string]: ActivityLocation } = {}\r\n\r\n      // figure out depot location as our starting point\r\n      let vehicle = this.vehicles.filter(v => v.$id === tour.vehicleId)[0]\r\n\r\n      const depotLink = this.links[vehicle.$depotLinkId]\r\n      let linkMidpoint = [0.5 * (depotLink[0] + depotLink[2]), 0.5 * (depotLink[1] + depotLink[3])]\r\n      let prevLocation = vehicle.$depotLinkId\r\n\r\n      // store starting location\r\n      locations[`L${vehicle.$depotLinkId}`] = {\r\n        link: vehicle.$depotLinkId,\r\n        midpoint: linkMidpoint,\r\n        visits: [{ pickup: [], delivery: [], service: [] }],\r\n        label: '',\r\n        tour,\r\n        details: {},\r\n        ptFrom: [depotLink[0], depotLink[1]],\r\n        ptTo: [depotLink[2], depotLink[3]],\r\n      }\r\n\r\n      for (const activity of tour.plan) {\r\n        if (!activity.$shipmentId) continue\r\n\r\n        shipmentIdsInTour.push(activity.$shipmentId)\r\n\r\n        const shipment = this.shipmentLookup[activity.$shipmentId]\r\n        if (!shipment) continue\r\n\r\n        const link = (activity.$type === 'pickup' ? shipment.$from : shipment.$to) as string\r\n        const ptFrom = [this.links[link][0], this.links[link][1]]\r\n        const ptTo = [this.links[link][2], this.links[link][3]]\r\n        const midpoint = [0.5 * (ptFrom[0] + ptTo[0]), 0.5 * (ptFrom[1] + ptTo[1])]\r\n\r\n        // pickup,delivery,service - translated for UI\r\n        const actType = this.$t(activity.$type)\r\n        // get details: remove coords, IDs, that we don't need to show the user in UI.\r\n        const { from, fromX, fromY, to, toX, toY, id, ...details } = shipment\r\n\r\n        const act = {\r\n          id: shipment.$id,\r\n          type: actType,\r\n          count: stopCount++,\r\n          link,\r\n          midpoint,\r\n          label: '',\r\n          tour,\r\n          details,\r\n          ptFrom,\r\n          ptTo,\r\n        }\r\n\r\n        // where to store it? same or new location?\r\n        if (link == prevLocation) {\r\n          // same loc as last activity\r\n          locations[`L${link}`].visits[locations[`L${link}`].visits.length - 1][\r\n            activity.$type\r\n          ].push(act)\r\n        } else if (`L${link}` in locations) {\r\n          // previously-visited location. Start a new visit!\r\n          const visit = { pickup: [], delivery: [], service: [] } as any\r\n          visit[activity.$type].push(act) // so gets saved in either pickup[] or delivery[]\r\n          locations[`L${link}`].visits.push(visit)\r\n        } else {\r\n          // never been here before\r\n          const visit = { pickup: [], delivery: [], service: [] } as any\r\n          visit[activity.$type].push(act)\r\n          locations[`L${link}`] = {\r\n            link,\r\n            midpoint,\r\n            label: '',\r\n            tour,\r\n            details,\r\n            ptFrom,\r\n            ptTo,\r\n            visits: [visit],\r\n          }\r\n        }\r\n        prevLocation = link\r\n      }\r\n\r\n      // convert to an array, insertion order is stable value order\r\n      const stopActivities = Object.values(locations)\r\n\r\n      // set stop labels: use count for all but the first one\r\n      for (let sCount = 0; sCount < stopActivities.length; sCount++) {\r\n        stopActivities[sCount].label = `${sCount}`\r\n      }\r\n      stopActivities[0].label = 'Depot'\r\n\r\n      // console.log({ shipmentIdsInTour, stopActivities })\r\n      return { shipmentIdsInTour, stopActivities }\r\n    },\r\n\r\n    setupDepots() {\r\n      const depots: { [link: string]: any } = {}\r\n\r\n      this.vehicles.forEach((v: any) => {\r\n        const linkId = v.$depotLinkId\r\n        let depotLink = this.links[linkId]\r\n\r\n        if (!depotLink) return\r\n\r\n        if (!depots[linkId]) {\r\n          depots[linkId] = {\r\n            type: 'depot',\r\n            link: v.$depotLinkId,\r\n            midpoint: [0.5 * (depotLink[0] + depotLink[2]), 0.5 * (depotLink[1] + depotLink[3])],\r\n            coords: this.links[v.$depotLinkId],\r\n            vehicles: {} as any,\r\n          }\r\n        }\r\n        depots[linkId].vehicles[v.$id] = v\r\n      })\r\n\r\n      this.depots = Object.values(depots)\r\n      this.shownDepots = this.depots.slice(0)\r\n    },\r\n\r\n    // -----------------------------------------------------------------------\r\n    selectAllTours() {\r\n      this.selectedTours = []\r\n      this.shownLegs = []\r\n      this.stopActivities = []\r\n      this.shownDepots = []\r\n      this.shownShipments = this.shipments.slice(0)\r\n\r\n      for (const tour of this.tours) {\r\n        //  all legs\r\n        tour.legs.forEach((leg: any, count_route: number) =>\r\n          this.addRouteToMap(tour, leg, count_route++)\r\n        )\r\n\r\n        // all activities\r\n        const z = this.processActivitiesInTour(tour)\r\n        this.stopActivities = this.stopActivities.concat(z.stopActivities)\r\n\r\n        // all depots\r\n        this.setupDepots()\r\n      }\r\n    },\r\n\r\n    async handleSelectTour(tour: any) {\r\n      //this unselects tour if user clicks an already-selected tour again\r\n      if (this.selectedTours.includes(tour)) {\r\n        this.selectedTours = this.selectedTours.filter((element: any) => element !== tour)\r\n        this.shownLegs = this.shownLegs.filter(leg => leg.tour !== tour)\r\n        this.stopActivities = this.stopActivities.filter(stop => stop.tour !== tour)\r\n\r\n        // if everything is deselected, EVERYTHING is selected! :-O\r\n        if (!this.selectedTours.length) this.selectAllTours()\r\n        return\r\n      }\r\n\r\n      // if this is the first selected tour, remove everything else first\r\n      if (!this.selectedTours.length) {\r\n        this.selectedTours = []\r\n        this.shownLegs = []\r\n        this.stopActivities = []\r\n        this.shownDepots = []\r\n      }\r\n\r\n      this.selectedTours.push(tour)\r\n\r\n      const { shipmentIdsInTour, stopActivities } = this.processActivitiesInTour(tour)\r\n      this.shipmentIdsInTour = shipmentIdsInTour\r\n\r\n      // Add all legs from all routes of this tour to the map\r\n      let count_route = 0\r\n      for (const leg of tour.legs) {\r\n        this.addRouteToMap(tour, leg, count_route++)\r\n      }\r\n\r\n      // add stop activity locations at the very end\r\n      this.stopActivities = this.stopActivities.concat(stopActivities)\r\n    },\r\n\r\n    addRouteToMap(\r\n      tour: any,\r\n      leg: { links: any[]; shipmentsOnBoard: string[]; totalSize: number },\r\n      count_route: number\r\n    ) {\r\n      // starting point from xy:[0,1]\r\n      const points = [[this.links[leg.links[0]][0], this.links[leg.links[0]][1]]]\r\n\r\n      for (const link of leg.links) {\r\n        const lastPoint = points[points.length - 1]\r\n        const fromXY = [this.links[link][0], this.links[link][1]]\r\n\r\n        // add from-point if it isn't a duplicate\r\n        if (fromXY[0] !== lastPoint[0] || fromXY[1] !== lastPoint[1]) {\r\n          points.push(fromXY)\r\n        }\r\n\r\n        // always add to-point: xy:[2,3]\r\n        points.push([this.links[link][2], this.links[link][3]])\r\n      }\r\n\r\n      this.shownLegs = this.shownLegs.concat([\r\n        {\r\n          tour,\r\n          shipmentsOnBoard: leg.shipmentsOnBoard,\r\n          totalSize: leg.totalSize,\r\n          count: count_route,\r\n          points,\r\n          color: this.rgb[(3 + tour.tourNumber) % this.rgb.length],\r\n          type: 'leg',\r\n        },\r\n      ])\r\n    },\r\n\r\n    handleSelectCarrier(carrier: any) {\r\n      this.dropdownIsActive = false\r\n\r\n      if (!this.links) return\r\n\r\n      const id = carrier.$id\r\n\r\n      this.vehicles = []\r\n      this.shipments = []\r\n      this.services = []\r\n      this.tours = []\r\n      this.plans = []\r\n      this.shownShipments = []\r\n      this.shownDepots = []\r\n      this.selectedShipment = null\r\n      this.shipmentIdsInTour = []\r\n      this.stopActivities = []\r\n      this.shownLegs = []\r\n\r\n      // unselect carrier\r\n      if (this.selectedCarrier === id) {\r\n        this.selectedCarrier = ''\r\n        return\r\n      }\r\n\r\n      this.selectedCarrier = id\r\n\r\n      // vehicles\r\n      let vehicles = carrier.capabilities.vehicles.vehicle || []\r\n      this.vehicles = vehicles.sort((a: any, b: any) => naturalSort(a, b))\r\n\r\n      // depots\r\n      this.setupDepots()\r\n\r\n      // shipments\r\n      this.shipments = this.processShipments(carrier)\r\n\r\n      if (carrier.services?.service?.length)\r\n        this.services = carrier.services.service\r\n          .map((s: any) => s.$)\r\n          .sort((a: any, b: any) => naturalSort(a.$id, b.$id))\r\n\r\n      this.tours = this.processTours(carrier)\r\n\r\n      // select all everything\r\n      this.shownShipments = this.shipments\r\n      this.selectAllTours()\r\n    },\r\n\r\n    getAllPlans(carrier: any) {\r\n      // Add plan to plans[] if there is no plans-tag and only one plan\r\n      if (carrier.plan != undefined) {\r\n        this.plans.push(carrier.plan)\r\n        this.selectedPlan = carrier.plan\r\n        return\r\n      }\r\n\r\n      if (carrier.plans != undefined) {\r\n        // Add plan to plans[] if a plans-tag has only one child\r\n        if (carrier.plans.plan.length == undefined) {\r\n          this.plans.push(carrier.plans.plan)\r\n          this.selectedPlan = carrier.plans.plan\r\n          return\r\n        }\r\n\r\n        // Add plans to plans[] if a plans-tag exists and the plans-tag has multiple childs\r\n        this.plans = carrier.plans.plan\r\n\r\n        for (let i = 0; i < carrier.plans.plan.length; i++) {\r\n          if (carrier.plans.plan[i].selected == 'true') {\r\n            this.selectedPlan = carrier.plans.plan[i]\r\n            break\r\n          }\r\n          this.selectedPlan = carrier.plans.plan[i]\r\n        }\r\n      }\r\n    },\r\n\r\n    processTours(carrier: any) {\r\n      this.getAllPlans(carrier)\r\n\r\n      if (!this.selectPlan || !this.plans.length) return []\r\n\r\n      const tours: any[] = this.selectedPlan.tour.map((tour: any, i: number) => {\r\n        // reconstitute the plan. Our XML library builds\r\n        // two arrays: one for acts and one for legs.\r\n        // We need them stitched back together in the correct order.\r\n        const plan = [tour.act[0]]\r\n        const shipmentsOnBoard = new Set()\r\n\r\n        for (let i = 1; i < tour.act.length; i++) {\r\n          // insert list of shipments onboard\r\n          tour.leg[i - 1].shipmentsOnBoard = [...shipmentsOnBoard]\r\n          plan.push(tour.leg[i - 1])\r\n          plan.push(tour.act[i])\r\n\r\n          // account for pickups/deliveries\r\n          if (tour.act[i].$type == 'pickup' && tour.act[i].$shipmentId)\r\n            shipmentsOnBoard.add(tour.act[i].$shipmentId)\r\n          if (tour.act[i].$type == 'delivery' && tour.act[i].$shipmentId)\r\n            shipmentsOnBoard.delete(tour.act[i].$shipmentId)\r\n        }\r\n\r\n        // Parse any route strings \"123434 234143 14241\"\r\n        const legs = tour.leg\r\n          .filter((leg: any) => leg.route && leg.route.length)\r\n          .map((leg: any) => {\r\n            // store shipment object, not id\r\n            const shipmentsOnBoard = leg.shipmentsOnBoard.map((id: any) => this.shipmentLookup[id])\r\n            const totalSize = shipmentsOnBoard.reduce(\r\n              (prev: number, curr: any) => prev + parseFloat(curr?.$size || 0),\r\n              0\r\n            )\r\n            return {\r\n              shipmentsOnBoard,\r\n              totalSize,\r\n              links: leg.route ? leg.route.split(' ') : [],\r\n            }\r\n          })\r\n\r\n        const p = {\r\n          vehicleId: tour.$vehicleId,\r\n          plan,\r\n          legs, // legs.links, legs.shipmentsOnBoard, legs.totalSize\r\n          tourNumber: 0,\r\n        }\r\n        return p\r\n      })\r\n\r\n      tours.sort((a: any, b: any) => naturalSort(a.vehicleId, b.vehicleId))\r\n\r\n      // now assign them numbers based on their sorted order\r\n      tours.forEach((tour, i) => (tour.tourNumber = i))\r\n\r\n      return tours\r\n    },\r\n\r\n    processShipments(carrier: any) {\r\n      this.shipmentLookup = {} as any\r\n      if (!carrier.shipments?.shipment?.length) return []\r\n\r\n      const shipments = carrier.shipments.shipment.sort((a: any, b: any) =>\r\n        naturalSort(a.$id, b.$id)\r\n      )\r\n      try {\r\n        for (const shipment of shipments) {\r\n          // shipment has link id, so we go from link.from to link.to\r\n          shipment.fromX = 0.5 * (this.links[shipment.$from][0] + this.links[shipment.$from][2])\r\n          shipment.fromY = 0.5 * (this.links[shipment.$from][1] + this.links[shipment.$from][3])\r\n          shipment.toX = 0.5 * (this.links[shipment.$to][0] + this.links[shipment.$to][2])\r\n          shipment.toY = 0.5 * (this.links[shipment.$to][1] + this.links[shipment.$to][3])\r\n\r\n          this.shipmentLookup[shipment.$id] = shipment\r\n        }\r\n      } catch (e) {\r\n        // if xy are missing, skip this -- just means network isn't loaded yet.\r\n      }\r\n\r\n      return shipments\r\n    },\r\n\r\n    // this happens if viz is the full page, not a thumbnail on a project page\r\n    buildRouteFromUrl() {\r\n      const params = this.$route.params\r\n      if (!params.project || !params.pathMatch) {\r\n        console.log('I CANT EVEN: NO PROJECT/PARHMATCH')\r\n        return\r\n      }\r\n\r\n      // subfolder and config file\r\n      const sep = 1 + params.pathMatch.lastIndexOf('/')\r\n      const subfolder = params.pathMatch.substring(0, sep)\r\n      const config = params.pathMatch.substring(sep)\r\n\r\n      this.myState.subfolder = subfolder\r\n      this.myState.yamlConfig = config\r\n    },\r\n\r\n    async getVizDetails() {\r\n      // are we in a dashboard?\r\n      if (this.config) {\r\n        this.vizDetails = Object.assign({}, this.config)\r\n        return\r\n      }\r\n\r\n      // if a YAML file was passed in, just use it\r\n      if (this.yamlConfig?.endsWith('yaml') || this.yamlConfig?.endsWith('yml')) {\r\n        try {\r\n          const filename =\r\n            this.yamlConfig.indexOf('/') > -1\r\n              ? this.yamlConfig\r\n              : this.subfolder + '/' + this.yamlConfig\r\n\r\n          const text = await this.fileApi.getFileText(filename)\r\n          this.vizDetails = YAML.parse(text)\r\n          return\r\n        } catch (e) {\r\n          console.log('failed')\r\n          // maybe it failed because password?\r\n          const err = e as any\r\n          if (this.fileSystem.needPassword && err.status === 401) {\r\n            globalStore.commit('requestLogin', this.fileSystem.slug)\r\n          }\r\n          return\r\n        }\r\n      }\r\n\r\n      // Fine, build the config based on folder contents -------------------------\r\n      const title = this.myState.yamlConfig.substring(\r\n        0,\r\n        15 + this.myState.yamlConfig.indexOf('carriers')\r\n      )\r\n\r\n      // Road network: first try the most obvious network filename:\r\n      const { files } = await this.fileApi.getDirectory(this.myState.subfolder)\r\n\r\n      let network = this.myState.yamlConfig.replaceAll('carriers', 'network')\r\n      // if the obvious network file doesn't exist, just grab... the first network file:\r\n      if (files.indexOf(network) == -1) {\r\n        const allNetworks = files.filter(f => f.indexOf('network') > -1)\r\n        if (allNetworks.length) network = allNetworks[0]\r\n        else {\r\n          this.myState.statusMessage = 'No road network found.'\r\n          network = ''\r\n        }\r\n      }\r\n\r\n      this.vizDetails = {\r\n        network,\r\n        carriers: this.yamlConfig as any,\r\n        title,\r\n        description: '',\r\n        center: this.vizDetails.center,\r\n        projection: '',\r\n        thumbnail: '',\r\n      }\r\n\r\n      const t = 'Carrier Explorer'\r\n      this.$emit('title', t)\r\n\r\n      this.buildThumbnail()\r\n    },\r\n\r\n    async setMapCenter() {\r\n      let samples = 0\r\n      let longitude = 0\r\n      let latitude = 0\r\n\r\n      if (this.vizDetails.center) {\r\n        if (typeof this.vizDetails.center == 'string') {\r\n          this.vizDetails.center = this.vizDetails.center.split(',').map(Number)\r\n        }\r\n        longitude = this.vizDetails.center[0]\r\n        latitude = this.vizDetails.center[1]\r\n      } else if (!this.vizDetails.center) {\r\n        this.data = Object.entries(this.links)\r\n\r\n        if (!this.data.length) return\r\n\r\n        const numLinks = this.data.length / 2\r\n\r\n        const gap = 4096\r\n        for (let i = 0; i < numLinks; i += gap) {\r\n          longitude += this.data[i * 2][1][0]\r\n          latitude += this.data[i * 2 + 1][1][1]\r\n          samples++\r\n        }\r\n\r\n        longitude = longitude / samples\r\n        latitude = latitude / samples\r\n      }\r\n      if (longitude && latitude) {\r\n        this.$store.commit('setMapCamera', {\r\n          longitude,\r\n          latitude,\r\n          zoom: 9,\r\n          bearing: 0,\r\n          pitch: 0,\r\n          jump: false,\r\n        })\r\n      }\r\n    },\r\n\r\n    async buildThumbnail() {\r\n      if (this.thumbnail && this.vizDetails.thumbnail) {\r\n        try {\r\n          const blob = await this.fileApi.getFileBlob(\r\n            this.myState.subfolder + '/' + this.vizDetails.thumbnail\r\n          )\r\n          const buffer = await readBlob.arraybuffer(blob)\r\n          const base64 = arrayBufferToBase64(buffer)\r\n          if (base64)\r\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      }\r\n    },\r\n\r\n    handleClick(object: any) {\r\n      console.log('CLICK!', object)\r\n      if (!object) this.clickedEmptyMap()\r\n      if (object?.type == 'depot') this.clickedDepot(object)\r\n      if (object?.type == 'leg') this.clickedLeg(object)\r\n    },\r\n\r\n    clickedDepot(object: any) {\r\n      const vehiclesAtThisDepot = Object.values(object.vehicles).map((v: any) => v.$id)\r\n      console.log({ vehiclesAtThisDepot })\r\n      this.selectedTours = []\r\n      this.shownShipments = []\r\n\r\n      for (const tour of this.tours) {\r\n        if (vehiclesAtThisDepot.includes(tour.vehicleId)) {\r\n          this.handleSelectTour(tour)\r\n          // ^^ has side-effect: shipmentsInTour now has the list of shipmentIds\r\n          // We can use this to filter the shipments\r\n          this.shipmentIdsInTour.forEach(id => {\r\n            this.shownShipments.push(this.shipmentLookup[id])\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    clickedLeg(object: any) {\r\n      if (object?.tour) this.handleSelectTour(object?.tour)\r\n    },\r\n\r\n    clickedEmptyMap() {\r\n      this.selectAllTours()\r\n    },\r\n\r\n    updateLegendColors() {},\r\n\r\n    async loadCarriers() {\r\n      // this.myState.statusMessage = '' + this.$i18n.t('message.tours')\r\n\r\n      const carriersXML = await this.loadFileOrGzippedFile(this.vizDetails.carriers)\r\n      if (!carriersXML) return []\r\n\r\n      const root: any = await parseXML(carriersXML, {\r\n        // these elements should always be arrays, even if there's just one element:\r\n        alwaysArray: [\r\n          'carriers.carrier',\r\n          'carriers.carrier.capabilities.vehicles.vehicle',\r\n          'carriers.carrier.plan.tour',\r\n          'carriers.carrier.shipments.shipment',\r\n          'carriers.carrier.services.service',\r\n        ],\r\n      })\r\n\r\n      // sort by '$id' attribute\r\n      const carrierList = root.carriers.carrier.sort((a: any, b: any) => naturalSort(a.$id, b.$id))\r\n      return carrierList\r\n    },\r\n\r\n    async loadNetwork() {\r\n      this.myState.statusMessage = 'Loading network...'\r\n\r\n      if (this.vizDetails.network.indexOf('.xml.') > -1) {\r\n        // load matsim xml file\r\n        const path = `${this.myState.subfolder}/${this.vizDetails.network}`\r\n        const net = await this.fetchNetwork(path, {})\r\n\r\n        // Handle Atlantis: no long/lat coordinates\r\n        if (net.projection == 'Atlantis') {\r\n          this.$store.commit('setMapStyles', MAP_STYLES_OFFLINE)\r\n        }\r\n\r\n        // build direct lookup of x/y from link-id\r\n        this.myState.statusMessage = 'Building network link table'\r\n        const links: { [id: string]: number[] } = {}\r\n\r\n        net.linkIds.forEach((linkId: string, i: number) => {\r\n          links[linkId] = [\r\n            net.source[i * 2],\r\n            net.source[i * 2 + 1],\r\n            net.dest[i * 2],\r\n            net.dest[i * 2 + 1],\r\n          ]\r\n        })\r\n        return links\r\n      } else {\r\n        // pre-converted output from create_network.py\r\n        const blob = await this.fileApi.getFileBlob(\r\n          this.myState.subfolder + '/' + this.vizDetails.network\r\n        )\r\n        const blobString = blob ? await blobToBinaryString(blob) : null\r\n        let text = await coroutines.run(pako.inflateAsync(blobString, { to: 'string' }))\r\n        const convertedNetwork = JSON.parse(text)\r\n\r\n        return convertedNetwork\r\n      }\r\n    },\r\n\r\n    async fetchNetwork(path: string, vizDetails: any) {\r\n      return new Promise<NetworkLinks>((resolve, reject) => {\r\n        const thread = new RoadNetworkLoader()\r\n        try {\r\n          thread.postMessage({\r\n            filePath: path,\r\n            fileSystem: this.fileSystem,\r\n            vizDetails,\r\n          })\r\n\r\n          thread.onmessage = e => {\r\n            // perhaps network has no CRS and we need to ask user\r\n            if (e.data.promptUserForCRS) {\r\n              let crs =\r\n                prompt('Enter the coordinate reference system, e.g. EPSG:25832') || 'EPSG:31468'\r\n              if (!isNaN(parseInt(crs))) crs = `EPSG:${crs}`\r\n\r\n              thread.postMessage({ crs })\r\n              return\r\n            }\r\n\r\n            // normal exit\r\n            thread.terminate()\r\n\r\n            if (e.data.error) {\r\n              console.error(e.data.error)\r\n              globalStore.commit('error', e.data.error)\r\n              reject(e.data.error)\r\n            }\r\n            resolve(e.data.links)\r\n          }\r\n        } catch (err) {\r\n          thread.terminate()\r\n          console.error(err)\r\n          reject(err)\r\n        }\r\n      })\r\n    },\r\n\r\n    toggleLoaded(loaded: boolean) {\r\n      this.isLoaded = loaded\r\n    },\r\n\r\n    rotateColors() {\r\n      localStorage.setItem(\r\n        'plugin/agent-animation/colorscheme',\r\n        this.globalState.isDarkMode ? ColorScheme.DarkMode : ColorScheme.LightMode\r\n      )\r\n    },\r\n\r\n    async loadFileOrGzippedFile(name: string) {\r\n      let filepath = `${this.subfolder}/${name}`\r\n\r\n      try {\r\n        // figure out which file to load with *? wildcards\r\n        if (filepath.indexOf('*') > -1 || filepath.indexOf('?') > -1) {\r\n          const zDataset = filepath.substring(1 + filepath.lastIndexOf('/'))\r\n          const zSubfolder = filepath.substring(0, filepath.lastIndexOf('/'))\r\n\r\n          // fetch list of files in this folder\r\n          const { files } = await this.fileApi.getDirectory(zSubfolder)\r\n          const matchingFiles = findMatchingGlobInFiles(files, zDataset)\r\n          if (matchingFiles.length == 0) throw Error(`No files matched \"${zDataset}\"`)\r\n          if (matchingFiles.length > 1)\r\n            throw Error(`More than one file matched \"${zDataset}\": ${matchingFiles}`)\r\n          filepath = `${zSubfolder}/${matchingFiles[0]}`\r\n        }\r\n\r\n        let content = ''\r\n\r\n        if (filepath.endsWith('xml')) {\r\n          content = await this.fileApi.getFileText(filepath)\r\n        } else if (filepath.endsWith('gz')) {\r\n          const blob = await this.fileApi.getFileBlob(filepath)\r\n          const blobString = blob ? await blobToBinaryString(blob) : null\r\n          content = await coroutines.run(pako.inflateAsync(blobString, { to: 'string' }))\r\n        }\r\n        return content\r\n      } catch (e) {\r\n        globalStore.commit('error', '' + e)\r\n        const error = filepath + ': ' + e\r\n        console.error(e)\r\n        this.myState.statusMessage = error\r\n        return ''\r\n      }\r\n    },\r\n\r\n    selectDropdown() {\r\n      this.dropdownIsActive = !this.dropdownIsActive\r\n    },\r\n\r\n    selectPlan(plan: any) {\r\n      // Set all plans to unselected\r\n      for (let i = 0; i < this.plans.length; i++) {\r\n        this.plans[i].$selected = 'false'\r\n      }\r\n\r\n      // Select new plan\r\n      plan.$selected = 'true'\r\n\r\n      this.selectedPlanIndex = this.plans.indexOf(plan)\r\n\r\n      // Unselect all tours\r\n      this.selectedTours = []\r\n\r\n      this.selectDropdown()\r\n      this.selectedPlan = plan\r\n    },\r\n  },\r\n  async mounted() {\r\n    globalStore.commit('setFullScreen', !this.thumbnail)\r\n\r\n    this.myState.thumbnail = this.thumbnail\r\n    this.myState.subfolder = this.subfolder\r\n\r\n    if (!this.yamlConfig) this.buildRouteFromUrl()\r\n    await this.getVizDetails()\r\n\r\n    if (this.thumbnail) return\r\n\r\n    this.showHelp = false\r\n    this.updateLegendColors()\r\n\r\n    this.myState.statusMessage = 'Loading carriers...'\r\n\r\n    this.carriers = await this.loadCarriers()\r\n\r\n    await this.$nextTick() // update UI update before network load begins\r\n    this.links = await this.loadNetwork()\r\n    this.setMapCenter()\r\n\r\n    this.myState.statusMessage = ''\r\n\r\n    // Select the first carrier if the carriers are loaded\r\n    if (this.carriers.length) this.handleSelectCarrier(this.carriers[0])\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.myState.isRunning = false\r\n\r\n    globalStore.commit('setFullScreen', false)\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n})\r\n\r\nexport default CarrierPlugin\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n/* SCROLLBARS\r\n   The emerging W3C standard is currently Firefox-only */\r\n* {\r\n  scrollbar-width: thin;\r\n  scrollbar-color: #454 $steelGray;\r\n}\r\n\r\n/* And this works on Chrome/Edge/Safari */\r\n*::-webkit-scrollbar {\r\n  width: 10px;\r\n}\r\n*::-webkit-scrollbar-track {\r\n  background: var(--bgPanel3);\r\n}\r\n*::-webkit-scrollbar-thumb {\r\n  background-color: var(--textVeryPale);\r\n  border-radius: 6px;\r\n}\r\n\r\n.carrier-viewer {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  pointer-events: none;\r\n  min-height: $thumbnailHeight;\r\n}\r\n\r\n.container-1 {\r\n  display: flex;\r\n  height: 100%;\r\n}\r\n\r\n.carrier-viewer.hide-thumbnail {\r\n  background: none;\r\n}\r\n\r\n.main-panel {\r\n  position: relative;\r\n  flex: 1;\r\n}\r\n\r\nh4 {\r\n  border-top: 1px solid #bbb;\r\n  margin: 1rem 0.25rem 0.5rem 0.25rem;\r\n  padding-top: 0.25rem;\r\n  font-weight: bold;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.right-panel {\r\n  color: var(--text);\r\n  display: flex;\r\n  flex-direction: column;\r\n  font-size: 0.8rem;\r\n  pointer-events: auto;\r\n  background-color: var(--bgPanel3);\r\n  width: 18rem;\r\n  max-width: 18rem;\r\n  padding: 0 0.25rem;\r\n}\r\n\r\n.nav {\r\n  grid-area: title;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 0 0;\r\n  padding: 0 0.5rem 0 1rem;\r\n\r\n  a {\r\n    font-weight: bold;\r\n    color: white;\r\n    text-decoration: none;\r\n\r\n    &.router-link-exact-active {\r\n      color: white;\r\n    }\r\n  }\r\n\r\n  p {\r\n    margin: auto 0.5rem auto 0;\r\n    padding: 0 0;\r\n    color: white;\r\n  }\r\n}\r\n\r\n.speed-block {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.legend-block {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.speed-slider {\r\n  flex: 1;\r\n  width: 100%;\r\n  margin: 0rem 0.25rem 0.25rem 0rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.big {\r\n  padding: 0rem 0;\r\n  // margin-top: 1rem;\r\n  font-size: 2rem;\r\n  line-height: 3.75rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.anim {\r\n  // background-color: #181919;\r\n  pointer-events: auto;\r\n}\r\n\r\n.speed-label {\r\n  font-size: 0.8rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.clock {\r\n  grid-area: clock;\r\n  width: 273px;\r\n  background-color: #000000cc;\r\n  border: 3px solid white;\r\n  margin-bottom: 1.2rem;\r\n  color: white;\r\n}\r\n\r\n.clock p {\r\n  text-align: center;\r\n  padding: 1rem 1rem;\r\n}\r\n\r\n.tooltip {\r\n  padding: 5rem 5rem;\r\n  background-color: #ccc;\r\n  z-index: -1;\r\n}\r\n\r\n.panel-items {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 0;\r\n  max-height: 100%;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\nh3 {\r\n  font-size: 1.2rem;\r\n  padding: 0;\r\n}\r\n\r\ninput {\r\n  border: none;\r\n  background-color: #235;\r\n  color: #ccc;\r\n}\r\n\r\n.carrier {\r\n  padding: 0.25rem 0.5rem;\r\n  margin: 0 0rem;\r\n  color: var(--text);\r\n}\r\n\r\n.carrier:nth-of-type(odd) {\r\n  background: var(--bgPanel2);\r\n}\r\n\r\n.carrier-details {\r\n  font-weight: normal;\r\n  margin-left: 0.5rem;\r\n  animation: slide-up 0.25s ease;\r\n  color: white;\r\n}\r\n\r\n.carrier-details .carrier:hover {\r\n  cursor: pointer;\r\n  background-color: $themeColorPale; // var(--bgBold);\r\n}\r\n\r\n.carrier:hover {\r\n  color: var(--link);\r\n}\r\n\r\n.carrier-title {\r\n  margin-top: 0.1rem;\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  i {\r\n    opacity: 0.3;\r\n    margin-top: 0.2rem;\r\n    margin-left: -0.2rem;\r\n    margin-right: 0.4rem;\r\n  }\r\n}\r\n\r\n.carrier-title:hover {\r\n  i {\r\n    opacity: 0.7;\r\n  }\r\n}\r\n\r\n.carrier.selected {\r\n  font-weight: bold;\r\n  background-color: $themeColorPale;\r\n  box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.3) inset;\r\n  color: white;\r\n}\r\n\r\n.carrier-list {\r\n  user-select: none;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  cursor: pointer;\r\n}\r\n\r\n.detail-area {\r\n  user-select: none;\r\n  flex: 1;\r\n  overflow-x: hidden;\r\n  cursor: pointer;\r\n  margin: 0 0.25rem 0.25rem 0.25rem;\r\n  // border-bottom: 1px solid #555;\r\n}\r\n\r\n.carrier-section {\r\n  margin-top: 0.25rem;\r\n  margin-bottom: 0.25rem;\r\n}\r\n\r\n@keyframes slide-up {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.playback-stuff {\r\n  grid-area: playback;\r\n  padding: 0rem 2rem 2rem 2rem;\r\n  pointer-events: auto;\r\n}\r\n\r\n.leaf {\r\n  padding-left: 1rem;\r\n}\r\n\r\n.leaf:hover {\r\n  color: yellowgreen;\r\n}\r\n\r\n.tour.selected {\r\n  background-color: var(--textFancy);\r\n  font-weight: bold;\r\n  color: var(--bgPanel3);\r\n}\r\n\r\n.shipment-in-tour {\r\n  background-color: #497c7e;\r\n}\r\n\r\n.detail-list {\r\n  width: 250px;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n}\r\n\r\n.detail-list pre {\r\n  font-family: 'Arial';\r\n  padding: 0 0;\r\n  line-height: 0.8rem;\r\n  background-color: var(--bgPanel);\r\n  color: var(--text);\r\n}\r\n\r\n.switches {\r\n  display: flex;\r\n  // margin: 0.25rem 0.25rem;\r\n\r\n  p {\r\n    flex: 1;\r\n    margin: auto 0;\r\n  }\r\n}\r\n\r\n.slider {\r\n  flex: 4;\r\n  margin-right: 0 1rem;\r\n}\r\n\r\n.detail-buttons {\r\n  margin: 0 0.25rem 0.5rem 0.25rem;\r\n}\r\n\r\n.switchbox {\r\n  margin: 0 0.25rem 0.5rem 0.25rem;\r\n}\r\n\r\n.xmessage {\r\n  position: absolute;\r\n  bottom: 0;\r\n  z-index: 10;\r\n  background-color: var(--bgPanel2);\r\n  padding: 0.5rem 1rem;\r\n}\r\n\r\n.dropdown {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n  .nav {\r\n    padding: 0.5rem 0.5rem;\r\n  }\r\n\r\n  .clock {\r\n    text-align: center;\r\n  }\r\n\r\n  .right-side {\r\n    font-size: 0.7rem;\r\n    margin-right: 0.25rem;\r\n  }\r\n\r\n  .big {\r\n    padding: 0 0rem;\r\n    margin-top: 0.5rem;\r\n    font-size: 1.3rem;\r\n    line-height: 2rem;\r\n  }\r\n\r\n  .side-section {\r\n    margin-left: 0;\r\n  }\r\n\r\n  .extra-buttons {\r\n    margin-right: 1rem;\r\n  }\r\n}\r\n</style>\r\n","import { LegendItem } from '@/Globals'\r\nimport React from 'react'\r\n\r\nexport default function Component(props: {\r\n  title: string\r\n  description?: string\r\n  values: number[]\r\n  items: LegendItem[]\r\n}) {\r\n  const listItems = props.items.map(item => (\r\n    <li key={item.value + item.value[0]}>\r\n      <div\r\n        style={{\r\n          width: '100%',\r\n          height: `${Math.max(1, 3.0 * (1 * item.value - 1) + 3)}px`,\r\n          backgroundColor: `rgb(${item.color})`,\r\n        }}\r\n      ></div>\r\n      {item.label && <div style={{ marginBottom: '0.5rem' }}>{item.label}</div>}\r\n    </li>\r\n  ))\r\n\r\n  return (\r\n    <div>\r\n      <h4\r\n        style={{\r\n          textAlign: 'left',\r\n          fontWeight: 'bold',\r\n          marginBottom: '0.5rem',\r\n          fontSize: '0.8rem',\r\n        }}\r\n      >\r\n        {props.title}\r\n      </h4>\r\n      <p>{props.description}</p>\r\n      <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>{listItems}</ul>\r\n    </div>\r\n  )\r\n}\r\n","\r\n.carrier-viewer(:class=\"{'hide-thumbnail': !thumbnail}\"\r\n                :style='{\"background\": urlThumbnail}'\r\n                oncontextmenu=\"return false\")\r\n\r\n  .container-1\r\n    .main-panel\r\n      tour-viz.anim(v-if=\"!thumbnail\"\r\n                  :activeTab=\"activeTab\"\r\n                  :shipments=\"shownShipments\"\r\n                  :depots=\"shownDepots\"\r\n                  :legs=\"shownLegs\"\r\n                  :stopActivities=\"stopActivities\"\r\n                  :dark=\"globalState.isDarkMode\"\r\n                  :center=\"vizDetails.center\"\r\n                  :viewId=\"linkLayerId\"\r\n                  :settings=\"vizSettings\"\r\n                  :numSelectedTours=\"selectedTours.length\"\r\n                  :onClick=\"handleClick\")\r\n      ZoomButtons(v-if=\"!thumbnail\")\r\n      .xmessage(v-if=\"myState.statusMessage\") {{ myState.statusMessage }}\r\n\r\n    .right-panel(v-if=\"!thumbnail\" :darkMode=\"true\")\r\n      h3(style=\"margin-left: 0.25rem\" v-if=\"carriers.length\") {{ $t('carriers') }}\r\n\r\n      .carrier-list\r\n        .carrier(v-for=\"carrier in carriers\" :key=\"carrier.$id\"\r\n                 :class=\"{selected: carrier.$id===selectedCarrier}\"\r\n                 @click=\"handleSelectCarrier(carrier)\")\r\n          .carrier-title {{ carrier.$id }}\r\n\r\n      h4 {{ selectedCarrier || 'Details' }}\r\n\r\n\r\n      b-field.detail-buttons(v-if=\"selectedCarrier\" size=\"is-small\")\r\n\r\n        b-radio-button(v-model=\"activeTab\" native-value=\"shipments\" size=\"is-small\" type=\"is-warning\")\r\n          span {{ $t('shipments') }}\r\n        b-radio-button(v-model=\"activeTab\" native-value=\"tours\" size=\"is-small\" type=\"is-warning\")\r\n          span {{ $t('tours') }}\r\n        b-radio-button(v-model=\"activeTab\" native-value=\"vehicles\" size=\"is-small\" type=\"is-warning\")\r\n          span {{ $t('vehicles') }}\r\n        b-radio-button(v-if=\"services.length\" v-model=\"activeTab\" native-value=\"services\" size=\"is-small\" type=\"is-warning\")\r\n          span {{ $t('services') }}\r\n\r\n      .detail-area\r\n        .shipments(v-if=\"activeTab=='shipments'\")\r\n            span {{ $t('shipments')}}: {{ shipments.length}}\r\n            .leaf.tour(v-for=\"shipment,i in shipments\" :key=\"`${i}-${shipment.$id}`\"\r\n                @click=\"handleSelectShipment(shipment)\"\r\n                :class=\"{selected: shipment==selectedShipment, 'shipment-in-tour': shipmentIdsInTour.includes(shipment.$id)}\"\r\n            ) {{ `${shipment.$id}: ${shipment.$from}-${shipment.$to}` }}\r\n\r\n        .tours(v-if=\"activeTab=='tours'\")\r\n            .dropdown(v-if=\"this.plans.length > 1\" :class=\"{'is-active': dropdownIsActive}\" style=\"width: 100%\")\r\n              .dropdown-trigger(@click=\"selectDropdown()\")\r\n                button\r\n                  span Plan {{ selectedPlanIndex + 1 }}\r\n                  span.icon.is-small\r\n                    i.fas.fa-angle-down\r\n              .dropdown-menu\r\n                .dropdown-content\r\n                  a.dropdown-item(v-for=\"(plan, index) in this.plans\" @click=\"selectPlan(plan)\" :class=\"{'is-active': plan.$selected == 'true'}\") Plan {{ index + 1 }}\r\n\r\n            span {{ $t('tours')}}: {{ tours.length}}\r\n            .leaf.tour(v-for=\"tour,i in tours\" :key=\"`${i}-${tour.$id}`\"\r\n                @click=\"handleSelectTour(tour)\"\r\n                :class=\"{selected: selectedTours.includes(tour)}\") {{ `${tour.vehicleId}` }}\r\n\r\n        .vehicles(v-if=\"activeTab=='vehicles'\")\r\n            span {{ $t('vehicles')}}: {{ vehicles.length}}\r\n            .leaf.tour(v-for=\"veh,i in vehicles\" :key=\"`${i}-${veh.$id}`\") {{ veh.$id }}\r\n\r\n        .services(v-if=\"activeTab=='services'\")\r\n            span {{ $t('services')}}: {{ services.length}}\r\n            .leaf.tour(v-for=\"service,i in services\" :key=\"`${i}-${service.$id}`\") {{ `${service.$id}` }}\r\n\r\n      .switchbox\r\n        .switches\r\n          p {{$t('scaleSize')}}\r\n          b-slider.slider(:tooltip=\"false\" type=\"is-link\" size=\"is-small\" v-model=\"vizSettings.scaleFactor\")\r\n        .switches\r\n          b-switch(v-model=\"vizSettings.shipmentDotsOnTourMap\")\r\n            span(v-html=\"$t('shipmentDots')\")\r\n          b-switch(v-model=\"vizSettings.simplifyTours\")\r\n            span(v-html=\"$t('flatten')\")\r\n\r\n"],"names":["dashShaders","inject","offsetShaders","PathStyleExtension","LayerExtension","constructor","dash","offset","highPrecisionDash","super","isEnabled","layer","state","getShaders","extension","this","result","opts","mergeShaders","initializeState","context","attributeManager","getAttributeManager","addInstanced","instanceDashArrays","size","accessor","instanceDashOffsets","transform","getDashOffsets","bind","instanceOffsets","updateState","params","uniforms","dashAlignMode","props","dashJustified","dashGapPickable","Boolean","model","setUniforms","path","positionSize","positionFormat","isNested","Array","isArray","geometrySize","length","p","prevP","i","slice","projectPosition","dist","_defineProperty","getDashArray","type","value","getOffset","naturalSort","naturalSort2","a","b","oFxNcL","oFyNcL","re","sre","dre","hre","ore","s","insensitive","toLowerCase","x","replace","y","xN","split","yN","xD","parseInt","match","Date","parse","yD","cLoc","numS","Math","max","parseFloat","isNaN","ActivityColor","pickup","delivery","service","CarrierPlugin","defineComponent","name","i18n","messages","en","carriers","vehicles","services","shipments","tours","flatten","shipmentDots","scaleSize","scaleFactor","de","components","LegendColors","listItems","items","map","key","item","style","width","height","backgroundColor","color","label","createElement","marginBottom","React","textAlign","fontWeight","fontSize","title","description","listStyle","padding","margin","ToggleButton","exports","TourViz","viewState","setViewState","useState","globalStore","hoverInfo","setHoverInfo","pickupsAndDeliveries","setPickupsAndDeliveries","pickups","deliveries","dark","activeTab","numSelectedTours","depots","legs","settings","stopActivities","center","onClick","simplifyTours","shipmentDotsOnTourMap","widthScale","pow","layers","renderActivityTooltip","hoverInfo2","activity","object","className","boxShadow","position","opacity","left","top","maxWidth","paddingRight","paddingTop","shipmentIds","join","viewId","useEffect","forEach","shipment","xy","fromX","fromY","coord","push","$id","toX","toY","Object","values","PathLayer","id","data","getPath","d","ptFrom","ptTo","getColor","widthMinPixels","rounded","shadowEnabled","pickable","autoHighlight","highlightColor","parameters","depthTest","extensions","ArcLayer","getSourcePosition","points","getTargetPosition","getSourceColor","getTargetColor","getWidth","totalSize","getHeight","widthMaxPixels","widthUnits","updateTriggers","transitions","onHover","PathOffsetLayer","TextLayer","background","backgroundPadding","getBackgroundColor","visits","reduce","prev","visit","getPosition","midpoint","getText","getSize","getTextAnchor","getAlignmentBaseline","noAlloc","billboard","sizeScale","visible","ScatterplotLayer","getRadius","radiusUnits","$size","DeckGL","pickingRadius","controller","getCursor","event","onViewStateChange","handleViewState","view","e","longitude","latitude","commit","StaticMap","mapboxApiAccessToken","MAPBOX_TOKEN","mapStyle","getters","tour","vehicleId","count","shipmentsOnBoard","renderLegTooltip","numPickupsAndDeliveries","overview","tipHeight","keys","yPosition","window","innerHeight","details","renderStopTooltip","renderTooltip","ZoomButtons","root","String","required","subfolder","yamlConfig","config","thumbnail","linkLayerId","floor","random","vizSettings","scaleShipmentSizes","vizDetails","network","projection","myState","statusMessage","isRunning","searchTerm","searchEnabled","globalState","isLoaded","showHelp","speedStops","speed","legendBits","links","toggleTours","toggleVehicles","toggleShipments","toggleServices","detailContent","shipmentLookup","plans","shownShipments","shipmentIdsInTour","shownDepots","shownLegs","selectedCarrier","selectedTours","selectedPlan","selectedPlanIndex","selectedShipment","thumbnailUrl","vehicleLookup","vehicleLookupString","rgb","colorMap","colormap","nshades","format","reverse","dropdownIsActive","computed","fileApi","HTTPFileSystem","fileSystem","svnProject","$store","svnProjects","filter","slug","console","log","Error","urlThumbnail","textColor","isDarkMode","text","bg","watch","REACT_VIEW_HANDLES","updateLegendColors","buildRouteFromUrl","getVizDetails","methods","handleSelectShipment","carrier","c","handleSelectCarrier","processActivitiesInTour","stopCount","locations","vehicle","v","depotLink","$depotLinkId","linkMidpoint","prevLocation","link","plan","$shipmentId","$type","$from","$to","actType","$t","_a","from","to","__objRest","act","sCount","setupDepots","linkId","coords","selectAllTours","leg","count_route","addRouteToMap","z","concat","handleSelectTour","includes","element","stop","lastPoint","fromXY","tourNumber","capabilities","sort","processShipments","_b","$","processTours","getAllPlans","selected","selectPlan","Set","i2","add","delete","route","shipmentsOnBoard2","curr","$vehicleId","$route","project","pathMatch","sep","lastIndexOf","substring","assign","endsWith","filename","indexOf","getFileText","YAML","err","needPassword","status","files","getDirectory","replaceAll","allNetworks","f","$emit","buildThumbnail","setMapCenter","samples","Number","entries","numLinks","gap","zoom","bearing","pitch","jump","blob","getFileBlob","buffer","readBlob","arraybuffer","base64","arrayBufferToBase64","error","handleClick","clickedEmptyMap","clickedDepot","clickedLeg","vehiclesAtThisDepot","loadCarriers","carriersXML","loadFileOrGzippedFile","parseXML","alwaysArray","loadNetwork","net","fetchNetwork","MAP_STYLES_OFFLINE","linkIds","source","dest","blobString","blobToBinaryString","coroutines.run","run","pako","inflateAsync","JSON","Promise","resolve","reject","thread","RoadNetworkLoader","postMessage","filePath","onmessage","promptUserForCRS","crs","prompt","terminate","toggleLoaded","loaded","rotateColors","localStorage","setItem","ColorScheme","DarkMode","LightMode","filepath","zDataset","zSubfolder","matchingFiles","findMatchingGlobInFiles","content","selectDropdown","$selected","mounted","$nextTick","beforeDestroy","_vm","_h","$createElement","_c","_self","staticClass","class","attrs","oncontextmenu","_e","_v","_s","darkMode","staticStyle","_l","on","click","$event","callback","$$v","expression","_m","index","veh","tooltip","$set","domProps","innerHTML"],"mappings":"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"}