{"version":3,"file":"ShapeFile.844c7649.js","sources":["../../node_modules/d3-array/src/transpose.js","../../node_modules/reproject/index.js","../../node_modules/truncate-utf8-bytes/lib/truncate.js","../../node_modules/utf8-byte-length/browser.js","../../node_modules/sanitize-filename/index.js","../../node_modules/truncate-utf8-bytes/browser.js","../../src/layers/GeojsonOffsetLayer.ts","../../node_modules/@deck.gl/layers/src/geojson-layer/sub-layer-map.ts","../../src/js/screenshots.ts","../../src/components/BackgroundMapOnTop.vue","../../src/components/BackgroundMapOnTop.vue?vue&type=template&lang.js","../../src/plugins/shape-file/ModalIdColumnPicker.vue","../../src/plugins/shape-file/ModalIdColumnPicker.vue?vue&type=template&lang.js","../../src/plugins/shape-file/ShapeFile.vue","../../src/plugins/shape-file/GeojsonLayer.tsx","../../node_modules/d3-array/src/zip.js","../../src/plugins/shape-file/ShapeFile.vue?vue&type=template&lang.js"],"sourcesContent":["import min from \"./min.js\";\n\nexport default function transpose(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length(d) {\n  return d.length;\n}\n","'use strict';\n\nvar proj4 = require('proj4').hasOwnProperty('default') ? require('proj4').default : require('proj4');\n// Checks if `list` looks like a `[x, y]`.\nfunction isXY(list) {\n  return list.length >= 2 &&\n    typeof list[0] === 'number' &&\n    typeof list[1] === 'number';\n}\n\nfunction traverseCoords(coordinates, callback) {\n  if (isXY(coordinates)) return callback(coordinates);\n  return coordinates.map(function(coord){return traverseCoords(coord, callback);});\n}\n\n// Simplistic shallow clone that will work for a normal GeoJSON object.\nfunction clone(obj) {\n  if (null == obj || 'object' !== typeof obj) return obj;\n  var copy = obj.constructor();\n  for (var attr in obj) {\n    if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n  }\n  return copy;\n}\n\nfunction traverseGeoJson(geometryCb, nodeCb, geojson) {\n  if (geojson == null) return geojson;\n\n  var r = clone(geojson);\n  var self = traverseGeoJson.bind(this, geometryCb, nodeCb);\n\n  switch (geojson.type) {\n  case 'Feature':\n    r.geometry = self(geojson.geometry);\n    break;\n  case 'FeatureCollection':\n    r.features = r.features.map(self);\n    break;\n  case 'GeometryCollection':\n    r.geometries = r.geometries.map(self);\n    break;\n  default:\n    geometryCb(r);\n    break;\n  }\n\n  if (nodeCb) nodeCb(r);\n\n  return r;\n}\n\nfunction detectCrs(geojson, projs) {\n  var crsInfo = geojson.crs,\n      crs;\n\n  if (crsInfo === undefined) {\n    throw new Error('Unable to detect CRS, GeoJSON has no \"crs\" property.');\n  }\n\n  if (crsInfo.type === 'name') {\n    crs = projs[crsInfo.properties.name];\n  } else if (crsInfo.type === 'EPSG') {\n    crs = projs['EPSG:' + crsInfo.properties.code];\n  }\n\n  if (!crs) {\n    throw new Error('CRS defined in crs section could not be identified: ' + JSON.stringify(crsInfo));\n  }\n\n  return crs;\n}\n\nfunction determineCrs(crs, projs) {\n  if (typeof crs === 'string' || crs instanceof String) {\n    return projs[crs] || proj4.Proj(crs);\n  }\n\n  return crs;\n}\n\nfunction calcBbox(geojson) {\n  var min = [Number.MAX_VALUE, Number.MAX_VALUE],\n      max = [-Number.MAX_VALUE, -Number.MAX_VALUE];\n  traverseGeoJson(function(_gj) {\n    traverseCoords(_gj.coordinates, function(xy) {\n      min[0] = Math.min(min[0], xy[0]);\n      min[1] = Math.min(min[1], xy[1]);\n      max[0] = Math.max(max[0], xy[0]);\n      max[1] = Math.max(max[1], xy[1]);\n    });\n  }, null, geojson);\n  return [min[0], min[1], max[0], max[1]];\n}\n\nfunction reproject(geojson, from, to, projs) {\n  projs = projs || {};\n  if (!from) {\n    from = detectCrs(geojson, projs);\n  } else {\n    from = determineCrs(from, projs);\n  }\n\n  to = determineCrs(to, projs);\n  \n  var transformFunc = proj4(from, to).forward.bind(transformFunc);\n\n  function transform(coords) {\n    var transformed = transformFunc(coords);\n    if (coords.length === 3 && coords[2] !== undefined && transformed[2] === undefined) {\n      // If the projection doesn't explicitly handle Z coordinate, retain the old one.\n      transformed[2] = coords[2];\n    }\n    return transformed;\n  }\n\n  var transformGeometryCoords = function(gj) {\n    // No easy way to put correct CRS info into the GeoJSON,\n    // and definitely wrong to keep the old, so delete it.\n    if (gj.crs) {\n      delete gj.crs;\n    }\n    gj.coordinates = traverseCoords(gj.coordinates, transform);\n  }\n\n  var transformBbox = function(gj) {\n    if (gj.bbox) {\n      gj.bbox = calcBbox(gj);\n    }\n  }\n\n  return traverseGeoJson(transformGeometryCoords, transformBbox, geojson);\n}\n\nmodule.exports = {\n  detectCrs: detectCrs,\n\n  reproject: reproject,\n\n  reverse: function(geojson) {\n    return traverseGeoJson(function(gj) {\n      gj.coordinates = traverseCoords(gj.coordinates, function(xy) {\n        return [ xy[1], xy[0] ];\n      });\n    }, null, geojson);\n  },\n\n  toWgs84: function(geojson, from, projs) {\n    return reproject(geojson, from, proj4.WGS84, projs);\n  }\n};\n","'use strict';\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\n// Truncate string by size in bytes\nmodule.exports = function truncate(getLength, string, byteLength) {\n  if (typeof string !== \"string\") {\n    throw new Error(\"Input must be string\");\n  }\n\n  var charLength = string.length;\n  var curByteLength = 0;\n  var codePoint;\n  var segment;\n\n  for (var i = 0; i < charLength; i += 1) {\n    codePoint = string.charCodeAt(i);\n    segment = string[i];\n\n    if (isHighSurrogate(codePoint) && isLowSurrogate(string.charCodeAt(i + 1))) {\n      i += 1;\n      segment += string[i];\n    }\n\n    curByteLength += getLength(segment);\n\n    if (curByteLength === byteLength) {\n      return string.slice(0, i + 1);\n    }\n    else if (curByteLength > byteLength) {\n      return string.slice(0, i - segment.length + 1);\n    }\n  }\n\n  return string;\n};\n\n","'use strict';\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\n// Truncate string by size in bytes\nmodule.exports = function getByteLength(string) {\n  if (typeof string !== \"string\") {\n    throw new Error(\"Input must be string\");\n  }\n\n  var charLength = string.length;\n  var byteLength = 0;\n  var codePoint = null;\n  var prevCodePoint = null;\n  for (var i = 0; i < charLength; i++) {\n    codePoint = string.charCodeAt(i);\n    // handle 4-byte non-BMP chars\n    // low surrogate\n    if (isLowSurrogate(codePoint)) {\n      // when parsing previous hi-surrogate, 3 is added to byteLength\n      if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) {\n        byteLength += 1;\n      }\n      else {\n        byteLength += 3;\n      }\n    }\n    else if (codePoint <= 0x7f ) {\n      byteLength += 1;\n    }\n    else if (codePoint >= 0x80 && codePoint <= 0x7ff) {\n      byteLength += 2;\n    }\n    else if (codePoint >= 0x800 && codePoint <= 0xffff) {\n      byteLength += 3;\n    }\n    prevCodePoint = codePoint;\n  }\n\n  return byteLength;\n};\n","/*jshint node:true*/\n'use strict';\n\n/**\n * Replaces characters in strings that are illegal/unsafe for filenames.\n * Unsafe characters are either removed or replaced by a substitute set\n * in the optional `options` object.\n *\n * Illegal Characters on Various Operating Systems\n * / ? < > \\ : * | \"\n * https://kb.acronis.com/content/39790\n *\n * Unicode Control codes\n * C0 0x00-0x1f & C1 (0x80-0x9f)\n * http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *\n * Reserved filenames on Unix-based systems (\".\", \"..\")\n * Reserved filenames in Windows (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\",\n * \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\",\n * \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", and\n * \"LPT9\") case-insesitively and with or without filename extensions.\n *\n * Capped at 255 characters in length.\n * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n *\n * @param  {String} input   Original filename\n * @param  {Object} options {replacement: String | Function }\n * @return {String}         Sanitized filename\n */\n\nvar truncate = require(\"truncate-utf8-bytes\");\n\nvar illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\nvar controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reservedRe = /^\\.+$/;\nvar windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nvar windowsTrailingRe = /[\\. ]+$/;\n\nfunction sanitize(input, replacement) {\n  if (typeof input !== 'string') {\n    throw new Error('Input must be string');\n  }\n  var sanitized = input\n    .replace(illegalRe, replacement)\n    .replace(controlRe, replacement)\n    .replace(reservedRe, replacement)\n    .replace(windowsReservedRe, replacement)\n    .replace(windowsTrailingRe, replacement);\n  return truncate(sanitized, 255);\n}\n\nmodule.exports = function (input, options) {\n  var replacement = (options && options.replacement) || '';\n  var output = sanitize(input, replacement);\n  if (replacement === '') {\n    return output;\n  }\n  return sanitize(output, '');\n};\n","'use strict';\n\nvar truncate = require(\"./lib/truncate\");\nvar getLength = require(\"utf8-byte-length/browser\");\nmodule.exports = truncate.bind(null, getLength);\n","import { GeoJsonLayer } from '@deck.gl/layers'\r\nimport PathOffsetLayer from '@/layers/PathOffsetLayer'\r\nimport { forwardProps } from '@deck.gl/layers/src/geojson-layer/sub-layer-map'\r\n\r\nconst OFFSET_TYPE = {\r\n  NONE: 0,\r\n  LEFT: 1,\r\n  RIGHT: 2,\r\n}\r\n\r\nexport const LINE_LAYER = {\r\n  type: PathOffsetLayer,\r\n  props: {\r\n    lineWidthUnits: 'widthUnits',\r\n    lineWidthScale: 'widthScale',\r\n    lineWidthMinPixels: 'widthMinPixels',\r\n    lineWidthMaxPixels: 'widthMaxPixels',\r\n    lineJointRounded: 'jointRounded',\r\n    lineCapRounded: 'capRounded',\r\n    lineMiterLimit: 'miterLimit',\r\n    lineBillboard: 'billboard',\r\n    getLineColor: 'getColor',\r\n    getLineWidth: 'getWidth',\r\n  },\r\n}\r\n\r\nexport default class GeojsonOffsetLayer extends GeoJsonLayer {\r\n  constructor(props: any) {\r\n    super(props)\r\n  }\r\n\r\n  // this is copied directly from @deck.gl/layers/geojson-layer\r\n  _renderLineLayers() {\r\n    const { extruded, stroked } = this.props\r\n    const { layerProps } = this.state\r\n    const polygonStrokeLayerId = 'polygons-stroke'\r\n    const lineStringsLayerId = 'linestrings'\r\n\r\n    const PolygonStrokeLayer =\r\n      !extruded &&\r\n      stroked &&\r\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) &&\r\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type)\r\n    const LineStringsLayer =\r\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) &&\r\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type)\r\n\r\n    if (PolygonStrokeLayer || LineStringsLayer) {\r\n      const forwardedProps = forwardProps(this, LINE_LAYER.props)\r\n\r\n      return [\r\n        PolygonStrokeLayer &&\r\n          new PolygonStrokeLayer(\r\n            forwardedProps,\r\n            this.getSubLayerProps({\r\n              id: polygonStrokeLayerId,\r\n              updateTriggers: forwardedProps.updateTriggers,\r\n            }),\r\n            layerProps.polygonsOutline\r\n          ),\r\n\r\n        LineStringsLayer &&\r\n          new LineStringsLayer(\r\n            forwardedProps,\r\n            this.getSubLayerProps({\r\n              id: lineStringsLayerId,\r\n              updateTriggers: forwardedProps.updateTriggers,\r\n            }),\r\n            layerProps.lines\r\n          ),\r\n      ]\r\n    }\r\n    return null\r\n  }\r\n\r\n  getShaders() {\r\n    return {\r\n      ...super.getShaders(),\r\n      inject: {\r\n        'vs:#decl': `\r\n            attribute float instanceOffset;\r\n            varying float offset;\r\n            `,\r\n        'vs:#main-start': `\r\n            offset = instanceOffset;\r\n            `,\r\n        'fs:#decl': `\r\n            varying float offset;\r\n            `,\r\n        'fs:#main-start': `\r\n            if (offset == 1.0 && vPathPosition.x < 0.0) {\r\n                discard;\r\n            }\r\n            if (offset == 2.0 && vPathPosition.x > 0.0) {\r\n                discard;\r\n            }\r\n            if (offset == 0.0 && abs(vPathPosition.x) > 0.5) {\r\n                discard;\r\n            }\r\n        `,\r\n      },\r\n    }\r\n  }\r\n}\r\n\r\nGeojsonOffsetLayer.layerName = 'GeojsonOffsetLayer'\r\nGeojsonOffsetLayer.defaultProps = {\r\n  getOffset: { type: 'accessor', value: OFFSET_TYPE.RIGHT },\r\n}\r\n\r\n// /** DeckGL **/\r\n// new deck.DeckGL({\r\n//   container: 'container',\r\n//   mapboxApiAccessToken: '',\r\n//   longitude: -122.408,\r\n//   latitude: 37.785,\r\n//   zoom: 16,\r\n//   pitch: 0,\r\n//   layers: [\r\n//     new deck.PathLayer({\r\n//       data:\r\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/website/bart-lines.json',\r\n//       getPath: d => d.path,\r\n//       getColor: [0, 0, 0],\r\n//       getWidth: 50,\r\n//     }),\r\n//     new MyPathLayer({\r\n//       data:\r\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/website/bart-lines.json',\r\n//       getPath: d => d.path,\r\n//       getColor: [255, 0, 0],\r\n//       getOffset: (d, { index }) => index % 3,\r\n//       getWidth: 50,\r\n//       pickable: true,\r\n//       autoHighlight: true,\r\n//     }),\r\n//   ],\r\n// })\r\n","import {CompositeLayer, Layer} from '@deck.gl/core';\n\nimport IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\n\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\n\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\n\nexport function getDefaultProps({\n  type,\n  props\n}: {\n  type: typeof Layer;\n  props: Record<string, string>;\n}): Record<string, any> {\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\n\nexport function forwardProps(\n  layer: CompositeLayer,\n  mapping: Record<string, string>\n): Record<string, any> {\n  const {transitions, updateTriggers} = layer.props;\n  const result: Record<string, any> = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      // isAccessor\n      value = (layer as any).getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}\n","// screenshot helper functions\r\n// found most of this at:\r\n// (1) https://github.com/visgl/deck.gl/issues/4436\r\n// (2) https://stackoverflow.com/questions/32096540/merge-two-datauris-to-create-a-single-image\r\n\r\nimport { DeckGLLayer } from '@flowmap.gl/core'\r\n\r\nexport async function savePNG(layer: DeckGLLayer, backgroundCanvas: HTMLCanvasElement) {\r\n  const deckLayerImage = layer.context.deck.canvas.toDataURL('image/png')\r\n  const backgroundImage = backgroundCanvas?.toDataURL('image/png')\r\n\r\n  const layerData = []\r\n  if (backgroundImage) layerData.push(backgroundImage)\r\n  layerData.push(deckLayerImage)\r\n\r\n  // convert deck+map to image URL, with added watermark\r\n  const mergedImage = await mergeImageURIs({\r\n    width: layer.context.deck.canvas.width,\r\n    height: layer.context.deck.canvas.height,\r\n    imageDataURLs: layerData,\r\n  })\r\n\r\n  var element = document.createElement('a')\r\n  element.setAttribute('href', mergedImage)\r\n  element.setAttribute('download', 'screenshot.png')\r\n  element.style.display = 'none'\r\n\r\n  document.body.appendChild(element)\r\n  element.click()\r\n  document.body.removeChild(element)\r\n}\r\n\r\n// copypasta from\r\n// https://stackoverflow.com/questions/32096540/merge-two-datauris-to-create-a-single-image\r\nfunction mergeImageURIs(props: { width: number; height: number; imageDataURLs: string[] }) {\r\n  return new Promise<any>((resolve, reject) => {\r\n    var canvas = document.createElement('canvas')\r\n    canvas.width = props.width\r\n    canvas.height = props.height\r\n\r\n    Promise.all(props.imageDataURLs.map(dataURL => add2canvas(canvas, dataURL))).then(() => {\r\n      // add watermark\r\n      const ctx = canvas.getContext('2d') as any\r\n      const boxLeft = canvas.width - 152\r\n      const boxTop = canvas.height - 8\r\n      ctx.beginPath()\r\n      ctx.rect(boxLeft - 4, boxTop - 14, 158, 22)\r\n      ctx.fillStyle = '#ffffff44'\r\n      ctx.fill()\r\n      ctx.font = '11px Arial'\r\n      ctx.fillStyle = '#888'\r\n      ctx.fillText('© Mapbox  © OpenStreetMap', boxLeft, boxTop)\r\n\r\n      // return final dataURL with fully-built image\r\n      resolve(canvas.toDataURL('image/png'))\r\n    })\r\n  })\r\n}\r\n\r\nfunction add2canvas(canvas: any, dataURL: string) {\r\n  return new Promise((resolve, reject) => {\r\n    if (!canvas) reject()\r\n    if (!dataURL) reject()\r\n\r\n    var image = new Image()\r\n\r\n    image.onload = function () {\r\n      canvas.getContext('2d').drawImage(this, 0, 0)\r\n      resolve(true)\r\n    }\r\n    image.src = dataURL\r\n  })\r\n}\r\n\r\nexport default { savePNG }\r\n","<template lang=\"pug\">\r\n.mymaplibre-map(:id=\"containerId\")\r\n  .mymap(:id=\"mapId\")\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport maplibregl, { MapMouseEvent, PositionOptions } from 'maplibre-gl'\r\n\r\nimport globalStore from '@/store'\r\nimport { ColorScheme } from '@/Globals'\r\n\r\nconst Component = defineComponent({\r\n  name: 'BackgroundMapOnTop',\r\n  components: {},\r\n  data: () => {\r\n    return {\r\n      containerId: `c${Math.floor(1e12 * Math.random())}`,\r\n      globalState: globalStore.state,\r\n      isDarkMode: false,\r\n      isMapMoving: false,\r\n      mapId: `map-${Math.floor(1e12 * Math.random())}`,\r\n      mymap: {} as maplibregl.Map,\r\n      resizer: null as ResizeObserver | null,\r\n    }\r\n  },\r\n  computed: {},\r\n  methods: {\r\n    setupResizer() {\r\n      this.resizer = new ResizeObserver(() => {\r\n        this.mymap.resize()\r\n      })\r\n\r\n      const viz = document.getElementById(this.containerId) as HTMLElement\r\n      this.resizer.observe(viz)\r\n    },\r\n    handleMapMotion() {\r\n      const mapCamera = {\r\n        longitude: this.mymap.getCenter().lng,\r\n        latitude: this.mymap.getCenter().lat,\r\n        bearing: this.mymap.getBearing(),\r\n        zoom: this.mymap.getZoom(),\r\n        pitch: this.mymap.getPitch(),\r\n      }\r\n\r\n      this.$store.commit('setMapCamera', mapCamera)\r\n      if (!this.isMapMoving) this.isMapMoving = true\r\n    },\r\n\r\n    async setupMap() {\r\n      const styles = globalStore.state.mapStyles\r\n      try {\r\n        this.mymap = new maplibregl.Map({\r\n          container: this.mapId,\r\n          style: this.isDarkMode ? styles.transparentDark : styles.transparentLight,\r\n          logoPosition: 'top-left',\r\n        })\r\n\r\n        // make sure it starts up aligned with main map\r\n        const view = { ...this.globalState.viewState } as any\r\n        this.mymap.jumpTo(view)\r\n      } catch (e) {\r\n        console.error('HUH?' + e)\r\n        return\r\n      }\r\n\r\n      // Start doing stuff AFTER the MapLibre library has fully initialized\r\n      this.mymap.on('load', this.mapIsReady)\r\n      this.mymap.on('move', this.handleMapMotion)\r\n\r\n      // We are always in thumbnail mode oo-/\r\n      // if (this.thumbnail) {\r\n      if (true) {\r\n        let baubles = document.getElementsByClassName(\r\n          'mapboxgl-ctrl mapboxgl-ctrl-attrib mapboxgl-compact'\r\n        )\r\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\r\n\r\n        baubles = document.getElementsByClassName('mapboxgl-ctrl mapboxgl-ctrl-group')\r\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\r\n\r\n        baubles = document.getElementsByClassName('mapboxgl-ctrl-logo')\r\n        for (const elem of baubles) elem.setAttribute('style', 'display: none')\r\n      } else {\r\n        let baubles = document.getElementsByClassName('mapboxgl-ctrl-logo')\r\n        for (const elem of baubles) elem.setAttribute('style', 'margin-bottom: 3rem;')\r\n      }\r\n    },\r\n\r\n    async mapIsReady() {\r\n      this.setupResizer()\r\n    },\r\n\r\n    viewMoved(value: any) {\r\n      if (!this.mymap || this.isMapMoving) {\r\n        this.isMapMoving = false\r\n        return\r\n      }\r\n\r\n      const { bearing, longitude, latitude, zoom, pitch } = value\r\n\r\n      // sometimes closing a view returns a null map, ignore it!\r\n      if (!zoom) return\r\n\r\n      this.mymap.off('move', this.handleMapMotion)\r\n\r\n      this.mymap.jumpTo({\r\n        bearing,\r\n        zoom,\r\n        center: [longitude, latitude],\r\n        pitch,\r\n      })\r\n\r\n      this.mymap.on('move', this.handleMapMotion)\r\n    },\r\n  },\r\n  watch: {\r\n    '$store.state.viewState'(value: any) {\r\n      this.viewMoved(value)\r\n    },\r\n\r\n    '$store.state.colorScheme'() {\r\n      this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\r\n      if (!this.mymap) return\r\n\r\n      const styles = globalStore.state.mapStyles\r\n      this.mymap.setStyle(this.isDarkMode ? styles.transparentDark : styles.transparentLight)\r\n\r\n      this.mymap.on('style.load', () => {})\r\n    },\r\n\r\n    '$store.state.resizeEvents'() {\r\n      if (this.mymap) this.mymap.resize()\r\n    },\r\n  },\r\n  async mounted() {\r\n    this.isDarkMode = this.$store.state.colorScheme === ColorScheme.DarkMode\r\n    this.setupMap()\r\n  },\r\n})\r\nexport default Component\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.mymaplibre-map {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.mymap {\r\n  height: 100%;\r\n}\r\n</style>\r\n","\r\n.mymaplibre-map(:id=\"containerId\")\r\n  .mymap(:id=\"mapId\")\r\n","<template lang=\"pug\">\r\n.join-picker\r\n  .picker-panel\r\n    p.header: b Select ID Column\r\n    p.subheader Which property contains the unique ID for each feature?\r\n    .split-panel\r\n      .column\r\n          p: b {{ data1.title }}\r\n          .options-box\r\n            p(v-for=\"(row,i) in columns\" :key=\"'@'+i\"\r\n              :class=\"{'selected': i===selected1}\"\r\n              @click=\"selected1=i\"\r\n            ) {{ row }}\r\n\r\n    .buttons\r\n      .button-holder\r\n        button.button(@click=\"clickedCancel\") Cancel\r\n        button.button.is-primary(@click=\"clickedJoin\") Select\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nconst i18n = {\r\n  messages: {\r\n    en: {},\r\n    de: {},\r\n  },\r\n}\r\n\r\ninterface DataSet {\r\n  title: string\r\n  columns: string[]\r\n}\r\n\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\n// Reasonable guesses as to the ID column in the shapefile\r\nconst ID_GUESSES = ['id', 'ID', 'TAZ', 'AB']\r\n\r\nexport default defineComponent({\r\n  name: 'ModalJoinColumnPicker',\r\n  i18n,\r\n  props: {\r\n    data1: { type: Object as PropType<DataSet>, required: true },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      selected1: 0,\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    columns(): string[] {\r\n      return [...this.data1.columns].sort()\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    clickedJoin() {\r\n      this.$emit('join', this.columns[this.selected1])\r\n    },\r\n\r\n    clickedCancel() {\r\n      this.$emit('join', '')\r\n    },\r\n  },\r\n  mounted() {\r\n    // pick a plausible default for the ID column\r\n    for (const guess of ID_GUESSES) {\r\n      const found = this.columns.indexOf(guess)\r\n      if (found > -1) {\r\n        this.selected1 = found\r\n        break\r\n      }\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.join-picker {\r\n  background-color: #000022aa;\r\n  z-index: 10000;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  user-select: none;\r\n  color: #333;\r\n}\r\n\r\n.picker-panel {\r\n  position: relative;\r\n  top: 25%;\r\n  background-color: #dcdce9;\r\n  max-width: 30rem;\r\n  margin: 0 auto;\r\n  box-shadow: 0 2px 24px 5px #00000066;\r\n  border-radius: 4px;\r\n}\r\n\r\n.split-panel {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.column {\r\n  padding: 0 0;\r\n  margin: 0.5rem 0.75rem;\r\n}\r\n\r\n.options-box {\r\n  border: 1px solid #bbb;\r\n  background-color: white;\r\n  max-height: 20rem;\r\n  overflow-y: auto;\r\n}\r\n\r\n.options-box p {\r\n  padding: 0 0.25rem;\r\n}\r\n\r\n.linky {\r\n  margin-top: 3rem;\r\n}\r\n\r\n.header {\r\n  background-color: white;\r\n  padding: 0.25rem 0.75rem;\r\n  border-radius: 4px;\r\n  font-size: 1.2rem;\r\n}\r\n\r\np.selected {\r\n  background-color: #e8ee67;\r\n}\r\n\r\n.subheader {\r\n  padding: 0.25rem 0.75rem;\r\n}\r\n\r\n.button-holder {\r\n  margin: 0.25rem 0.75rem 0.25rem auto;\r\n}\r\n</style>\r\n","\r\n.join-picker\r\n  .picker-panel\r\n    p.header: b Select ID Column\r\n    p.subheader Which property contains the unique ID for each feature?\r\n    .split-panel\r\n      .column\r\n          p: b {{ data1.title }}\r\n          .options-box\r\n            p(v-for=\"(row,i) in columns\" :key=\"'@'+i\"\r\n              :class=\"{'selected': i===selected1}\"\r\n              @click=\"selected1=i\"\r\n            ) {{ row }}\r\n\r\n    .buttons\r\n      .button-holder\r\n        button.button(@click=\"clickedCancel\") Cancel\r\n        button.button.is-primary(@click=\"clickedJoin\") Select\r\n\r\n","<template lang=\"pug\">\r\n.map-layout(:class=\"{'hide-thumbnail': !thumbnail}\"\r\n            :style='{\"background\": urlThumbnail}'\r\n            oncontextmenu=\"return false\")\r\n\r\n  .status-bar(v-show=\"statusText\") {{ statusText }}\r\n\r\n  modal-id-column-picker(v-if=\"showJoiner\"\r\n    v-bind=\"datasetJoinSelector\"\r\n    @join=\"cbDatasetJoined\"\r\n  )\r\n\r\n  .area-map(v-if=\"!thumbnail\" :id=\"`container-${layerId}`\")\r\n    //- drawing-tool.draw-tool(v-if=\"isLoaded && !thumbnail\")\r\n\r\n    geojson-layer(v-if=\"!needsInitialMapExtent\"\r\n      :viewId=\"layerId\"\r\n      :fillColors=\"dataFillColors\"\r\n      :featureDataTable=\"boundaryDataTable\"\r\n      :lineColors=\"dataLineColors\"\r\n      :lineWidths=\"dataLineWidths\"\r\n      :fillHeights=\"dataFillHeights\"\r\n      :screenshot=\"triggerScreenshot\"\r\n      :calculatedValues=\"dataCalculatedValues\"\r\n      :calculatedValueLabel=\"dataCalculatedValueLabel\"\r\n      :normalizedValues=\"dataNormalizedValues\"\r\n      :featureFilter=\"boundaryFilters\"\r\n      :opacity=\"sliderOpacity\"\r\n      :pointRadii=\"dataPointRadii\"\r\n      :tooltip=\"vizDetails.tooltip\"\r\n      :cbTooltip=\"cbTooltip\"\r\n    )\r\n    //- :features=\"useCircles ? centroids: boundaries\"\r\n\r\n    //- background-map-on-top(v-if=\"isLoaded\")\r\n\r\n    viz-configurator(v-if=\"isLoaded\"\r\n      :embedded=\"isEmbedded\"\r\n      :sections=\"configuratorSections\"\r\n      :fileSystem=\"fileSystem\"\r\n      :subfolder=\"subfolder\"\r\n      :yamlConfig=\"generatedExportFilename\"\r\n      :vizDetails=\"vizDetails\"\r\n      :datasets=\"datasets\"\r\n      :legendStore=\"legendStore\"\r\n      :filterDefinitions=\"currentUIFilterDefinitions\"\r\n      @update=\"changeConfiguration\"\r\n      @screenshot=\"takeScreenshot\"\r\n    )\r\n\r\n    .details-panel(v-if=\"tooltipHtml && !statusText\" v-html=\"tooltipHtml\")\r\n\r\n  zoom-buttons(v-if=\"isLoaded && !thumbnail\")\r\n\r\n  .config-bar(v-if=\"!thumbnail && !isEmbedded && isLoaded && Object.keys(filters).length\"\r\n    :class=\"{'is-standalone': !configFromDashboard, 'is-disabled': !isLoaded}\")\r\n\r\n    //- Filter pickers\r\n    .filter(v-for=\"filter in Object.keys(filters)\")\r\n      p {{ filter }}\r\n      b-dropdown(\r\n        v-model=\"filters[filter].active\"\r\n        :scrollable=\"filters[filter].active.length > 10\"\r\n        max-height=\"250\"\r\n        multiple\r\n        @change=\"handleUserSelectedNewFilters(filter)\"\r\n        aria-role=\"list\" :mobile-modal=\"false\" :close-on-click=\"true\"\r\n      )\r\n        template(#trigger=\"{ active }\")\r\n          b-button.is-primary(\r\n            :type=\"filters[filter].active.length ? '' : 'is-outlined'\"\r\n            :label=\"filterLabel(filter)\"\r\n          )\r\n\r\n        b-dropdown-item(v-for=\"option in filters[filter].options\"\r\n          :key=\"option\" :value=\"option\" aria-role=\"listitem\") {{ option }}\r\n\r\n    //- .map-type-buttons(v-if=\"isAreaMode\")\r\n    //-   img.img-button(@click=\"showCircles(false)\" src=\"../../assets/btn-polygons.jpg\" title=\"Shapes\")\r\n    //-   img.img-button(@click=\"showCircles(true)\" src=\"../../assets/btn-circles.jpg\" title=\"Circles\")\r\n\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\nimport { group, zip, sum } from 'd3-array'\r\n\r\nimport readBlob from 'read-blob'\r\nimport reproject from 'reproject'\r\nimport Sanitize from 'sanitize-filename'\r\nimport * as shapefile from 'shapefile'\r\nimport * as turf from '@turf/turf'\r\nimport YAML from 'yaml'\r\n\r\nimport globalStore from '@/store'\r\nimport {\r\n  DataTable,\r\n  DataTableColumn,\r\n  DataType,\r\n  FileSystemConfig,\r\n  VisualizationPlugin,\r\n  DEFAULT_PROJECTION,\r\n  REACT_VIEW_HANDLES,\r\n  Status,\r\n} from '@/Globals'\r\n\r\nimport GeojsonLayer from './GeojsonLayer'\r\nimport BackgroundMapOnTop from '@/components/BackgroundMapOnTop.vue'\r\nimport ColorWidthSymbologizer from '@/js/ColorsAndWidths'\r\nimport VizConfigurator from '@/components/viz-configurator/VizConfigurator.vue'\r\nimport ModalIdColumnPicker from './ModalIdColumnPicker.vue'\r\nimport ZoomButtons from '@/components/ZoomButtons.vue'\r\nimport DrawingTool from '@/components/DrawingTool/DrawingTool.vue'\r\n\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport DashboardDataManager, { FilterDefinition, checkFilterValue } from '@/js/DashboardDataManager'\r\nimport { arrayBufferToBase64 } from '@/js/util'\r\nimport { CircleRadiusDefinition } from '@/components/viz-configurator/CircleRadius.vue'\r\nimport { FillColorDefinition } from '@/components/viz-configurator/FillColors.vue'\r\nimport { LineColorDefinition } from '@/components/viz-configurator/LineColors.vue'\r\nimport { LineWidthDefinition } from '@/components/viz-configurator/LineWidths.vue'\r\nimport { FillHeightDefinition } from '@/components/viz-configurator/FillHeight.vue'\r\nimport { DatasetDefinition } from '@/components/viz-configurator/AddDatasets.vue'\r\nimport Coords from '@/js/Coords'\r\nimport LegendStore from '@/js/LegendStore'\r\n\r\ninterface FilterDetails {\r\n  column: string\r\n  label?: string\r\n  options: any[]\r\n  active: any[]\r\n  dataset?: any\r\n}\r\n\r\nconst MyComponent = defineComponent({\r\n  name: 'ShapeFilePlugin',\r\n  components: {\r\n    BackgroundMapOnTop,\r\n    GeojsonLayer,\r\n    ModalIdColumnPicker,\r\n    VizConfigurator,\r\n    ZoomButtons,\r\n    DrawingTool,\r\n  },\r\n\r\n  props: {\r\n    root: { type: String, required: true },\r\n    subfolder: { type: String, required: true },\r\n    datamanager: { type: Object as PropType<DashboardDataManager> },\r\n    configFromDashboard: { type: Object as any },\r\n    yamlConfig: String,\r\n    thumbnail: Boolean,\r\n    // fsConfig: { type: Object as PropType<FileSystemConfig> },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      boundaries: [] as any[],\r\n      centroids: [] as any[],\r\n      cbDatasetJoined: undefined as any,\r\n      legendStore: new LegendStore(),\r\n      chosenNewFilterColumn: '',\r\n      boundaryDataTable: {} as DataTable,\r\n      dataFillColors: '#888' as string | Uint8Array,\r\n      dataLineColors: '' as string | Uint8Array,\r\n      dataLineWidths: 1 as number | Float32Array,\r\n      dataPointRadii: 5 as number | Float32Array,\r\n      dataFillHeights: 0 as number | Float32Array,\r\n      dataCalculatedValues: null as Float32Array | null,\r\n      dataNormalizedValues: null as Float32Array | null,\r\n      constantLineWidth: null as null | number,\r\n      dataCalculatedValueLabel: '',\r\n\r\n      globalStore,\r\n      globalState: globalStore.state,\r\n      layerId: Math.floor(1e12 * Math.random()),\r\n\r\n      activeColumn: '',\r\n      useCircles: false,\r\n      sliderOpacity: 100,\r\n\r\n      maxValue: 1000,\r\n      expColors: false,\r\n      isLoaded: false,\r\n      isAreaMode: true,\r\n      statusText: 'Loading...',\r\n\r\n      // Filters. Key is column id; value array is empty for \"all\" or a list of \"or\" values\r\n      filters: {} as { [column: string]: FilterDetails },\r\n\r\n      needsInitialMapExtent: true,\r\n      datasetJoinColumn: '',\r\n      featureJoinColumn: '',\r\n      triggerScreenshot: 0,\r\n\r\n      datasetKeyToFilename: {} as any,\r\n\r\n      datasetJoinSelector: {} as { [id: string]: { title: string; columns: string[] } },\r\n      showJoiner: false,\r\n\r\n      // DataManager might be passed in from the dashboard; or we might be\r\n      // in single-view mode, in which case we need to create one for ourselves\r\n      myDataManager: this.datamanager || new DashboardDataManager(this.root, this.subfolder),\r\n\r\n      config: {} as any,\r\n      // these are the settings defined in the UI\r\n      currentUIFilterDefinitions: {} as any,\r\n      currentUIFillColorDefinitions: {} as any,\r\n      currentUILineColorDefinitions: {} as any,\r\n\r\n      // these are the processed filter defs passed to the data manager\r\n      filterDefinitions: [] as FilterDefinition[],\r\n\r\n      isEmbedded: false,\r\n      resizer: null as null | ResizeObserver,\r\n      boundaryFilters: new Float32Array(0),\r\n      thumbnailUrl: \"url('assets/thumbnail.jpg') no-repeat;\",\r\n      boundaryJoinLookups: {} as { [column: string]: { [lookup: string | number]: number } },\r\n      datasetValuesColumn: '',\r\n\r\n      tooltipHtml: '',\r\n\r\n      vizDetails: {\r\n        title: '',\r\n        description: '',\r\n        datasets: {} as { [id: string]: { file: string; join: string } },\r\n        useSlider: false,\r\n        showDifferences: false,\r\n        shpFile: '',\r\n        dbfFile: '',\r\n        network: '',\r\n        geojsonFile: '',\r\n        projection: '',\r\n        widthFactor: null as any,\r\n        thumbnail: '',\r\n        sum: false,\r\n        filters: [] as { [filterId: string]: any }[],\r\n        shapes: '' as string | { file: string; join: string },\r\n        zoom: null as number | null,\r\n        center: null as any[] | null,\r\n        pitch: null as number | null,\r\n        bearing: null as number | null,\r\n        display: {\r\n          fill: {} as any,\r\n          fillHeight: {} as any,\r\n          color: {} as any,\r\n          width: {} as any,\r\n          lineColor: {} as any,\r\n          lineWidth: {} as any,\r\n          radius: {} as any,\r\n        },\r\n        tooltip: [] as string[],\r\n      },\r\n\r\n      datasets: {} as { [id: string]: DataTable },\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystem, globalStore)\r\n    },\r\n\r\n    fileSystem(): FileSystemConfig {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === this.root\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    configuratorSections(): string[] {\r\n      if (this.isAreaMode)\r\n        return ['fill-color', 'fill-height', 'line-color', 'line-width', 'circle-radius', 'filters']\r\n      else return ['line-color', 'line-width', 'filters']\r\n    },\r\n\r\n    datasetChoices(): string[] {\r\n      return Object.keys(this.datasets)\r\n    },\r\n\r\n    generatedExportFilename(): string {\r\n      let filename = Sanitize(this.yamlConfig ?? '')\r\n      filename = filename.replaceAll(' ', '-')\r\n\r\n      if (!filename.startsWith('viz-map-')) filename = 'viz-map-' + filename\r\n      if (!filename.endsWith('.yml') && !filename.endsWith('.yaml')) filename = filename + '.yaml'\r\n\r\n      return filename\r\n    },\r\n\r\n    urlThumbnail(): string {\r\n      return this.thumbnailUrl\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    'globalState.viewState'() {\r\n      if (!REACT_VIEW_HANDLES[this.layerId]) return\r\n      REACT_VIEW_HANDLES[this.layerId]()\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    // incrementing screenshot count triggers the screenshot.\r\n    takeScreenshot() {\r\n      this.triggerScreenshot++\r\n    },\r\n\r\n    setEmbeddedMode() {\r\n      if ('embed' in this.$route.query) {\r\n        console.log('EMBEDDED MODE')\r\n        this.isEmbedded = true\r\n        this.$store.commit('setShowLeftBar', false)\r\n        this.$store.commit('setFullWidth', true)\r\n      }\r\n    },\r\n\r\n    setupLogoMover() {\r\n      this.resizer = new ResizeObserver(this.moveLogo)\r\n      const deckmap = document.getElementById(`container-${this.layerId}`) as HTMLElement\r\n      this.resizer.observe(deckmap)\r\n    },\r\n\r\n    moveLogo() {\r\n      const deckmap = document.getElementById(`container-${this.layerId}`) as HTMLElement\r\n      const logo = deckmap?.querySelector('.mapboxgl-ctrl-bottom-left') as HTMLElement\r\n      if (logo) {\r\n        const right = deckmap.clientWidth > 640 ? '280px' : '36px'\r\n        logo.style.right = right\r\n      }\r\n    },\r\n\r\n    columnsInDataset(datasetId: string) {\r\n      const data = this.datasets[datasetId]\r\n      return Object.keys(data)\r\n    },\r\n\r\n    filterShapesNow() {\r\n      // shape filters only\r\n      const shapeFilters = this.filterDefinitions.filter(f => f.dataset === 'shapes')\r\n\r\n      this.boundaryFilters = new Float32Array(this.boundaries.length)\r\n\r\n      // show all elements if there are no shapefilters defined\r\n      if (!shapeFilters.length) return\r\n\r\n      const isLTGT = /^(<|>)/ // starts with < or >\r\n\r\n      for (const filter of shapeFilters) {\r\n        // console.log('filter >>>:', filter)\r\n        let spec = filter.value\r\n        let conditional = ''\r\n\r\n        // check categorical\r\n        if (spec == '@categorical') {\r\n          conditional = '@categorical'\r\n          spec = ''\r\n        }\r\n        // check LT/GT\r\n        else if (isLTGT.test(spec)) {\r\n          if (spec.startsWith('<=')) {\r\n            conditional = '<='\r\n            spec = parseFloat(spec.substring(2).trim())\r\n          } else if (spec.startsWith('>=')) {\r\n            conditional = '>='\r\n            spec = parseFloat(spec.substring(2).trim())\r\n          } else if (spec.startsWith('<')) {\r\n            conditional = '<'\r\n            spec = parseFloat(spec.substring(1).trim())\r\n          } else if (spec.startsWith('>')) {\r\n            conditional = '>'\r\n            spec = parseFloat(spec.substring(1).trim())\r\n          }\r\n        }\r\n        // handle case where we are testing equal/inequal and its a \"numeric\" string\r\n        else {\r\n          if (typeof spec === 'string') {\r\n            // handle a comma-separated list\r\n            if (spec.indexOf(',') > -1) {\r\n              spec = spec\r\n                .split(',')\r\n                .map(v => v.trim())\r\n                .map(v => (Number.isNaN(parseFloat(v)) ? v : parseFloat(v)))\r\n            } else {\r\n              const numericString = parseFloat(spec)\r\n              if (!Number.isNaN(numericString)) spec = numericString\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!Array.isArray(spec)) spec = [spec]\r\n\r\n        const fullSpecification = { conditional, invert: filter.invert || false, values: spec }\r\n        // console.log('HEREWEGO: ', fullSpecification)\r\n        const dataColumnValues = this.boundaryDataTable[filter.column].values\r\n\r\n        // update every row\r\n        for (let i = 0; i < this.boundaries.length; i++) {\r\n          if (!checkFilterValue(fullSpecification, dataColumnValues[i])) {\r\n            this.boundaryFilters[i] = -1\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    cbTooltip(html: string) {\r\n      this.tooltipHtml = html\r\n    },\r\n\r\n    filterShapesNowOriginal() {\r\n      // shape filters only\r\n      const shapeFilters = this.filterDefinitions.filter(f => f.dataset === 'shapes')\r\n\r\n      this.boundaryFilters = new Float32Array(this.boundaries.length)\r\n\r\n      // show all elements if there are no shapefilters defined\r\n      if (!shapeFilters.length) return\r\n\r\n      // console.log({ shapeFilters, length: this.boundaries.length })\r\n\r\n      // loop on all boundaries and centroids\r\n      for (let i = 0; i < this.boundaries.length; i++) {\r\n        for (const filter of shapeFilters) {\r\n          const hideElement = !this.checkIsFiltered(i, filter)\r\n          if (hideElement) this.boundaryFilters[i] = -1\r\n        }\r\n      }\r\n    },\r\n\r\n    checkIsFiltered(i: number, filter: FilterDefinition) {\r\n      const dataset =\r\n        filter.dataset == 'shapes' ? this.boundaryDataTable : this.datasets[filter.dataset]\r\n      const actualValue = dataset[filter.column].values[i]\r\n\r\n      let includeElement = false\r\n\r\n      let filterValue = filter.value\r\n      if (typeof filterValue == 'string' && filterValue.indexOf(',') > -1) {\r\n        filterValue = filterValue\r\n          .split(',')\r\n          .map(v => v.trim())\r\n          .map(v => (isNaN(parseFloat(v)) ? v : parseFloat(v)))\r\n      }\r\n\r\n      if (Array.isArray(filterValue)) {\r\n        // 1. filter is an array of categories\r\n        includeElement = filterValue.indexOf(actualValue) > -1\r\n      } else {\r\n        // 2. filter is a string: exact value or CSV\r\n        includeElement = filterValue == actualValue\r\n      }\r\n\r\n      // Invert if inverted\r\n      if (filter.invert) includeElement = !includeElement\r\n\r\n      return includeElement\r\n    },\r\n\r\n    parseFilterDefinitions(filterDefs: any) {\r\n      // no filters? go away\r\n      if (!filterDefs) return []\r\n\r\n      const filters = [] as FilterDefinition[]\r\n\r\n      // User may have specified an array or an object:\r\n      let filterSpecs: any[]\r\n      if (Array.isArray(filterDefs)) {\r\n        filterSpecs = filterDefs.map(f => Object.entries(f)[0])\r\n      } else {\r\n        filterSpecs = Object.entries(filterDefs)\r\n      }\r\n\r\n      for (const filter of filterSpecs) {\r\n        const [id, value] = filter\r\n        const [dataset, column] = id.split('.')\r\n        const filterDefinition: FilterDefinition = {\r\n          dataset,\r\n          value,\r\n          column: column.endsWith('!') ? column.substring(0, column.length - 1) : column,\r\n          invert: column.endsWith('!'),\r\n        }\r\n        filters.push(filterDefinition)\r\n\r\n        // // categorical filters may already have UI settings that need merging\r\n        // if (column in this.filters) {\r\n        //   filterDefinition.....\r\n        // }\r\n      }\r\n\r\n      return filters\r\n    },\r\n\r\n    honorQueryParameters() {\r\n      const query = this.$route.query\r\n      if (query.show == 'dots') this.useCircles = true\r\n\r\n      // this.setupQueryFilters()\r\n    },\r\n\r\n    // perhaps we have some active filters in the URL query\r\n    setupQueryFilters() {\r\n      const datasetKeys = Object.keys(this.datasets)\r\n      // TODO - make this multi-dataset aware  // 2 means shapes + dataset #1.\r\n      if (datasetKeys.length !== 2) return\r\n\r\n      const firstDatasetKey = datasetKeys[1]\r\n      const firstDataset = this.datasets[firstDatasetKey]\r\n\r\n      const columnNames = Object.keys(firstDataset)\r\n\r\n      const queryFilters = Object.keys(this.$route.query).filter(f => columnNames.indexOf(f) > -1)\r\n\r\n      for (const column of queryFilters) {\r\n        if (!this.filters[column]) {\r\n          console.log('CREATING category filter:', column)\r\n          this.handleUserCreatedNewFilter(`${firstDatasetKey}:${column}`)\r\n        }\r\n\r\n        const text = '' + this.$route.query[column]\r\n        if (text) this.filters[column].active = text.split(',')\r\n\r\n        this.myDataManager.setFilter({\r\n          dataset: this.datasetKeyToFilename[firstDatasetKey],\r\n          column,\r\n          value: this.filters[column].active,\r\n        })\r\n        this.activateFiltersForDataset(firstDatasetKey)\r\n      }\r\n    },\r\n\r\n    convertCommasToArray(thing: any): any[] {\r\n      if (thing === undefined) return []\r\n      if (Array.isArray(thing)) return thing\r\n\r\n      if (thing.indexOf(',') > -1) {\r\n        thing = thing.split(',').map((f: any) => f.trim())\r\n      } else {\r\n        thing = [thing.trim()]\r\n      }\r\n      return thing\r\n    },\r\n\r\n    async getVizDetails() {\r\n      const emptyState = {\r\n        datasets: {} as any,\r\n        display: { fill: {} as any },\r\n      }\r\n\r\n      // are we in a dashboard?\r\n      if (this.configFromDashboard) {\r\n        this.config = JSON.parse(JSON.stringify(this.configFromDashboard))\r\n        this.vizDetails = Object.assign({}, emptyState, this.configFromDashboard)\r\n      } else {\r\n        // was a YAML file was passed in?\r\n        const filename = (this.yamlConfig ?? '').toLocaleLowerCase()\r\n\r\n        if (filename?.endsWith('yaml') || filename?.endsWith('yml')) {\r\n          const ycfg = await this.loadYamlConfig()\r\n          this.config = ycfg\r\n          this.vizDetails = Object.assign({}, emptyState, ycfg)\r\n        }\r\n\r\n        // OR is this a bare geojson/shapefile file? - build vizDetails manually\r\n        if (/(\\.geojson)(|\\.gz)$/.test(filename) || /\\.shp$/.test(filename)) {\r\n          const title = `${filename.endsWith('shp') ? 'Shapefile' : 'GeoJSON'}: ${this.yamlConfig}`\r\n\r\n          this.vizDetails = Object.assign({}, emptyState, this.vizDetails, {\r\n            title,\r\n            description: this.subfolder,\r\n            shapes: this.yamlConfig,\r\n          })\r\n\r\n          this.config = JSON.parse(JSON.stringify(this.vizDetails))\r\n        }\r\n      }\r\n\r\n      const t = this.vizDetails.title || 'Map'\r\n      this.$emit('title', t)\r\n    },\r\n\r\n    // figure out old-style joins\r\n    buildOldJoinLookups() {\r\n      const oldJoinFieldPerDataset = {} as any\r\n\r\n      for (const dataset of Object.keys(this.vizDetails.datasets || [])) {\r\n        const join = this.vizDetails.datasets[dataset].join\r\n        if (!join) continue\r\n\r\n        const colon = join.indexOf(':')\r\n        oldJoinFieldPerDataset[dataset] = join.substring(colon + 1)\r\n        if (typeof this.vizDetails.shapes == 'string') {\r\n          const shapeJoinField = colon > -1 ? join.substring(0, colon) : join\r\n          this.vizDetails.shapes = { file: this.vizDetails.shapes, join: shapeJoinField }\r\n        }\r\n      }\r\n\r\n      // apply old-style joins to elements\r\n      for (const section of Object.keys(this.vizDetails.display || [])) {\r\n        const display = this.vizDetails.display as any\r\n        const details = display[section]\r\n        if ((details.dataset || details.diff) && !details.join) {\r\n          details.join = oldJoinFieldPerDataset[details.dataset]\r\n        }\r\n      }\r\n    },\r\n\r\n    async buildThumbnail() {\r\n      if (this.thumbnail && this.vizDetails.thumbnail) {\r\n        try {\r\n          const blob = await this.fileApi.getFileBlob(\r\n            this.subfolder + '/' + this.vizDetails.thumbnail\r\n          )\r\n          const buffer = await readBlob.arraybuffer(blob)\r\n          const base64 = arrayBufferToBase64(buffer)\r\n          if (base64)\r\n            this.thumbnailUrl = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n        } catch (e) {\r\n          console.error(e)\r\n        }\r\n      }\r\n    },\r\n\r\n    getFileSystem(name: string) {\r\n      const svnProject: FileSystemConfig[] = this.$store.state.svnProjects.filter(\r\n        (a: FileSystemConfig) => a.slug === name\r\n      )\r\n      if (svnProject.length === 0) {\r\n        console.log('no such project')\r\n        throw Error\r\n      }\r\n      return svnProject[0]\r\n    },\r\n\r\n    async loadYamlConfig() {\r\n      const config = this.yamlConfig ?? ''\r\n      const filename = config.indexOf('/') > -1 ? config : this.subfolder + '/' + config\r\n\r\n      // 1. First try loading the file directly\r\n      try {\r\n        const text = await this.fileApi.getFileText(filename)\r\n        return YAML.parse(text)\r\n      } catch (err) {\r\n        const message = '' + err\r\n        if (message.startsWith('YAMLSemantic')) {\r\n          this.$store.commit('error', `${filename}: ${message}`)\r\n        }\r\n        console.log(`${filename} not found, trying config folders`)\r\n      }\r\n\r\n      // 2. Try loading from a config folder instead\r\n      const { vizes } = await this.fileApi.findAllYamlConfigs(this.subfolder)\r\n      if (vizes[config]) {\r\n        try {\r\n          const text = await this.fileApi.getFileText(vizes[config])\r\n          return YAML.parse(text)\r\n        } catch (err) {\r\n          console.error(`Also failed to load ${vizes[config]}`)\r\n        }\r\n      }\r\n      this.$store.commit('error', 'Could not load YAML: ' + filename)\r\n    },\r\n\r\n    /**\r\n     * changeConfiguration: is the main entry point for changing the viz model.\r\n     * anything that wants to change colors, widths, data, anthing like that\r\n     * should all pass through this function so the underlying data model\r\n     * is modified properly.\r\n     */\r\n    changeConfiguration(props: {\r\n      fill?: FillColorDefinition\r\n      dataset?: DatasetDefinition\r\n      lineColor?: LineColorDefinition\r\n      lineWidth?: LineWidthDefinition\r\n      radius?: CircleRadiusDefinition\r\n      fillHeight?: FillHeightDefinition\r\n      filters?: FilterDefinition\r\n    }) {\r\n      console.log('PROPS', props)\r\n\r\n      try {\r\n        if (props['fill']) {\r\n          this.vizDetails.display.fill = props.fill\r\n          this.handleNewFillColor(props.fill)\r\n        }\r\n\r\n        if (props['fillHeight']) {\r\n          this.vizDetails.display.fillHeight = props.fillHeight\r\n          this.handleNewFillHeight(props.fillHeight)\r\n        }\r\n\r\n        if (props['lineColor']) {\r\n          this.vizDetails.display.lineColor = props.lineColor\r\n          this.handleNewLineColor(props.lineColor)\r\n        }\r\n\r\n        if (props['lineWidth']) {\r\n          this.vizDetails.display.lineWidth = props.lineWidth\r\n          this.handleNewLineWidth(props.lineWidth)\r\n          // redo colors after widths to ensure categorical widths are set properly\r\n          if (this.currentUILineColorDefinitions)\r\n            this.handleNewLineColor(this.currentUILineColorDefinitions)\r\n        }\r\n\r\n        if (props['radius']) {\r\n          this.vizDetails.display.radius = props.radius\r\n          this.handleNewRadius(props.radius)\r\n        }\r\n\r\n        if (props['dataset']) {\r\n          // vizdetails just had the string name, whereas props.dataset contains\r\n          // a fully-build DatasetDefinition, so let's just handle that\r\n          this.handleNewDataset(props.dataset)\r\n        }\r\n\r\n        if (props['filters']) {\r\n          this.handleNewFilters(props.filters)\r\n        }\r\n\r\n        // console.log('DONE updating')\r\n      } catch (e) {\r\n        this.$store.commit('error', '' + e)\r\n      }\r\n    },\r\n\r\n    async handleNewDataset(props: DatasetDefinition) {\r\n      const { key, dataTable, filename } = props\r\n      const datasetId = key\r\n      const datasetFilename = filename || datasetId\r\n\r\n      console.log('HANDLE NEW DATSET:', datasetId, datasetFilename)\r\n\r\n      if (!this.boundaryDataTable[this.featureJoinColumn])\r\n        throw Error(`Geodata does not have property ${this.featureJoinColumn}`)\r\n\r\n      this.myDataManager.setPreloadedDataset({\r\n        key: this.datasetKeyToFilename[datasetId],\r\n        dataTable,\r\n      })\r\n\r\n      this.myDataManager.addFilterListener(\r\n        { dataset: this.datasetKeyToFilename[datasetId] },\r\n        this.processFiltersNow\r\n      )\r\n\r\n      this.vizDetails.datasets[datasetId] = {\r\n        file: datasetFilename,\r\n        // if join columns are not named identically, use \"this:that\" format\r\n        // join:\r\n        //   featureJoinColumn === dataJoinColumn\r\n        //     ? featureJoinColumn\r\n        //     : `${featureJoinColumn}:${dataJoinColumn}`,\r\n      } as any\r\n\r\n      this.vizDetails = Object.assign({}, this.vizDetails)\r\n      this.datasets[datasetId] = dataTable\r\n      this.datasets = Object.assign({}, this.datasets)\r\n    },\r\n\r\n    setupJoin(props: { dataTable: DataTable; datasetId: string; dataJoinColumn: string }) {\r\n      const { dataTable, datasetId, dataJoinColumn } = props\r\n      // console.log('> setupJoin', datasetId, dataJoinColumn)\r\n\r\n      // if no join at all, don't do anything\r\n      if (!dataJoinColumn) return\r\n\r\n      // if join already exists, don't do anything\r\n      if (`@@${dataJoinColumn}` in dataTable) return\r\n\r\n      // make sure columns exist!\r\n      if (!this.boundaryDataTable[this.featureJoinColumn])\r\n        throw Error(`Geodata does not have property ${this.featureJoinColumn}`)\r\n      if (!dataTable[dataJoinColumn])\r\n        throw Error(`Dataset ${datasetId} does not have column ${dataJoinColumn}`)\r\n\r\n      // create lookup column and write lookup offsets\r\n      const lookupColumn: DataTableColumn = {\r\n        type: DataType.LOOKUP,\r\n        values: [],\r\n        name: `@@${dataJoinColumn}`,\r\n      }\r\n\r\n      const lookupValues = dataTable[dataJoinColumn].values\r\n\r\n      const boundaryOffsets = this.getBoundaryOffsetLookup(this.featureJoinColumn)\r\n      // if user wants specific tooltips based on this dataset, save the values\r\n      // TODO - this is in the wrong place and probably causes problems with\r\n      // multi-line datasets\r\n\r\n      const tips = this.vizDetails.tooltip || []\r\n      const relevantTips = tips\r\n        .filter(tip => tip.substring(0, tip.indexOf('.')).startsWith(datasetId))\r\n        .map(tip => {\r\n          return { id: tip, column: tip.substring(1 + tip.indexOf('.')) }\r\n        })\r\n\r\n      for (const tip of relevantTips) {\r\n        // make sure tip column exists\r\n        if (!dataTable[tip.column]) {\r\n          this.globalStore.commit('setStatus', {\r\n            type: Status.WARNING,\r\n            msg: `Tooltip references \"${tip.id}\" but that column doesn't exist`,\r\n            desc: `Check the tooltip spec and column names`,\r\n          })\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < lookupValues.length; i++) {\r\n        // set lookup data\r\n        const featureOffset = boundaryOffsets[lookupValues[i]]\r\n        lookupColumn.values[i] = featureOffset\r\n        const feature = this.boundaries[featureOffset]\r\n        // also set tooltip data\r\n        for (const tip of relevantTips) {\r\n          if (!dataTable[tip.column]) continue\r\n          const value = dataTable[tip.column]?.values[i] && ''\r\n          if (feature && value) feature.properties[tip.id] = value\r\n        }\r\n      }\r\n\r\n      // Notify Deck.gl of the new tooltip data\r\n      if (REACT_VIEW_HANDLES[1000 + this.layerId]) {\r\n        REACT_VIEW_HANDLES[1000 + this.layerId](this.boundaries)\r\n      }\r\n\r\n      // add/replace this dataset in the datamanager, with the new lookup column\r\n      dataTable[`@@${dataJoinColumn}`] = lookupColumn\r\n      this.myDataManager.setPreloadedDataset({\r\n        key: this.datasetKeyToFilename[datasetId],\r\n        dataTable,\r\n      })\r\n\r\n      this.myDataManager.addFilterListener(\r\n        { dataset: this.datasetKeyToFilename[datasetId] },\r\n        this.processFiltersNow\r\n      )\r\n\r\n      this.vizDetails.datasets[datasetId] = {\r\n        file: this.datasetKeyToFilename[datasetId],\r\n        // if join columns are not named identically, use \"this:that\" format\r\n        join:\r\n          this.featureJoinColumn === dataJoinColumn\r\n            ? this.featureJoinColumn\r\n            : `${this.featureJoinColumn}:${dataJoinColumn}`,\r\n      } as any\r\n\r\n      // console.log('triggering updates')\r\n      this.datasets[datasetId] = dataTable\r\n    },\r\n\r\n    getBoundaryOffsetLookup(joinColumn: string) {\r\n      // return it if we already built it\r\n      if (this.boundaryJoinLookups[joinColumn]) return this.boundaryJoinLookups[joinColumn]\r\n\r\n      // build it\r\n      this.statusText = 'Joining datasets...'\r\n      this.boundaryJoinLookups[joinColumn] = {}\r\n      const lookupValues = this.boundaryJoinLookups[joinColumn]\r\n\r\n      const boundaryLookupColumnValues = this.boundaryDataTable[joinColumn].values\r\n\r\n      for (let i = 0; i < this.boundaries.length; i++) {\r\n        lookupValues[boundaryLookupColumnValues[i]] = i\r\n      }\r\n      this.statusText = ''\r\n      return lookupValues\r\n    },\r\n\r\n    removeAnyOldFilters(filters: any) {\r\n      const oldFilters = new Set(\r\n        Object.keys(this.currentUIFilterDefinitions).filter(f => !f.startsWith('shapes.'))\r\n      )\r\n      const newFilters = new Set(Object.keys(filters).filter(f => !f.startsWith('shapes.')))\r\n      newFilters.forEach(f => oldFilters.delete(f))\r\n\r\n      for (const deletedFilter of oldFilters) {\r\n        console.log('REMOVING', deletedFilter)\r\n        const dot = deletedFilter.indexOf('.')\r\n        const dataset = deletedFilter.slice(0, dot)\r\n        const column = deletedFilter.slice(dot + 1)\r\n        this.myDataManager.setFilter({\r\n          dataset: this.datasetKeyToFilename[dataset],\r\n          column,\r\n          value: [],\r\n        })\r\n\r\n        // also remove from category-UI and URL\r\n        if (column in this.filters) {\r\n          const query = Object.assign({}, this.$route.query)\r\n          delete query[column]\r\n          this.$router.replace({ query })\r\n\r\n          delete this.filters[column]\r\n        }\r\n      }\r\n    },\r\n\r\n    handleNewFilters(filters: any) {\r\n      // Remove removed filters first!\r\n      this.removeAnyOldFilters(filters)\r\n\r\n      this.currentUIFilterDefinitions = filters\r\n\r\n      const newDefinitions = this.parseFilterDefinitions(filters)\r\n      this.filterDefinitions = newDefinitions\r\n\r\n      // Filter the shapes/boundaries\r\n      this.filterShapesNow()\r\n\r\n      // Filter attached datasets\r\n      Object.keys(this.datasets).forEach((datasetKey, i) => {\r\n        if (i === 0) return // skip shapes, we just did them\r\n        this.activateFiltersForDataset(datasetKey)\r\n      })\r\n    },\r\n\r\n    handleColorDiffMode(section: string, color: FillColorDefinition | LineColorDefinition) {\r\n      if (!color.diffDatasets) return\r\n\r\n      const columnName = color.columnName\r\n      const lookupColumn = color.join || ''\r\n      const key1 = color.diffDatasets[0] || ''\r\n      const dataset1 = this.datasets[key1]\r\n      const key2 = color.diffDatasets[1] || ''\r\n      const dataset2 = this.datasets[key2]\r\n      const relative = !!color.relative\r\n\r\n      // console.log('999 DIFF', relative, key1, key2, dataset1, dataset2)\r\n\r\n      if (dataset1 && dataset2) {\r\n        // generate the lookup columns we need\r\n        this.setupJoin({ datasetId: key1, dataTable: dataset1, dataJoinColumn: lookupColumn })\r\n        this.setupJoin({ datasetId: key2, dataTable: dataset2, dataJoinColumn: lookupColumn })\r\n\r\n        const lookup1 = dataset1[`@@${lookupColumn}`]\r\n        const lookup2 = dataset2[`@@${lookupColumn}`]\r\n        const dataCol1 = dataset1[columnName]\r\n        const dataCol2 = dataset2[columnName]\r\n\r\n        if (!dataCol1) throw Error(`Dataset ${key1} does not contain column \"${columnName}\"`)\r\n        if (!dataCol2) throw Error(`Dataset ${key2} does not contain column \"${columnName}\"`)\r\n\r\n        // NORMALIZE if we need to\r\n        let normalColumn\r\n        let normalLookup\r\n        if (color.normalize) {\r\n          const [dataset, column] = color.normalize.split(':')\r\n          if (!this.datasets[dataset] || !this.datasets[dataset][column]) {\r\n            throw Error(`${dataset} does not contain column \"${column}\"`)\r\n          }\r\n          this.dataCalculatedValueLabel += `/ ${column}`\r\n          normalColumn = this.datasets[dataset][column]\r\n          // Create yet one more join for the normal column if it's not from the featureset itself\r\n          if (this.datasetChoices[0] !== dataset) {\r\n            this.setupJoin({\r\n              datasetId: dataset,\r\n              dataTable: this.datasets[dataset],\r\n              dataJoinColumn: lookupColumn,\r\n            })\r\n            normalLookup = this.datasets[dataset][`@@${column}`]\r\n          }\r\n        }\r\n\r\n        // Calculate colors for each feature\r\n        const { array, legend, calculatedValues } = ColorWidthSymbologizer.getColorsForDataColumn({\r\n          numFeatures: this.boundaries.length,\r\n          data: dataCol1,\r\n          data2: dataCol2,\r\n          lookup: lookup1,\r\n          lookup2: lookup2,\r\n          normalize: normalColumn,\r\n          normalLookup,\r\n          options: color,\r\n          filter: this.boundaryFilters,\r\n          relative,\r\n        })\r\n\r\n        if (!array) return\r\n\r\n        if (section === 'fill') {\r\n          this.dataFillColors = array\r\n        } else {\r\n          this.dataLineColors = array\r\n        }\r\n        this.dataCalculatedValues = calculatedValues\r\n        this.dataCalculatedValueLabel = `${relative ? '% ' : ''}Diff: ${columnName}` // : ${key1}-${key2}`\r\n\r\n        this.legendStore.setLegendSection({\r\n          section: section === 'fill' ? 'FillColor' : 'Line Color',\r\n          column: dataCol1.name,\r\n          values: legend,\r\n          diff: true,\r\n          relative,\r\n          normalColumn: normalColumn ? normalColumn.name : '',\r\n        })\r\n      }\r\n    },\r\n\r\n    paintColorsWithFilter(section: string, dataTable: DataTable) {\r\n      const currentDefinition =\r\n        section === 'fill' ? this.currentUIFillColorDefinitions : this.currentUILineColorDefinitions\r\n\r\n      const columnName = currentDefinition.columnName\r\n      const lookupColumn =\r\n        currentDefinition.join === '@count'\r\n          ? dataTable[`@@${columnName}`]\r\n          : dataTable[`@@${currentDefinition.join}`]\r\n\r\n      let normalColumn\r\n      if (currentDefinition.normalize) {\r\n        const keys = currentDefinition.normalize.split(':')\r\n        this.dataCalculatedValueLabel = columnName + '/' + keys[1]\r\n        const datasetKey = currentDefinition.dataset\r\n\r\n        if (!this.datasets[keys[0]] || !this.datasets[keys[0]][keys[1]]) {\r\n          throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n        }\r\n        normalColumn = dataTable[keys[1]]\r\n      }\r\n\r\n      const props = {\r\n        numFeatures: this.boundaries.length,\r\n        data: dataTable[columnName],\r\n        normalize: normalColumn,\r\n        lookup: lookupColumn,\r\n        filter: this.boundaryFilters,\r\n        options: currentDefinition,\r\n        join: currentDefinition.join,\r\n      }\r\n\r\n      const { array, legend, calculatedValues } =\r\n        ColorWidthSymbologizer.getColorsForDataColumn(props)\r\n\r\n      if (!array) return\r\n\r\n      if (section === 'fill') {\r\n        this.dataFillColors = array\r\n      } else {\r\n        this.dataLineColors = array\r\n      }\r\n\r\n      this.dataCalculatedValues = calculatedValues\r\n      this.legendStore.setLegendSection({\r\n        section: section === 'fill' ? 'FillColor' : 'Line Color',\r\n        column: columnName,\r\n        values: legend,\r\n      })\r\n    },\r\n\r\n    handleNewFillColor(fillOrFilteredDataTable: FillColorDefinition | DataTable) {\r\n      // *** FILTER: if prop has a columnName, then this is a FillColorDefinition\r\n      const isFillColorDefinition = 'columnName' in fillOrFilteredDataTable\r\n      const isFilterTable = !isFillColorDefinition\r\n\r\n      // If we received a new fill color definition AND the dataset is filtered,\r\n      // then bookmark that definition and process the filter first/instead.\r\n      // (note, processFiltersNow() will call this function again once the calcs are done)\r\n      if (isFillColorDefinition) {\r\n        const dataset = fillOrFilteredDataTable?.dataset as string\r\n        const { filteredRows } = this.myDataManager.getFilteredDataset({\r\n          dataset: `${dataset}` || '',\r\n        })\r\n        if (filteredRows && filteredRows.length) {\r\n          this.currentUIFillColorDefinitions = fillOrFilteredDataTable\r\n          this.processFiltersNow(dataset)\r\n          return\r\n        }\r\n      }\r\n\r\n      if (isFilterTable) {\r\n        this.paintColorsWithFilter('fill', fillOrFilteredDataTable)\r\n        return\r\n      }\r\n\r\n      const color = fillOrFilteredDataTable as FillColorDefinition\r\n      this.currentUIFillColorDefinitions = color\r\n\r\n      const columnName = color.columnName\r\n\r\n      if (color.diffDatasets) {\r\n        // *** diff mode *************************\r\n        this.handleColorDiffMode('fill', color)\r\n        return\r\n      } else if (!columnName) {\r\n        // *** simple color **********************\r\n        this.dataFillColors = color.fixedColors[0]\r\n        this.dataCalculatedValueLabel = ''\r\n        this.legendStore.clear('FillColor')\r\n        return\r\n      } else {\r\n        // *** Data column mode ******************\r\n        const datasetKey = color.dataset || ''\r\n        const selectedDataset = this.datasets[datasetKey]\r\n        this.dataCalculatedValueLabel = ''\r\n\r\n        // no selected dataset or datacol missing? Not sure what to do here, just give up...\r\n        if (!selectedDataset) {\r\n          console.warn('color: no selected dataset yet, maybe still loading')\r\n          return\r\n        }\r\n        const dataColumn = selectedDataset[columnName]\r\n        if (!dataColumn) {\r\n          throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n        }\r\n\r\n        this.dataCalculatedValueLabel = columnName ?? ''\r\n\r\n        // Do we need a join? Join it\r\n        let dataJoinColumn = ''\r\n        if (color.join && color.join !== '@count') {\r\n          // join column name set by user\r\n          dataJoinColumn = color.join\r\n        } else if (color.join === '@count') {\r\n          // rowcount specified: join on the column name itself\r\n          dataJoinColumn = columnName\r\n        } else {\r\n          // nothing specified: let's hope they didn't want to join\r\n          if (this.datasetChoices.length > 1) {\r\n            console.warn('No join; lets hope user just wants to display data in boundary file')\r\n          }\r\n        }\r\n\r\n        this.setupJoin({\r\n          datasetId: datasetKey,\r\n          dataTable: selectedDataset,\r\n          dataJoinColumn,\r\n        })\r\n\r\n        const lookupColumn = selectedDataset[`@@${dataJoinColumn}`]\r\n\r\n        // Figure out the normal\r\n        let normalColumn\r\n\r\n        // NORMALIZE if we need to\r\n        let normalLookup\r\n        if (color.normalize) {\r\n          const [dataset, column] = color.normalize.split(':')\r\n          if (!this.datasets[dataset] || !this.datasets[dataset][column]) {\r\n            throw Error(`${dataset} does not contain column \"${column}\"`)\r\n          }\r\n          this.dataCalculatedValueLabel += `/ ${column}`\r\n          normalColumn = this.datasets[dataset][column]\r\n          // Create yet one more join for the normal column if it's not from the featureset itself\r\n          if (this.datasetChoices[0] !== dataset) {\r\n            this.setupJoin({\r\n              datasetId: dataset,\r\n              dataTable: this.datasets[dataset],\r\n              dataJoinColumn,\r\n            })\r\n            normalLookup = this.datasets[dataset][`@@${column}`]\r\n          }\r\n        }\r\n\r\n        // Calculate colors for each feature\r\n        const { array, legend, calculatedValues, normalizedValues } =\r\n          ColorWidthSymbologizer.getColorsForDataColumn({\r\n            numFeatures: this.boundaries.length,\r\n            data: dataColumn,\r\n            normalize: normalColumn,\r\n            normalLookup,\r\n            lookup: lookupColumn,\r\n            filter: this.boundaryFilters,\r\n            options: color,\r\n            join: color.join,\r\n          })\r\n\r\n        if (array) {\r\n          this.dataFillColors = array\r\n          this.dataCalculatedValues = calculatedValues\r\n          this.dataNormalizedValues = normalizedValues || null\r\n\r\n          this.legendStore.setLegendSection({\r\n            section: 'FillColor',\r\n            column: dataColumn.name,\r\n            values: legend,\r\n            normalColumn: normalColumn ? normalColumn.name : '',\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    handleNewLineColor(colorOrFilteredDataTable: LineColorDefinition | DataTable | false) {\r\n      if (colorOrFilteredDataTable === false) {\r\n        this.dataLineColors = ''\r\n        this.legendStore.clear('Line Color')\r\n        return\r\n      }\r\n\r\n      // *** FILTER: if prop has a columnName, then this is a LineColorDefinition\r\n      const isColorDefinition = 'columnName' in colorOrFilteredDataTable\r\n      const isFilterTable = !isColorDefinition\r\n\r\n      // If we received a new color definition AND the dataset is filtered,\r\n      // then bookmark that definition and process the filter first/instead.\r\n      // (note, processFiltersNow() will call this function again once the calcs are done)\r\n      if (isColorDefinition) {\r\n        const dataset = colorOrFilteredDataTable?.dataset as string\r\n        const { filteredRows } = this.myDataManager.getFilteredDataset({\r\n          dataset: `${dataset}` || '',\r\n        })\r\n        if (filteredRows && filteredRows.length) {\r\n          this.currentUILineColorDefinitions = colorOrFilteredDataTable\r\n          this.processFiltersNow(dataset)\r\n          return\r\n        }\r\n      }\r\n\r\n      if (isFilterTable) {\r\n        this.paintColorsWithFilter('lineColor', colorOrFilteredDataTable)\r\n        return\r\n      }\r\n\r\n      const color = colorOrFilteredDataTable as LineColorDefinition\r\n      this.currentUILineColorDefinitions = color\r\n\r\n      const columnName = color.columnName\r\n\r\n      if (color.diffDatasets) {\r\n        // *** diff mode *************************\r\n        this.handleColorDiffMode('lineColor', color)\r\n        return\r\n      } else if (!columnName) {\r\n        // *** simple color **********************\r\n        this.dataLineColors = color.fixedColors[0]\r\n        this.dataCalculatedValueLabel = ''\r\n        this.legendStore.clear('Line Color')\r\n        return\r\n      } else {\r\n        // *** Data column mode ******************\r\n        const datasetKey = color.dataset || ''\r\n        const selectedDataset = this.datasets[datasetKey]\r\n        this.dataCalculatedValueLabel = ''\r\n\r\n        // no selected dataset or datacol missing? Not sure what to do here, just give up...\r\n        if (!selectedDataset) {\r\n          console.warn('color: no selected dataset yet, maybe still loading')\r\n          return\r\n        }\r\n        const dataColumn = selectedDataset[columnName]\r\n        if (!dataColumn) {\r\n          throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n        }\r\n\r\n        this.dataCalculatedValueLabel = columnName ?? ''\r\n\r\n        // Do we need a join? Join it\r\n        let dataJoinColumn = ''\r\n        if (color.join && color.join !== '@count') {\r\n          // join column name set by user\r\n          dataJoinColumn = color.join\r\n        } else if (color.join === '@count') {\r\n          // rowcount specified: join on the column name itself\r\n          dataJoinColumn = columnName\r\n        } else {\r\n          // nothing specified: let's hope they didn't want to join\r\n          if (this.datasetChoices.length > 1) {\r\n            console.warn('No join; lets hope user just wants to display data in boundary file')\r\n          }\r\n        }\r\n\r\n        this.setupJoin({\r\n          datasetId: datasetKey,\r\n          dataTable: selectedDataset,\r\n          dataJoinColumn,\r\n        })\r\n\r\n        const lookupColumn = selectedDataset[`@@${dataJoinColumn}`]\r\n\r\n        // Figure out the normal\r\n        let normalColumn\r\n\r\n        // NORMALIZE if we need to\r\n        let normalLookup\r\n        if (color.normalize) {\r\n          const [dataset, column] = color.normalize.split(':')\r\n          if (!this.datasets[dataset] || !this.datasets[dataset][column]) {\r\n            throw Error(`${dataset} does not contain column \"${column}\"`)\r\n          }\r\n          this.dataCalculatedValueLabel += `/ ${column}`\r\n          normalColumn = this.datasets[dataset][column]\r\n          // Create yet one more join for the normal column if it's not from the featureset itself\r\n          if (this.datasetChoices[0] !== dataset) {\r\n            this.setupJoin({\r\n              datasetId: dataset,\r\n              dataTable: this.datasets[dataset],\r\n              dataJoinColumn,\r\n            })\r\n            normalLookup = this.datasets[dataset][`@@${column}`]\r\n          }\r\n        }\r\n\r\n        // Calculate colors for each feature\r\n        const colors = ColorWidthSymbologizer.getColorsForDataColumn({\r\n          numFeatures: this.boundaries.length,\r\n          data: dataColumn,\r\n          normalize: normalColumn,\r\n          normalLookup,\r\n          lookup: lookupColumn,\r\n          filter: this.boundaryFilters,\r\n          options: color,\r\n          join: color.join,\r\n        })\r\n\r\n        const { array, legend, calculatedValues, normalizedValues, hasCategory } = colors as any\r\n\r\n        if (!array) return\r\n\r\n        this.dataLineColors = array\r\n        this.dataCalculatedValues = calculatedValues\r\n        this.dataNormalizedValues = normalizedValues || null\r\n\r\n        // If colors are based on category and line widths are constant, then use a\r\n        // 1-pixel line width when the category is undefined.\r\n        if (hasCategory && this.constantLineWidth !== null) {\r\n          const lineWidth = this.constantLineWidth as number\r\n          const variableConstantWidth = new Float32Array(this.boundaries.length).fill(1)\r\n          Object.keys(hasCategory).forEach((i: any) => {\r\n            variableConstantWidth[i] = lineWidth\r\n          })\r\n          this.dataLineWidths = variableConstantWidth\r\n        }\r\n        this.legendStore.setLegendSection({\r\n          section: 'Line Color',\r\n          column: dataColumn.name,\r\n          values: legend,\r\n          normalColumn: normalColumn ? normalColumn.name : '',\r\n        })\r\n      }\r\n    },\r\n\r\n    handleNewLineWidth(width: LineWidthDefinition) {\r\n      const columnName = width.columnName || ''\r\n\r\n      // constant line width?  @0, @1, @2\r\n      if (width.dataset && /^@\\d$/.test(width.dataset)) {\r\n        this.dataLineWidths = Number.parseInt(width.dataset.substring(1))\r\n        this.constantLineWidth = this.dataLineWidths\r\n        this.legendStore.clear('Line Width')\r\n        return\r\n      } else {\r\n        this.constantLineWidth = null\r\n      }\r\n\r\n      // No scale factor?\r\n      if (width.scaleFactor && isNaN(width.scaleFactor)) {\r\n        this.dataLineWidths = 1\r\n        this.legendStore.clear('Line Width')\r\n        return\r\n      }\r\n\r\n      if (width.diffDatasets) {\r\n        const lookupColumn = width.join || ''\r\n        const key1 = width.diffDatasets[0] || ''\r\n        const dataset1 = this.datasets[key1]\r\n        const key2 = width.diffDatasets[1] || ''\r\n        const dataset2 = this.datasets[key2]\r\n        // const relative = !!width.relative\r\n\r\n        if (dataset1 && dataset2) {\r\n          // generate the lookup columns we need\r\n          this.setupJoin({ datasetId: key1, dataTable: dataset1, dataJoinColumn: lookupColumn })\r\n          this.setupJoin({ datasetId: key2, dataTable: dataset2, dataJoinColumn: lookupColumn })\r\n\r\n          const lookup1 = dataset1[`@@${lookupColumn}`]\r\n          const lookup2 = dataset2[`@@${lookupColumn}`]\r\n          const dataCol1 = dataset1[columnName]\r\n          const dataCol2 = dataset2[columnName]\r\n\r\n          if (!dataCol1) throw Error(`Dataset ${key1} does not contain column \"${columnName}\"`)\r\n          if (!dataCol2) throw Error(`Dataset ${key2} does not contain column \"${columnName}\"`)\r\n\r\n          // Calculate widths for each feature\r\n          const { array, legend, calculatedValues } = ColorWidthSymbologizer.getWidthsForDataColumn(\r\n            {\r\n              numFeatures: this.boundaries.length,\r\n              data: dataCol1,\r\n              data2: dataCol2,\r\n              lookup: lookup1,\r\n              lookup2: lookup2,\r\n              options: width,\r\n            }\r\n          )\r\n\r\n          this.dataLineWidths = array || 0\r\n          this.dataCalculatedValues = calculatedValues\r\n          this.dataCalculatedValueLabel = 'Diff: ' + columnName\r\n\r\n          this.legendStore.setLegendSection({\r\n            section: 'Line Width',\r\n            column: `${dataCol1.name} (Diff)`,\r\n            values: legend,\r\n          })\r\n        }\r\n      } else if (columnName) {\r\n        // Get the data column\r\n        const datasetKey = width.dataset || ''\r\n        const selectedDataset = this.datasets[datasetKey]\r\n        if (selectedDataset) {\r\n          const dataColumn = selectedDataset[columnName]\r\n          if (!dataColumn)\r\n            throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n\r\n          // Do we need a join? Join it\r\n          let dataJoinColumn = ''\r\n          if (width.join && width.join !== '@count') {\r\n            // join column name set by user\r\n            dataJoinColumn = width.join\r\n          } else if (width.join === '@count') {\r\n            // rowcount specified: join on the column name itself\r\n            dataJoinColumn = columnName\r\n          } else {\r\n            // nothing specified: let's hope they didn't want to join\r\n            if (this.datasetChoices.length > 1) {\r\n              console.warn('No join; lets hope user just wants to display data in boundary file')\r\n            }\r\n          }\r\n\r\n          this.setupJoin({\r\n            datasetId: datasetKey,\r\n            dataTable: selectedDataset,\r\n            dataJoinColumn,\r\n          })\r\n\r\n          const lookupColumn = selectedDataset[`@@${dataJoinColumn}`]\r\n\r\n          // Calculate widths for each feature\r\n          const { array, legend, calculatedValues } = ColorWidthSymbologizer.getWidthsForDataColumn(\r\n            {\r\n              numFeatures: this.boundaries.length,\r\n              data: dataColumn,\r\n              lookup: lookupColumn,\r\n              join: width.join,\r\n              options: width,\r\n            }\r\n          )\r\n\r\n          this.dataLineWidths = array || 0\r\n          this.dataCalculatedValues = calculatedValues\r\n          this.dataCalculatedValueLabel = columnName\r\n\r\n          if (legend.length) {\r\n            this.legendStore.setLegendSection({\r\n              section: 'Line Width',\r\n              column: dataColumn.name,\r\n              values: legend,\r\n            })\r\n          } else {\r\n            this.legendStore.clear('Line Width')\r\n          }\r\n        }\r\n      } else {\r\n        // simple width\r\n\r\n        this.dataLineWidths = 1\r\n        this.dataCalculatedValueLabel = ''\r\n        this.legendStore.clear('Line Width')\r\n      }\r\n      // this.filterListener()\r\n    },\r\n\r\n    handleNewFillHeight(height: FillHeightDefinition) {\r\n      const columnName = height.columnName\r\n      if (columnName) {\r\n        // Get the data column\r\n        const datasetKey = height.dataset || ''\r\n        const selectedDataset = this.datasets[datasetKey]\r\n        if (selectedDataset) {\r\n          const dataColumn = selectedDataset[columnName]\r\n          if (!dataColumn)\r\n            throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n\r\n          // Do we need a join? Join it\r\n          let dataJoinColumn = ''\r\n          if (height.join && height.join !== '@count') {\r\n            // join column name set by user\r\n            dataJoinColumn = height.join\r\n          } else if (height.join === '@count') {\r\n            // rowcount specified: join on the column name itself\r\n            dataJoinColumn = columnName\r\n          } else {\r\n            // nothing specified: let's hope they didn't want to join\r\n            if (this.datasetChoices.length > 1) {\r\n              console.warn('No join; lets hope user just wants to display data in boundary file')\r\n            }\r\n          }\r\n\r\n          this.setupJoin({\r\n            datasetId: datasetKey,\r\n            dataTable: selectedDataset,\r\n            dataJoinColumn,\r\n          })\r\n\r\n          const lookupColumn = selectedDataset[`@@${dataJoinColumn}`]\r\n\r\n          // Figure out the normal\r\n          let normalColumn\r\n          if (height.normalize) {\r\n            const keys = height.normalize.split(':')\r\n            // console.log({ keys, datasets: this.datasets })\r\n            if (!this.datasets[keys[0]] || !this.datasets[keys[0]][keys[1]])\r\n              throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n            normalColumn = this.datasets[keys[0]][keys[1]]\r\n            // console.log({ normalColumn })\r\n            this.dataCalculatedValueLabel = columnName + '/' + keys[1]\r\n          }\r\n\r\n          // Calculate for each feature\r\n          const { heights, calculatedValues, normalizedValues } =\r\n            ColorWidthSymbologizer.getHeightsBasedOnNumericValues({\r\n              length: this.boundaries.length,\r\n              data: dataColumn,\r\n              lookup: lookupColumn,\r\n              options: height,\r\n              normalize: normalColumn,\r\n              join: height.join,\r\n            })\r\n\r\n          this.dataFillHeights = heights\r\n          this.dataCalculatedValues = calculatedValues\r\n          this.dataNormalizedValues = normalizedValues || null\r\n          // this.dataCalculatedValueLabel = ''\r\n\r\n          if (this.$store.state.viewState.pitch == 0) {\r\n            const angledView = Object.assign({}, this.$store.state.viewState, {\r\n              pitch: 30,\r\n            })\r\n            this.$store.commit('setMapCamera', angledView)\r\n          }\r\n        }\r\n      } else {\r\n        // simple\r\n        this.dataFillHeights = 0\r\n        this.dataCalculatedValues = null\r\n        this.dataCalculatedValueLabel = ''\r\n      }\r\n    },\r\n\r\n    handleNewRadius(radiusOptions: CircleRadiusDefinition) {\r\n      const columnName = radiusOptions.columnName\r\n      if (columnName) {\r\n        // Get the data column\r\n        const datasetKey = radiusOptions.dataset || ''\r\n        const selectedDataset = this.datasets[datasetKey]\r\n\r\n        // no selected dataset or datacol missing? Not sure what to do here, just give up...\r\n        if (!selectedDataset) {\r\n          console.warn('radius: no selected dataset yet, maybe still loading')\r\n          return\r\n        }\r\n\r\n        if (selectedDataset) {\r\n          const dataColumn = selectedDataset[columnName]\r\n          if (!dataColumn)\r\n            throw Error(`Dataset ${datasetKey} does not contain column \"${columnName}\"`)\r\n\r\n          // Do we need a join? Join it\r\n          let dataJoinColumn = ''\r\n          if (radiusOptions.join && radiusOptions.join !== '@count') {\r\n            // join column name set by user\r\n            dataJoinColumn = radiusOptions.join\r\n          } else if (radiusOptions.join === '@count') {\r\n            // rowcount specified: join on the column name itself\r\n            dataJoinColumn = columnName\r\n          } else {\r\n            // nothing specified: let's hope they didn't want to join\r\n            if (this.datasetChoices.length > 1) {\r\n              console.warn('No join; lets hope user just wants to display data in boundary file')\r\n            }\r\n          }\r\n\r\n          this.setupJoin({\r\n            datasetId: datasetKey,\r\n            dataTable: selectedDataset,\r\n            dataJoinColumn,\r\n          })\r\n\r\n          const lookupColumn = selectedDataset[`@@${dataJoinColumn}`]\r\n\r\n          // Calculate radius for each feature\r\n          const { radius, calculatedValues } = ColorWidthSymbologizer.getRadiusForDataColumn({\r\n            length: this.boundaries.length,\r\n            data: dataColumn,\r\n            lookup: lookupColumn,\r\n            join: dataJoinColumn,\r\n            options: radiusOptions,\r\n          })\r\n          this.dataPointRadii = radius\r\n          this.dataCalculatedValues = calculatedValues\r\n          this.dataCalculatedValueLabel = dataColumn.name\r\n        }\r\n      } else {\r\n        // simple width\r\n        this.dataPointRadii = 5\r\n      }\r\n\r\n      // this.filterListener()\r\n\r\n      // set features INSIDE react component\r\n      if (REACT_VIEW_HANDLES[1000 + this.layerId]) {\r\n        REACT_VIEW_HANDLES[1000 + this.layerId](\r\n          typeof this.dataPointRadii == 'number' ? this.boundaries : this.centroids\r\n        )\r\n      }\r\n    },\r\n\r\n    async handleMapClick(click: any) {\r\n      try {\r\n        const { x, y, data } = click.points[0]\r\n        const filter = this.config.groupBy\r\n        const value = x\r\n\r\n        // this.datamanager.setFilter(this.config.dataset, filter, value)\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    },\r\n\r\n    async figureOutFeatureIdColumn() {\r\n      // if user specified it in a data join in the YAML, we're done\r\n      if (this.featureJoinColumn) return this.featureJoinColumn\r\n\r\n      // if user specified it in the shapefile yaml, we're done\r\n      if ('string' !== typeof this.vizDetails.shapes && this.vizDetails.shapes.join) {\r\n        return this.vizDetails.shapes.join\r\n      }\r\n\r\n      // if there's only one column, we're done\r\n      const featureDataset = this.datasets[Object.keys(this.datasets)[0]]\r\n      const availableColumns = Object.keys(featureDataset)\r\n      if (availableColumns.length === 1) return availableColumns[0]\r\n\r\n      // ask the user\r\n      const join: string = await new Promise((resolve, reject) => {\r\n        const boundaryProperties = new Set()\r\n        // Some geojsons have an 'id' separate from their property table\r\n        if (this.boundaries[0].id) boundaryProperties.add('id')\r\n        // Add list of boundary properties from feature dataset\r\n        Object.keys(featureDataset).forEach(key => boundaryProperties.add(key))\r\n\r\n        this.datasetJoinSelector = {\r\n          data1: { title: 'Properties', columns: Array.from(boundaryProperties) as string[] },\r\n        }\r\n        this.showJoiner = true\r\n\r\n        this.cbDatasetJoined = (join: string) => {\r\n          this.datasetJoinSelector = {}\r\n          this.showJoiner = false\r\n          resolve(join)\r\n        }\r\n      })\r\n\r\n      return join.length ? join : 'id'\r\n    },\r\n\r\n    async processFiltersNow(datasetName?: string) {\r\n      // This callback occurs when there is a newly filtered dataset.\r\n\r\n      console.log('> processFiltersNow', datasetName)\r\n\r\n      const { filteredRows } = this.myDataManager.getFilteredDataset({ dataset: datasetName || '' })\r\n      const filteredDataTable: { [id: string]: DataTableColumn } = {}\r\n\r\n      // if we got NULL, remove this filter totally\r\n      if (filteredRows) {\r\n        // turn array of objects into data columns for consumption by fill/line/height doodads\r\n        // (do this here... or should this be somewhere else?)\r\n\r\n        // CONVERT array of objects to column-based DataTableColumns\r\n        const allColumns = filteredRows.length > 0 ? Object.keys(filteredRows[0]) : []\r\n        allColumns.forEach(columnId => {\r\n          const column = { name: columnId, values: [], type: DataType.UNKNOWN } as any\r\n          for (const row of filteredRows) column.values.push(row[columnId])\r\n          filteredDataTable[columnId] = column\r\n        })\r\n      }\r\n\r\n      // now redraw colors for fills and liness\r\n      if (this.currentUIFillColorDefinitions?.dataset) {\r\n        this.handleNewFillColor(\r\n          filteredRows ? filteredDataTable : this.currentUIFillColorDefinitions\r\n        )\r\n      }\r\n\r\n      if (this.currentUILineColorDefinitions?.dataset) {\r\n        this.handleNewLineColor(\r\n          filteredRows ? filteredDataTable : this.currentUILineColorDefinitions\r\n        )\r\n      }\r\n    },\r\n\r\n    // ------------------------------------\r\n    // TODO do shapes later\r\n\r\n    // // hide shapes that don't match filter.\r\n    // const hideFeature = new Uint8Array(this.boundaries.length).fill(1) // hide by default\r\n    // filteredRows.forEach(row => {\r\n    //   const rowNumber = row['@']\r\n    //   hideFeature[rowNumber] = 0\r\n    // })\r\n    // const newFilter = new Float32Array(this.boundaries.length)\r\n    // for (let i = 0; i < this.boundaries.length; i++) {\r\n    //   if (this.boundaryFilters[i] == -1 || hideFeature[i]) newFilter[i] = -1\r\n    // }\r\n\r\n    // this.boundaryFilters = newFilter\r\n    // return\r\n\r\n    // ------------------------------------\r\n\r\n    // let groupLookup: any // this will be the map of boundary IDs to rows\r\n    // let groupIndex: any = 1 // unfiltered values will always be element 1 of [key, values[]]\r\n\r\n    // if (!filteredRows) {\r\n    //   // is filter UN-selected? Rebuild full dataset\r\n    //   // TODO: FIXME this is old ------:\r\n    //   // const joinCol = this.boundaryDataTable[this.datasetJoinColumn].values\r\n    //   // const dataValues = this.boundaryDataTable[this.datasetValuesColumn].values\r\n    //   // groupLookup = group(zip(joinCol, dataValues), d => d[0]) // group by join key\r\n    //   filteredRows = [] // get rid of this\r\n    // } else {\r\n    //   // group filtered values by lookup key\r\n    //   groupLookup = group(filteredRows, d => d[join[0]])\r\n    //   groupIndex = this.datasetValuesColumn // index is values column name\r\n    // }\r\n\r\n    // console.log({ groupLookup })\r\n\r\n    // // Build the filtered dataset columns\r\n    // const filteredDataset: DataTable = {}\r\n    // const columns = Object.keys(filteredRows[0])\r\n    // for (const column of columns) {\r\n    //   filteredDataset[column] = { name: column, values: [], type: DataType.NUMBER }\r\n    // }\r\n    // for (let i = 0; i < filteredRows.length; i++) {\r\n    //   for (const column of columns) {\r\n    //     filteredDataset[column].values[i] = filteredRows[i][column]\r\n    //   }\r\n    // }\r\n\r\n    // console.log({ filteredDataset })\r\n    // // ok we have a filter, let's update the geojson values\r\n    // this.setupJoin(filteredDataset, '_filter', join[0], join[1])\r\n\r\n    // // const filteredBoundaries = [] as any[]\r\n\r\n    //       this.boundaries.forEach(boundary => {\r\n    //         // id can be in root of feature, or in properties\r\n    //         let lookupKey = boundary.properties[joinShapesBy] || boundary[joinShapesBy]\r\n    //         if (!lookupKey) this.$store.commit('error', `Shape is missing property \"${joinShapesBy}\"`)\r\n\r\n    //         // the groupy thing doesn't auto-convert between strings and numbers\r\n    //         let row = groupLookup.get(lookupKey)\r\n    //         if (row == undefined) row = groupLookup.get('' + lookupKey)\r\n\r\n    //         // do we have an answer\r\n    //         boundary.properties.value = row ? sum(row.map((v: any) => v[groupIndex])) : 'N/A'\r\n    //         filteredBoundaries.push(boundary)\r\n    //       })\r\n\r\n    // // centroids\r\n    // const filteredCentroids = [] as any[]\r\n    // this.centroids.forEach(centroid => {\r\n    //   const centroidId = centroid.properties!.id\r\n    //   if (!centroidId) return\r\n\r\n    //   let row = groupLookup.get(centroidId)\r\n    //   if (row == undefined) row = groupLookup.get('' + centroidId)\r\n    //   centroid.properties!.value = row ? sum(row.map((v: any) => v[groupIndex])) : 'N/A'\r\n    //   filteredCentroids.push(centroid)\r\n    // })\r\n\r\n    // this.boundaries = filteredBoundaries\r\n    // this.centroids = filteredCentroids\r\n    // } catch (e) {\r\n    //   console.error('' + e)\r\n    // }\r\n\r\n    async loadBoundaries() {\r\n      let now = Date.now()\r\n\r\n      const shapeConfig =\r\n        this.config.boundaries || this.config.shapes || this.config.geojson || this.config.network\r\n\r\n      if (!shapeConfig) return\r\n\r\n      // shapes could be a string or an object: shape.file=blah\r\n      let filename: string = shapeConfig.file || shapeConfig\r\n\r\n      let featureProperties = [] as any[]\r\n      let boundaries: any[]\r\n\r\n      try {\r\n        this.statusText = 'Loading features...'\r\n\r\n        if (filename.startsWith('http')) {\r\n          // geojson from url!\r\n          boundaries = (await fetch(filename).then(async r => await r.json())).features\r\n          // this.boundaries = boundaries.features\r\n        } else if (filename.toLocaleLowerCase().endsWith('.shp')) {\r\n          // shapefile!\r\n          boundaries = await this.loadShapefileFeatures(filename)\r\n          // this.boundaries = boundaries\r\n        } else {\r\n          // geojson!\r\n          boundaries = (await this.fileApi.getFileJson(`${this.subfolder}/${filename}`)).features\r\n          // this.boundaries = boundaries.features\r\n        }\r\n\r\n        // for a big speedup, move properties to its own nabob\r\n        let hasNoLines = true\r\n        let hasNoPolygons = true\r\n        let hasPoints = false\r\n\r\n        boundaries.forEach(b => {\r\n          // create a new properties object for each row\r\n          const properties = b.properties ?? {}\r\n          // geojson sometimes has \"id\" outside of properties:\r\n          if ('id' in b) properties.id = b.id\r\n          // push this new property object to the featureProperties array\r\n          featureProperties.push(properties)\r\n          // clear out actual feature properties; they are now in featureProperties instead\r\n          b.properties = {}\r\n\r\n          // points?\r\n          if (b.geometry.type == 'Point' || b.geometry.type == 'MultiPoint') {\r\n            hasPoints = true\r\n          }\r\n\r\n          // check if we have linestrings: network mode !\r\n          if (\r\n            hasNoLines &&\r\n            (b.geometry.type == 'LineString' || b.geometry.type == 'MultiLineString')\r\n          ) {\r\n            hasNoLines = false\r\n          }\r\n\r\n          // check if we have polygons: area-map mode !\r\n          if (\r\n            hasNoPolygons &&\r\n            (b.geometry.type == 'Polygon' || b.geometry.type == 'MultiPolygon')\r\n          ) {\r\n            hasNoPolygons = false\r\n          }\r\n        })\r\n\r\n        this.moveLogo()\r\n\r\n        // set feature properties as a data source\r\n        await this.setFeaturePropertiesAsDataSource(filename, [...featureProperties], shapeConfig)\r\n\r\n        // turn ON line borders if it's a SMALL dataset (user can re-enable)\r\n        if (!hasNoLines || boundaries.length < 5000) {\r\n          this.dataLineColors = '#4e79a7'\r\n        }\r\n\r\n        // hide polygon/point buttons and opacity if we have no polygons or we do have points\r\n        if (hasNoPolygons) this.isAreaMode = false\r\n        if (hasPoints) this.isAreaMode = true\r\n\r\n        this.boundaries = boundaries\r\n\r\n        // generate centroids if we have polygons\r\n        if (!hasNoPolygons || hasPoints) {\r\n          await this.generateCentroidsAndMapCenter()\r\n        } else if (this.needsInitialMapExtent) {\r\n          this.calculateAndMoveToCenter()\r\n        }\r\n\r\n        // set features INSIDE react component\r\n        if (REACT_VIEW_HANDLES[1000 + this.layerId]) {\r\n          REACT_VIEW_HANDLES[1000 + this.layerId](this.boundaries)\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n        this.$store.commit('error', '' + e)\r\n        throw Error(`Could not load \"${filename}\"`)\r\n      }\r\n\r\n      if (!this.boundaries) throw Error(`No \"features\" found in shapes file`)\r\n    },\r\n\r\n    async setFeaturePropertiesAsDataSource(\r\n      filename: string,\r\n      featureProperties: any[],\r\n      config: any\r\n    ) {\r\n      const dataTable = await this.myDataManager.setFeatureProperties(\r\n        filename,\r\n        featureProperties,\r\n        config\r\n      )\r\n      this.boundaryDataTable = dataTable\r\n\r\n      const datasetId = filename.substring(1 + filename.lastIndexOf('/'))\r\n      this.datasets[datasetId] = dataTable\r\n\r\n      this.vizDetails.datasets[datasetId] = {\r\n        file: datasetId,\r\n        join: this.datasetJoinColumn,\r\n      } as any\r\n\r\n      this.config.datasets = Object.assign({}, this.vizDetails.datasets)\r\n      // console.log(333, this.vizDetails)\r\n\r\n      // this.myDataManager.addFilterListener({ dataset: datasetId }, this.filterListener)\r\n      // this.figureOutRemainingFilteringOptions()\r\n    },\r\n\r\n    async calculateAndMoveToCenter() {\r\n      let centerLong = 0\r\n      let centerLat = 0\r\n      let numCoords = 0\r\n      const numFeatures = this.boundaries.length\r\n\r\n      for (let idx = 0; idx < numFeatures; idx += 256) {\r\n        const centroid = turf.centerOfMass(this.boundaries[idx])\r\n        if (centroid?.geometry?.coordinates) {\r\n          centerLong += centroid.geometry.coordinates[0]\r\n          centerLat += centroid.geometry.coordinates[1]\r\n          numCoords += 1\r\n        }\r\n      }\r\n\r\n      centerLong /= numCoords\r\n      centerLat /= numCoords\r\n\r\n      console.log('CENTER', centerLong, centerLat)\r\n      if (this.needsInitialMapExtent && !this.vizDetails.center) {\r\n        this.$store.commit('setMapCamera', {\r\n          longitude: centerLong,\r\n          latitude: centerLat,\r\n          center: [centerLong, centerLat],\r\n          bearing: 0,\r\n          pitch: 0,\r\n          zoom: 9,\r\n          initial: true,\r\n        })\r\n        this.needsInitialMapExtent = false\r\n      }\r\n    },\r\n\r\n    async generateCentroidsAndMapCenter() {\r\n      this.statusText = 'Calculating centroids...'\r\n      await this.$nextTick()\r\n      const idField = this.config.shapes.join || 'id'\r\n\r\n      // Find the map center while we're here\r\n      let centerLong = 0\r\n      let centerLat = 0\r\n\r\n      for (const feature of this.boundaries) {\r\n        const centroid = turf.centerOfMass(feature as any)\r\n\r\n        if (!centroid.properties) centroid.properties = {}\r\n\r\n        if (feature.properties[this.config.boundariesLabel]) {\r\n          centroid.properties.label = feature.properties[this.config.boundariesLabel]\r\n        }\r\n\r\n        centroid.properties.id = feature.properties[idField]\r\n        if (centroid.properties.id === undefined) centroid.properties.id = feature[idField]\r\n\r\n        this.centroids.push(centroid)\r\n\r\n        if (centroid.geometry) {\r\n          centerLong += centroid.geometry.coordinates[0]\r\n          centerLat += centroid.geometry.coordinates[1]\r\n        }\r\n      }\r\n\r\n      centerLong /= this.centroids.length\r\n      centerLat /= this.centroids.length\r\n\r\n      console.log('CENTER', centerLong, centerLat)\r\n      if (this.needsInitialMapExtent && !this.vizDetails.center) {\r\n        this.$store.commit('setMapCamera', {\r\n          longitude: centerLong,\r\n          latitude: centerLat,\r\n          center: [centerLong, centerLat],\r\n          bearing: 0,\r\n          pitch: 0,\r\n          zoom: 9,\r\n          initial: true,\r\n        })\r\n        this.needsInitialMapExtent = false\r\n      }\r\n    },\r\n\r\n    async loadShapefileFeatures(filename: string) {\r\n      this.statusText = 'Loading shapefile...'\r\n      console.log('loading', filename)\r\n\r\n      const url = `${this.subfolder}/${filename}`\r\n\r\n      // first, get shp/dbf files\r\n      let geojson: any = {}\r\n      try {\r\n        const shpPromise = this.fileApi.getFileBlob(url)\r\n        const dbfFilename = url\r\n          .replace('.shp', '.dbf')\r\n          .replace('.SHP', '.DBF')\r\n          .replace('.Shp', '.Dbf')\r\n        const dbfPromise = this.fileApi.getFileBlob(dbfFilename)\r\n        await Promise.all([shpPromise, dbfPromise])\r\n\r\n        const shpBlob = await (await shpPromise)?.arrayBuffer()\r\n        const dbfBlob = await (await dbfPromise)?.arrayBuffer()\r\n        if (!shpBlob || !dbfBlob) return []\r\n\r\n        this.statusText = 'Generating shapes...'\r\n\r\n        geojson = await shapefile.read(shpBlob, dbfBlob)\r\n      } catch (e) {\r\n        console.error(e)\r\n        this.$store.commit('error', '' + e)\r\n        return []\r\n      }\r\n\r\n      // geojson.features = geojson.features.slice(0, 10000)\r\n\r\n      // See if there is a .prj file with projection information\r\n      let projection = DEFAULT_PROJECTION\r\n      const prjFilename = url\r\n        .replace('.shp', '.prj')\r\n        .replace('.SHP', '.PRJ')\r\n        .replace('.Shp', '.Prj')\r\n      try {\r\n        projection = await this.fileApi.getFileText(prjFilename)\r\n      } catch (e) {\r\n        // lol we can live without a projection right? ;-O\r\n      }\r\n\r\n      // Allow user to override .PRJ projection with YAML config\r\n      const guessCRS = this.vizDetails.projection || Coords.guessProjection(projection)\r\n\r\n      console.log({ guessCRS })\r\n      // then, reproject if we have a .prj file\r\n      if (guessCRS) {\r\n        this.statusText = 'Projecting coordinates...'\r\n        await this.$nextTick()\r\n        geojson = reproject.toWgs84(geojson, guessCRS, Coords.allEPSGs)\r\n        this.statusText = ''\r\n      }\r\n\r\n      function getFirstPoint(thing: any): any[] {\r\n        if (Array.isArray(thing[0])) return getFirstPoint(thing[0])\r\n        else return [thing[0], thing[1]]\r\n      }\r\n\r\n      // check if we have lon/lat\r\n      const firstPoint = getFirstPoint(geojson.features[0].geometry.coordinates)\r\n      if (Math.abs(firstPoint[0]) > 180 || Math.abs(firstPoint[1]) > 90) {\r\n        // this ain't lon/lat\r\n        const msg = `Coordinates not lon/lat. Try providing ${prjFilename.substring(\r\n          1 + prjFilename.lastIndexOf('/')\r\n        )}`\r\n        this.$store.commit('error', msg)\r\n        this.statusText = msg\r\n        return []\r\n      }\r\n\r\n      // if (this.needsInitialMapExtent && !this.$store.state.viewState.latitude) {\r\n      if (true) {\r\n        // if we don't have a user-specified map center/zoom, focus on the shapefile itself\r\n\r\n        const long = []\r\n        const lat = []\r\n        for (let i = 0; i < geojson.features.length; i += 128) {\r\n          const firstPoint = getFirstPoint(geojson.features[i].geometry.coordinates)\r\n          long.push(firstPoint[0])\r\n          lat.push(firstPoint[1])\r\n        }\r\n        const longitude = long.reduce((x, y) => x + y) / long.length\r\n        const latitude = lat.reduce((x, y) => x + y) / lat.length\r\n\r\n        this.$store.commit('setMapCamera', {\r\n          longitude,\r\n          latitude,\r\n          bearing: 0,\r\n          pitch: 0,\r\n          zoom: 9,\r\n          center: [longitude, latitude],\r\n          initial: true,\r\n        })\r\n      }\r\n\r\n      this.needsInitialMapExtent = false\r\n      return geojson.features as any[]\r\n    },\r\n\r\n    async loadDatasets() {\r\n      const keys = Object.keys(this.vizDetails.datasets)\r\n      for (const key of keys) {\r\n        // don't reload datasets we already loaded\r\n        if (key in this.datasets) continue\r\n\r\n        await this.loadDataset(key)\r\n      }\r\n    },\r\n\r\n    async loadDataset(datasetKey: string) {\r\n      try {\r\n        if (!datasetKey) return\r\n\r\n        // dataset could be  { dataset: myfile.csv }\r\n        //               or  { dataset: { file: myfile.csv, join: TAZ }}\r\n        const datasetFilename =\r\n          'string' === typeof this.config.datasets[datasetKey]\r\n            ? this.config.datasets[datasetKey]\r\n            : this.config.datasets[datasetKey].file\r\n\r\n        this.statusText = `Loading dataset ${datasetFilename} ...`\r\n\r\n        await this.$nextTick()\r\n\r\n        let loaderConfig = { dataset: datasetFilename }\r\n        if ('string' !== typeof this.config.datasets[datasetKey]) {\r\n          loaderConfig = Object.assign(loaderConfig, this.config.datasets[datasetKey])\r\n        }\r\n\r\n        // save the filename and key for later lookups\r\n        this.datasetKeyToFilename[datasetKey] = datasetFilename\r\n\r\n        const dataset = await this.myDataManager.getDataset(loaderConfig)\r\n\r\n        // figure out join - use \".join\" or first column key\r\n        const joiner =\r\n          'string' === typeof this.config.datasets[datasetKey]\r\n            ? Object.keys(dataset.allRows)[0]\r\n            : this.config.datasets[datasetKey].join\r\n\r\n        const joinColumns = joiner?.split(':') || []\r\n\r\n        // if join is oldstyle \"dataCol:FeatureID\" the set the featureCol\r\n        if (joinColumns.length == 2) this.featureJoinColumn = joinColumns[0]\r\n        // TODO if join is one column then really we should just ignore it but for now...\r\n        if (joinColumns.length == 1) joinColumns.push(joinColumns[0])\r\n\r\n        // save it!\r\n        this.datasets[datasetKey] = dataset.allRows\r\n\r\n        await this.$nextTick()\r\n\r\n        // Set up filters -- there could be some in YAML already\r\n        this.myDataManager.addFilterListener({ dataset: datasetFilename }, this.processFiltersNow)\r\n        this.activateFiltersForDataset(datasetKey)\r\n      } catch (e) {\r\n        const msg = '' + e\r\n        console.error(msg)\r\n        this.$store.commit('error', msg)\r\n      }\r\n      return []\r\n    },\r\n\r\n    activateFiltersForDataset(datasetKey: string) {\r\n      const filters = this.filterDefinitions.filter(f => f.dataset === datasetKey)\r\n\r\n      for (const filter of filters) {\r\n        console.log(3, JSON.stringify(filter))\r\n        // if user selected a @categorical, just add it to the thingy\r\n        if (filter.value == '@categorical') {\r\n          if (this.filters[filter.column]) {\r\n            filter.value = this.filters[filter.column].active\r\n          } else {\r\n            this.handleUserCreatedNewFilter(`${datasetKey}:${filter.column}`)\r\n          }\r\n        } else {\r\n          // actually filter the data\r\n          this.myDataManager.setFilter(\r\n            Object.assign(filter, { dataset: this.datasetKeyToFilename[datasetKey] })\r\n          )\r\n        }\r\n      }\r\n    },\r\n\r\n    filterLabel(filter: string) {\r\n      let label = this.filters[filter].active.join(',').substring(0, 50) || 'Select...'\r\n      if (label.length === 50) label += '...'\r\n      return label\r\n    },\r\n\r\n    async handleUserSelectedNewMetric() {\r\n      // console.log('> handleUserSelectedNewMetric')\r\n      await this.$nextTick()\r\n      console.log('METRIC', this.datasetValuesColumn)\r\n\r\n      const query = Object.assign({}, this.$route.query)\r\n      query.display = this.datasetValuesColumn\r\n      this.$router.replace({ query })\r\n\r\n      this.maxValue = this.boundaryDataTable[this.datasetValuesColumn].max || 0\r\n      console.log('MAXVALUE', this.maxValue)\r\n\r\n      this.vizDetails.display.fill.columnName = this.datasetValuesColumn\r\n      this.vizDetails = Object.assign({}, this.vizDetails)\r\n      this.processFiltersNow()\r\n    },\r\n\r\n    handleUserSelectedNewFilters(column: string) {\r\n      const filter = this.filters[column]\r\n      const active = filter.active\r\n\r\n      this.myDataManager.setFilter({\r\n        dataset: this.datasetKeyToFilename[filter.dataset], // || datasetFilename,\r\n        column,\r\n        invert: false,\r\n        value: active, // '', // <-- what should this be?\r\n      })\r\n\r\n      // update URL too\r\n      const queryFilters = Object.assign({}, this.$route.query)\r\n      for (const filter of Object.entries(this.filters)) {\r\n        if (filter[1].active.length) {\r\n          queryFilters[filter[0]] = filter[1].active.join(',')\r\n        } else {\r\n          delete queryFilters[filter[0]]\r\n        }\r\n      }\r\n      // only update if query actually changed\r\n      if (JSON.stringify(this.$route.query) !== JSON.stringify(queryFilters)) {\r\n        this.$router.replace({ query: queryFilters })\r\n      }\r\n    },\r\n\r\n    showCircles(show: boolean) {\r\n      this.useCircles = show\r\n\r\n      const query = Object.assign({}, this.$route.query)\r\n      if (show) query.show = 'dots'\r\n      else delete query.show\r\n      this.$router.replace({ query })\r\n    },\r\n\r\n    handleUserCreatedNewFilter(selectedColumn?: string) {\r\n      const selection = selectedColumn || this.chosenNewFilterColumn\r\n      const [dataset, column] = selection.split(':')\r\n\r\n      let options = [...new Set(this.datasets[dataset][column].values)]\r\n      this.chosenNewFilterColumn = ''\r\n\r\n      if (options.length > 48) {\r\n        alert(`Column ${column} has too many values to be used as a filter.`)\r\n        return\r\n      }\r\n      this.filters[column] = { column, label: column, options, active: [], dataset }\r\n    },\r\n\r\n    updateChart() {\r\n      // boundaryDataTable come back as an object of columnName: values[].\r\n      // We need to make a lookup of the values by ID, and then\r\n      // insert those values into the boundaries geojson.\r\n\r\n      // console.log(this.config)\r\n      // console.log(this.datasets)\r\n      if (!this.config.display || !this.config.datasets) return\r\n\r\n      let joinShapesBy = 'id'\r\n\r\n      if (this.config.shapes?.join) joinShapesBy = this.config.shapes.join\r\n      // throw Error('Need \"join\" property to link shapes to datasets')\r\n\r\n      const datasetJoinCol = this.datasetJoinColumn // used to be this.config.display.fill.join\r\n      if (!datasetJoinCol) {\r\n        console.error(`No join column ${datasetJoinCol}`)\r\n        return\r\n      }\r\n\r\n      // value columns should be an array but might not be there yet\r\n      let valueColumns = this.config.display.fill.values\r\n      if (!valueColumns) {\r\n        this.statusText = ''\r\n        throw Error(`Need to specify column for data values`)\r\n      }\r\n\r\n      // Display values from query param if available, or config, or first option.\r\n      if (this.$route.query.display) this.config.display.fill.columnName = this.$route.query.display\r\n      let datasetValuesCol = this.config.display.fill.columnName || valueColumns[0]\r\n\r\n      this.datasetValuesColumn = datasetValuesCol\r\n      // this.datasetValuesColumnOptions = valueColumns\r\n\r\n      // this.setupFilters()\r\n\r\n      // 1. build the data lookup for each key in the dataset.\r\n      //    There is often more than one row per key, so we will\r\n      //    create an array for the group now, and (sum) them in step 2 below\r\n      const joinCol = this.boundaryDataTable[datasetJoinCol].values\r\n      const dataValues = this.boundaryDataTable[datasetValuesCol].values\r\n      const groupLookup = group(zip(joinCol, dataValues), d => d[0]) // group by join key\r\n\r\n      let max = 0\r\n\r\n      // 2. insert values into geojson\r\n      for (let idx = 0; idx < this.boundaries.length; idx++) {\r\n        const boundary = this.boundaries[idx]\r\n        const centroid = this.centroids[idx]\r\n\r\n        // id can be in root of feature, or in properties\r\n        let lookupValue = boundary[joinShapesBy]\r\n        if (lookupValue == undefined) lookupValue = boundary.properties[joinShapesBy]\r\n\r\n        if (lookupValue === undefined) {\r\n          this.$store.commit('error', `Shape is missing property \"${joinShapesBy}\"`)\r\n        }\r\n\r\n        // SUM the values of the second elements of the zips from (1) above\r\n        const row = groupLookup.get(lookupValue)\r\n        if (row) {\r\n          boundary.properties.value = sum(row.map(v => v[1]))\r\n          max = Math.max(max, boundary.properties.value)\r\n        } else {\r\n          boundary.properties.value = 'N/A'\r\n        }\r\n\r\n        // update the centroid too\r\n        if (centroid) centroid.properties!.value = boundary.properties.value\r\n      }\r\n\r\n      // this.maxValue = max // this.boundaryDataTable[datasetValuesCol].max || 0\r\n      this.maxValue = this.boundaryDataTable[datasetValuesCol].max || 0\r\n\r\n      // // 3. insert values into centroids\r\n      // this.centroids.forEach(centroid => {\r\n      //   const centroidId = centroid.properties!.id\r\n      //   if (!centroidId) return\r\n\r\n      //   let row = groupLookup.get(centroidId)\r\n      //   if (row === undefined) row = groupLookup.get(parseInt(centroidId))\r\n      //   centroid.properties!.value = row ? sum(row.map(v => v[1])) : 'N/A'\r\n      // })\r\n\r\n      // sort them so big bubbles are below small bubbles\r\n      this.centroids = this.centroids.sort((a: any, b: any) =>\r\n        a.properties.value > b.properties.value ? -1 : 1\r\n      )\r\n      this.activeColumn = 'value'\r\n    },\r\n\r\n    clearData() {\r\n      // these lines change the properties of these objects\r\n      // WITHOUT reassigning them to new objects; this is\r\n      // essential for the garbage-collection to work properly.\r\n      // Otherwise we get a 500Mb memory leak on every view :-D\r\n      this.boundaries = []\r\n      this.centroids = []\r\n      this.boundaryDataTable = {}\r\n      this.boundaryFilters = new Float32Array(0)\r\n      this.datasets = {}\r\n      this.dataFillColors = '#888'\r\n      this.dataLineColors = ''\r\n      this.dataLineWidths = 1\r\n      this.dataPointRadii = 5\r\n      this.dataFillHeights = 0\r\n      this.dataCalculatedValues = null\r\n      this.dataCalculatedValueLabel = ''\r\n    },\r\n  },\r\n\r\n  async mounted() {\r\n    try {\r\n      // EMBED MODE?\r\n      this.setEmbeddedMode()\r\n\r\n      this.clearData()\r\n      await this.getVizDetails()\r\n      if (this.vizDetails.center && typeof this.vizDetails.center === 'string') {\r\n        this.vizDetails.center = this.vizDetails.center\r\n          //@ts-ignore\r\n          .split(',')\r\n          .map((coord: any) => parseFloat(coord))\r\n        this.config.center = this.config.center.split(',').map((coord: any) => parseFloat(coord))\r\n      }\r\n\r\n      this.buildThumbnail()\r\n      if (this.thumbnail) return\r\n\r\n      this.buildOldJoinLookups()\r\n\r\n      this.filterDefinitions = this.parseFilterDefinitions(this.vizDetails.filters)\r\n\r\n      this.setupLogoMover()\r\n\r\n      if (this.needsInitialMapExtent && this.vizDetails.center) {\r\n        this.$store.commit('setMapCamera', {\r\n          center: this.vizDetails.center,\r\n          zoom: this.vizDetails.zoom || 9,\r\n          bearing: this.vizDetails.bearing || 0,\r\n          pitch: this.vizDetails.pitch || 0,\r\n          longitude: this.vizDetails.center ? this.vizDetails.center[0] : 0,\r\n          latitude: this.vizDetails.center ? this.vizDetails.center[1] : 0,\r\n          initial: true,\r\n        })\r\n        this.needsInitialMapExtent = false\r\n      }\r\n\r\n      this.expColors = this.config.display?.fill?.exponentColors\r\n      this.dataFillColors = globalStore.state.isDarkMode ? '#44445580' : '#dddddd80'\r\n\r\n      // convert values to arrays as needed\r\n      if (!this.config.display.fill) this.config.display.fill = {}\r\n\r\n      if (this.config.display?.fill?.values) {\r\n        this.config.display.fill.values = this.convertCommasToArray(this.config.display.fill.values)\r\n      }\r\n\r\n      // load the boundaries first, then the dataset.\r\n      // Need boundaries first so we can build the lookups!\r\n      await this.loadBoundaries()\r\n      this.filterShapesNow()\r\n\r\n      this.isLoaded = true\r\n      this.$emit('isLoaded')\r\n\r\n      await this.loadDatasets()\r\n\r\n      // Check URL query parameters\r\n\r\n      this.datasets = Object.assign({}, this.datasets)\r\n      this.config.datasets = JSON.parse(JSON.stringify(this.datasets))\r\n      this.vizDetails = Object.assign({}, this.vizDetails)\r\n\r\n      this.honorQueryParameters()\r\n\r\n      this.statusText = ''\r\n\r\n      // Ask for shapes feature ID if it's not obvious/specified already\r\n      this.featureJoinColumn = await this.figureOutFeatureIdColumn()\r\n    } catch (e) {\r\n      this.$store.commit('error', 'Mapview ' + e)\r\n    }\r\n  },\r\n\r\n  beforeDestroy() {\r\n    // MUST delete the React view handles to prevent gigantic memory leaks!\r\n    delete REACT_VIEW_HANDLES[this.layerId]\r\n\r\n    if (REACT_VIEW_HANDLES[1000 + this.layerId]) {\r\n      REACT_VIEW_HANDLES[1000 + this.layerId]([])\r\n      delete REACT_VIEW_HANDLES[1000 + this.layerId]\r\n    }\r\n\r\n    this.clearData()\r\n    this.legendStore.clear()\r\n    this.resizer?.disconnect()\r\n\r\n    this.myDataManager.removeFilterListener(this.config, this.processFiltersNow)\r\n    // this.myDataManager.clearCache()\r\n    this.$store.commit('setFullScreen', false)\r\n  },\r\n})\r\n\r\nexport default MyComponent\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.map-layout {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: $thumbnailHeight;\r\n  background: url('assets/thumbnail.jpg') no-repeat;\r\n  background-size: cover;\r\n  z-index: -1;\r\n}\r\n\r\n.map-layout.hide-thumbnail {\r\n  background: unset;\r\n  z-index: 0;\r\n}\r\n\r\n.area-map {\r\n  position: relative;\r\n  flex: 1;\r\n  background-color: var(--bgBold);\r\n}\r\n\r\n.config-bar {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 0.5rem;\r\n  padding: 0.25rem 0rem 0.5rem 0.5rem;\r\n  background-color: var(--bgPanel);\r\n  z-index: 9;\r\n  opacity: 0.93;\r\n  input.slider {\r\n    margin: auto 0 0.5rem auto;\r\n    width: 8rem;\r\n  }\r\n\r\n  .map-type-buttons {\r\n    margin: auto 0 0 0.5rem;\r\n  }\r\n\r\n  .img-button {\r\n    margin: 0 0rem -5px 0.5rem;\r\n    height: 2.3rem;\r\n    width: 2.3rem;\r\n    border: var(--borderThin);\r\n    border-radius: 4px;\r\n  }\r\n  .img-button:hover {\r\n    border: 2px solid var(--linkHover);\r\n  }\r\n}\r\n\r\n.config-bar.is-disabled {\r\n  pointer-events: none;\r\n  opacity: 0.5;\r\n}\r\n\r\n.filter {\r\n  margin-right: 0.5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n.filter p {\r\n  margin: -0.25rem 0 0 0;\r\n  font-weight: bold;\r\n}\r\n\r\n.title-panel {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  padding: 0 1rem 0.25rem 2rem;\r\n  background-color: var(--bgPanel);\r\n  filter: $filterShadow;\r\n  z-index: 2;\r\n}\r\n\r\n.status-bar {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 200;\r\n  background-color: var(--bgPanel2);\r\n  padding: 1rem 1rem;\r\n  font-size: 1.1rem;\r\n  margin-bottom: 6px;\r\n  border: 1px solid var(--);\r\n}\r\n\r\n.right {\r\n  margin-left: auto;\r\n}\r\n\r\n.details-panel {\r\n  text-align: left;\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  background-color: var(--bgPanel);\r\n  display: flex;\r\n  filter: $filterShadow;\r\n  flex-direction: row;\r\n  margin: 0.5rem;\r\n  padding: 0.25rem 0.5rem;\r\n  // width: 15rem;\r\n  font-size: 0.8rem;\r\n  color: var(--bold);\r\n  opacity: 0.95;\r\n  max-height: 75%;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n  white-space: nowrap;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n}\r\n</style>\r\n","import React, { useState, useMemo, useEffect, useRef } from 'react'\r\nimport DeckGL from '@deck.gl/react'\r\nimport { DataFilterExtension } from '@deck.gl/extensions'\r\n\r\nimport { StaticMap, MapRef } from 'react-map-gl'\r\nimport { rgb } from 'd3-color'\r\n\r\nimport { DataTable, MAPBOX_TOKEN, REACT_VIEW_HANDLES } from '@/Globals'\r\n\r\nimport globalStore from '@/store'\r\nimport { OFFSET_DIRECTION } from '@/layers/LineOffsetLayer'\r\nimport GeojsonOffsetLayer from '@/layers/GeojsonOffsetLayer'\r\n\r\nimport screenshots from '@/js/screenshots'\r\n\r\ninterface DeckObject {\r\n  index: number\r\n  target: number[]\r\n  data: any\r\n}\r\n\r\nexport default function Component({\r\n  viewId = 0,\r\n  fillColors = '#59a14f' as string | Uint8Array,\r\n  lineColors = '#4e79a7' as string | Uint8Array,\r\n  lineWidths = 0 as number | Float32Array,\r\n  fillHeights = 0 as number | Float32Array,\r\n  calculatedValues = null as null | Float32Array,\r\n  calculatedValueLabel = '',\r\n  normalizedValues = null as null | Float32Array,\r\n  opacity = 1,\r\n  pointRadii = 4 as number | Float32Array,\r\n  screenshot = 0,\r\n  featureDataTable = {} as DataTable,\r\n  featureFilter = new Float32Array(0),\r\n  tooltip = [] as string[],\r\n  cbTooltip = {} as any,\r\n}) {\r\n  const PRECISION = 4\r\n\r\n  // const features = globalStore.state.globalCache[viewId] as any[]\r\n  const [features, setFeatures] = useState([] as any[])\r\n\r\n  const [viewState, setViewState] = useState(globalStore.state.viewState)\r\n  const [screenshotCount, setScreenshot] = useState(screenshot)\r\n\r\n  const _mapRef = useRef<MapRef>() as any\r\n  // release _mapRef on unmount to avoid memory leak\r\n  // TODO: WAIT! Releasing _mapRef breaks screenshot functionality.\r\n  // useEffect(() => {\r\n  //   if (screenshot <= screenshotCount) _mapRef.current = false\r\n  // })\r\n\r\n  // MAP VIEW -------------------------------------------------------------------------\r\n  REACT_VIEW_HANDLES[viewId] = () => {\r\n    setViewState(globalStore.state.viewState)\r\n  }\r\n\r\n  // Feature setter hack:\r\n  // Using the array itself causes an enormous memory leak. I am not sure why\r\n  // Vue/React/Deck.gl are not managing this array correctly. Surely the problem\r\n  // is in our code, not theirs? But I spent days trying to find it.\r\n  // Anyway, making this deep copy of the feature array seems to solve it.\r\n  REACT_VIEW_HANDLES[1000 + viewId] = (features: any[]) => {\r\n    const fullCopy = features.map(feature => {\r\n      const f = {\r\n        type: '' + feature.type,\r\n        geometry: JSON.parse(JSON.stringify(feature.geometry)),\r\n        properties: JSON.parse(JSON.stringify(feature?.properties || {})),\r\n      } as any\r\n      if ('id' in feature) f.id = '' + feature.id\r\n      return f\r\n    })\r\n    setFeatures(fullCopy)\r\n  }\r\n\r\n  // SCREENSHOT -----------------------------------------------------------------------\r\n  let isTakingScreenshot = screenshot > screenshotCount\r\n\r\n  // FILL COLORS ----------------------------------------------------------------------\r\n  let cbFillColor // can be callback OR a plain string in simple mode\r\n  if (typeof fillColors == 'string') {\r\n    // simple color mode\r\n    const color = rgb(fillColors)\r\n    cbFillColor = [color.r, color.g, color.b]\r\n  } else {\r\n    // array of colors\r\n    cbFillColor = (feature: any, o: DeckObject) => {\r\n      return [\r\n        fillColors[o.index * 3 + 0], // r\r\n        fillColors[o.index * 3 + 1], // g\r\n        fillColors[o.index * 3 + 2], // b\r\n        255, // no opacity, for now\r\n      ]\r\n    }\r\n  }\r\n\r\n  // LINE COLORS ----------------------------------------------------------------------\r\n  const isStroked = !!lineColors\r\n\r\n  let cbLineColor // can be callback OR a plain string in simple mode\r\n  if (typeof lineColors == 'string') {\r\n    // simple color mode\r\n    const color = rgb(lineColors)\r\n    cbLineColor = [color.r, color.g, color.b]\r\n    if (!isStroked) cbLineColor.push(0) // totally transparent\r\n  } else {\r\n    // array of colors\r\n    cbLineColor = (_: any, o: DeckObject) => {\r\n      if (features[o.index].properties._hide) return [0, 0, 0, 0]\r\n\r\n      return [\r\n        lineColors[o.index * 3 + 0], // r\r\n        lineColors[o.index * 3 + 1], // g\r\n        lineColors[o.index * 3 + 2], // b\r\n        255, // no opacity, for now\r\n      ]\r\n    }\r\n  }\r\n\r\n  // LINE WIDTHS ----------------------------------------------------------------------\r\n  let cbLineWidth // can be callback OR a plain string in simple mode\r\n  if (typeof lineWidths == 'number') {\r\n    // simple width mode\r\n    cbLineWidth = lineWidths\r\n  } else {\r\n    // array of widths\r\n    cbLineWidth = (_: any, o: DeckObject) => {\r\n      return lineWidths[o.index]\r\n    }\r\n  }\r\n\r\n  // CIRCLE RADIISESS ---------------------------------------------------------------\r\n  let cbPointRadius // can be callback OR a plain string in simple mode\r\n  if (typeof pointRadii == 'number') {\r\n    // simple radius mode\r\n    cbPointRadius = pointRadii\r\n  } else {\r\n    cbPointRadius = (_: any, o: DeckObject) => {\r\n      return pointRadii[o.index]\r\n    }\r\n  }\r\n\r\n  // FILL HEIGHTS -----------------------------------------------------------------\r\n  let cbFillHeight // can be callback OR a plain string in simple mode\r\n  if (typeof fillHeights == 'number') {\r\n    // simple mode\r\n    cbFillHeight = fillHeights\r\n  } else {\r\n    // array function\r\n    cbFillHeight = (_: any, o: DeckObject) => {\r\n      return fillHeights[o.index]\r\n    }\r\n  }\r\n\r\n  function handleViewState(view: any) {\r\n    if (!view.latitude) return\r\n    view.center = [view.longitude, view.latitude]\r\n    setViewState(view)\r\n    globalStore.commit('setMapCamera', view)\r\n  }\r\n\r\n  // CLICK  ---------------------------------------------------------------------\r\n  function handleClick() {\r\n    console.log('click!')\r\n  }\r\n\r\n  // this will only round a number if it is a plain old regular number with\r\n  // a fractional part to the right of the decimal point.\r\n  function truncateFractionalPart({ value, precision }: { value: any; precision: number }) {\r\n    if (typeof value !== 'number') return value\r\n\r\n    let printValue = '' + value\r\n    if (printValue.includes('.') && printValue.indexOf('.') === printValue.lastIndexOf('.')) {\r\n      if (/\\d$/.test(printValue))\r\n        return printValue.substring(0, 1 + PRECISION + printValue.lastIndexOf('.')) // precise(value, precision)\r\n    }\r\n    return value\r\n  }\r\n\r\n  // TOOLTIP ------------------------------------------------------------------\r\n  function getTooltip({ object, index }: { object: any; index: number }) {\r\n    // tooltip will show values for color settings and for width settings.\r\n    // if there is base data, it will also show values and diff vs. base for both color and width.\r\n\r\n    if (!cbTooltip) return null\r\n\r\n    if (object === null || !features[index]?.properties) {\r\n      cbTooltip(null)\r\n      return null\r\n    }\r\n\r\n    const propList = []\r\n\r\n    // normalized value first\r\n    if (normalizedValues) {\r\n      const label = calculatedValueLabel ?? 'Normalized Value'\r\n      let value = truncateFractionalPart({ value: normalizedValues[index], precision: PRECISION })\r\n\r\n      propList.push(\r\n        `<tr><td style=\"text-align: right; padding-right: 0.5rem;\">${label}</td><td><b>${value}</b></td></tr>`\r\n      )\r\n    }\r\n\r\n    // calculated value\r\n    if (calculatedValues) {\r\n      let cLabel = calculatedValueLabel ?? 'Value'\r\n\r\n      const label = normalizedValues ? cLabel.substring(0, cLabel.lastIndexOf('/')) : cLabel\r\n      let value = truncateFractionalPart({ value: calculatedValues[index], precision: PRECISION })\r\n\r\n      if (calculatedValueLabel.startsWith('%')) value = `${value} %`\r\n\r\n      propList.push(\r\n        `<tr><td style=\"text-align: right; padding-right: 0.5rem;\">${label}</td><td><b>${value}</b></td></tr>\r\n         <tr><td>&nbsp;</td></tr>`\r\n      )\r\n    }\r\n\r\n    // --- dataset tooltip lines ---\r\n    let datasetProps = ''\r\n    const featureTips = Object.entries(features[index].properties)\r\n\r\n    for (const [tipKey, tipValue] of featureTips) {\r\n      if (tipValue === null) continue\r\n\r\n      // Truncate fractional digits IF it is a simple number that has a fraction\r\n      let value = truncateFractionalPart({ value: tipValue, precision: 4 })\r\n      datasetProps += `<tr><td style=\"text-align: right; padding-right: 0.5rem;\">${tipKey}</td><td><b>${value}</b></td></tr>`\r\n    }\r\n\r\n    if (datasetProps) propList.push(datasetProps)\r\n\r\n    // --- boundary feature tooltip lines ---\r\n    let columns = Object.keys(featureDataTable)\r\n    if (tooltip && tooltip.length) {\r\n      columns = tooltip.map(tip => {\r\n        return tip.substring(tip.indexOf('.') + 1)\r\n      })\r\n    }\r\n\r\n    let featureProps = ''\r\n    columns.forEach(column => {\r\n      if (featureDataTable[column]) {\r\n        let value = featureDataTable[column].values[index]\r\n        if (value == null) return\r\n        if (typeof value == 'number') value = truncateFractionalPart({ value, precision: 4 })\r\n\r\n        featureProps += `<tr><td style=\"text-align: right; padding-right: 0.5rem;\">${column}</td><td><b>${value}</b></td></tr>`\r\n      }\r\n    })\r\n    if (featureProps) propList.push(featureProps)\r\n\r\n    // nothing to show? no tooltip\r\n    if (!propList.length) {\r\n      cbTooltip(null)\r\n      return\r\n    }\r\n\r\n    let finalHTML = propList.join('')\r\n    const html = `<table>${finalHTML}</table>`\r\n\r\n    cbTooltip(html)\r\n\r\n    return null\r\n  }\r\n\r\n  const layer = new GeojsonOffsetLayer({\r\n    id: 'geoJsonOffsetLayer',\r\n    data: features,\r\n    // function callbacks: --------------\r\n    getLineWidth: cbLineWidth,\r\n    getLineColor: cbLineColor,\r\n    getFillColor: cbFillColor,\r\n    getPointRadius: cbPointRadius,\r\n    getElevation: cbFillHeight,\r\n    // settings: ------------------------\r\n    autoHighlight: true,\r\n    extruded: !!fillHeights,\r\n    highlightColor: [255, 0, 224],\r\n    // lineJointRounded: true,\r\n    lineWidthUnits: 'pixels',\r\n    lineWidthScale: 1,\r\n    lineWidthMinPixels: typeof lineWidths === 'number' ? 0 : 1,\r\n    lineWidthMaxPixels: 50,\r\n    getOffset: OFFSET_DIRECTION.RIGHT,\r\n    opacity: fillHeights ? 1.0 : 0.8, // 3D must be opaque\r\n    pickable: true,\r\n    pointRadiusUnits: 'pixels',\r\n    pointRadiusMinPixels: 2,\r\n    // pointRadiusMaxPixels: 50,\r\n    stroked: isStroked,\r\n    useDevicePixels: isTakingScreenshot,\r\n    fp64: false,\r\n    updateTriggers: {\r\n      getFillColor: fillColors,\r\n      getLineColor: lineColors,\r\n      getLineWidth: lineWidths,\r\n      getPointRadius: pointRadii,\r\n      getElevation: fillHeights,\r\n      getFilterValue: featureFilter,\r\n    },\r\n    transitions: {\r\n      getFillColor: 300,\r\n      getLineColor: 300,\r\n      getLineWidth: 300,\r\n      getPointRadius: 300,\r\n    },\r\n    parameters: {\r\n      depthTest: !!fillHeights,\r\n      fp64: false,\r\n    },\r\n    glOptions: {\r\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\r\n      preserveDrawingBuffer: true,\r\n      fp64: false,\r\n    },\r\n    // filter shapes\r\n    extensions: [new DataFilterExtension({ filterSize: 1 })],\r\n    filterRange: [0, 1], // set filter to -1 to filter element out\r\n    getFilterValue: (_: any, o: DeckObject) => {\r\n      return featureFilter[o.index]\r\n    },\r\n  }) as any\r\n\r\n  const deckInstance = (\r\n    /*\r\n    //@ts-ignore */\r\n    <DeckGL\r\n      layers={[layer]}\r\n      viewState={viewState}\r\n      controller={true}\r\n      pickingRadius={4}\r\n      getTooltip={getTooltip}\r\n      onClick={handleClick}\r\n      onViewStateChange={(e: any) => handleViewState(e.viewState)}\r\n      getCursor={({ isDragging, isHovering }: any) =>\r\n        isDragging ? 'grabbing' : isHovering ? 'pointer' : 'grab'\r\n      }\r\n      onAfterRender={async () => {\r\n        if (screenshot > screenshotCount) {\r\n          await screenshots.savePNG(\r\n            deckInstance.props.layers[0],\r\n            _mapRef?.current?.getMap()._canvas\r\n          )\r\n          setScreenshot(screenshot) // update scrnshot count so we don't take 1000 screenshots by mistake :-/\r\n        }\r\n      }}\r\n    >\r\n      {\r\n        /*\r\n        // @ts-ignore */\r\n        <StaticMap mapStyle={globalStore.getters.mapStyle} mapboxApiAccessToken={MAPBOX_TOKEN} />\r\n      }\r\n    </DeckGL>\r\n  )\r\n\r\n  return deckInstance\r\n}\r\n","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","\r\n.map-layout(:class=\"{'hide-thumbnail': !thumbnail}\"\r\n            :style='{\"background\": urlThumbnail}'\r\n            oncontextmenu=\"return false\")\r\n\r\n  .status-bar(v-show=\"statusText\") {{ statusText }}\r\n\r\n  modal-id-column-picker(v-if=\"showJoiner\"\r\n    v-bind=\"datasetJoinSelector\"\r\n    @join=\"cbDatasetJoined\"\r\n  )\r\n\r\n  .area-map(v-if=\"!thumbnail\" :id=\"`container-${layerId}`\")\r\n    //- drawing-tool.draw-tool(v-if=\"isLoaded && !thumbnail\")\r\n\r\n    geojson-layer(v-if=\"!needsInitialMapExtent\"\r\n      :viewId=\"layerId\"\r\n      :fillColors=\"dataFillColors\"\r\n      :featureDataTable=\"boundaryDataTable\"\r\n      :lineColors=\"dataLineColors\"\r\n      :lineWidths=\"dataLineWidths\"\r\n      :fillHeights=\"dataFillHeights\"\r\n      :screenshot=\"triggerScreenshot\"\r\n      :calculatedValues=\"dataCalculatedValues\"\r\n      :calculatedValueLabel=\"dataCalculatedValueLabel\"\r\n      :normalizedValues=\"dataNormalizedValues\"\r\n      :featureFilter=\"boundaryFilters\"\r\n      :opacity=\"sliderOpacity\"\r\n      :pointRadii=\"dataPointRadii\"\r\n      :tooltip=\"vizDetails.tooltip\"\r\n      :cbTooltip=\"cbTooltip\"\r\n    )\r\n    //- :features=\"useCircles ? centroids: boundaries\"\r\n\r\n    //- background-map-on-top(v-if=\"isLoaded\")\r\n\r\n    viz-configurator(v-if=\"isLoaded\"\r\n      :embedded=\"isEmbedded\"\r\n      :sections=\"configuratorSections\"\r\n      :fileSystem=\"fileSystem\"\r\n      :subfolder=\"subfolder\"\r\n      :yamlConfig=\"generatedExportFilename\"\r\n      :vizDetails=\"vizDetails\"\r\n      :datasets=\"datasets\"\r\n      :legendStore=\"legendStore\"\r\n      :filterDefinitions=\"currentUIFilterDefinitions\"\r\n      @update=\"changeConfiguration\"\r\n      @screenshot=\"takeScreenshot\"\r\n    )\r\n\r\n    .details-panel(v-if=\"tooltipHtml && !statusText\" v-html=\"tooltipHtml\")\r\n\r\n  zoom-buttons(v-if=\"isLoaded && !thumbnail\")\r\n\r\n  .config-bar(v-if=\"!thumbnail && !isEmbedded && isLoaded && Object.keys(filters).length\"\r\n    :class=\"{'is-standalone': !configFromDashboard, 'is-disabled': !isLoaded}\")\r\n\r\n    //- Filter pickers\r\n    .filter(v-for=\"filter in Object.keys(filters)\")\r\n      p {{ filter }}\r\n      b-dropdown(\r\n        v-model=\"filters[filter].active\"\r\n        :scrollable=\"filters[filter].active.length > 10\"\r\n        max-height=\"250\"\r\n        multiple\r\n        @change=\"handleUserSelectedNewFilters(filter)\"\r\n        aria-role=\"list\" :mobile-modal=\"false\" :close-on-click=\"true\"\r\n      )\r\n        template(#trigger=\"{ active }\")\r\n          b-button.is-primary(\r\n            :type=\"filters[filter].active.length ? '' : 'is-outlined'\"\r\n            :label=\"filterLabel(filter)\"\r\n          )\r\n\r\n        b-dropdown-item(v-for=\"option in filters[filter].options\"\r\n          :key=\"option\" :value=\"option\" aria-role=\"listitem\") {{ option }}\r\n\r\n    //- .map-type-buttons(v-if=\"isAreaMode\")\r\n    //-   img.img-button(@click=\"showCircles(false)\" src=\"../../assets/btn-polygons.jpg\" title=\"Shapes\")\r\n    //-   img.img-button(@click=\"showCircles(true)\" src=\"../../assets/btn-circles.jpg\" title=\"Circles\")\r\n\r\n"],"names":["transpose","matrix","length","i","m","min","transpose2","Array","n","j","row","d","proj4","require$$0","hasOwnProperty","default","traverseCoords","coordinates","callback","list","map","coord","traverseGeoJson","geometryCb","nodeCb","geojson","r","obj","copy","constructor","attr","clone","self","bind","this","type","geometry","features","geometries","detectCrs","projs","crs","crsInfo","Error","properties","name","code","JSON","stringify","determineCrs","String","Proj","reproject","from","to","transformFunc","forward","transform","coords","transformed","gj","bbox","min2","Number","MAX_VALUE","max","_gj","xy","Math","calcBbox","reproject_1","WGS84","isHighSurrogate$1","codePoint","isLowSurrogate$1","isHighSurrogate","isLowSurrogate","truncate2","getLength2","string","byteLength","segment","charLength","curByteLength","charCodeAt","slice","prevCodePoint","illegalRe","controlRe","reservedRe","windowsReservedRe","windowsTrailingRe","sanitize","input","replacement","sanitized","replace","LINE_LAYER","PathOffsetLayer","props","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineCapRounded","lineMiterLimit","lineBillboard","getLineColor","getLineWidth","GeojsonOffsetLayer","GeoJsonLayer","super","_renderLineLayers","extruded","stroked","layerProps","state","polygonStrokeLayerId","lineStringsLayerId","PolygonStrokeLayer","shouldRenderSubLayer","polygonsOutline","data","getSubLayerClass","LineStringsLayer","lines","forwardedProps","layer","mapping","transitions","updateTriggers","result","getPosition","sourceKey","targetKey","value","startsWith","getSubLayerAccessor","forwardProps","getSubLayerProps","id","getShaders","__spreadValues","inject","layerName","defaultProps","getOffset","screenshots","savePNG","async","backgroundCanvas","deckLayerImage","context","deck","canvas","toDataURL","backgroundImage","layerData","push","mergedImage","width","height","imageDataURLs","Promise","resolve","reject","document","createElement","all","dataURL","image","Image","onload","getContext","drawImage","src","add2canvas","then","ctx","boxLeft","boxTop","beginPath","rect","fillStyle","fill","font","fillText","element","setAttribute","style","display","body","appendChild","click","removeChild","Component","defineComponent","components","containerId","floor","random","globalState","globalStore","isDarkMode","isMapMoving","mapId","mymap","resizer","computed","methods","setupResizer","ResizeObserver","resize","viz","getElementById","observe","handleMapMotion","mapCamera","longitude","getCenter","lng","latitude","lat","bearing","getBearing","zoom","getZoom","pitch","getPitch","$store","commit","setupMap","styles","mapStyles","maplibregl","Map","container","transparentDark","transparentLight","logoPosition","view","viewState","jumpTo","e","console","error","on","mapIsReady","baubles","getElementsByClassName","elem","viewMoved","off","center","watch","colorScheme","ColorScheme","DarkMode","setStyle","mounted","_vm","_h","$createElement","_c","_self","staticClass","attrs","ID_GUESSES","__vue2_script","i18n","messages","en","de","data1","Object","required","selected1","columns","sort","clickedJoin","$emit","clickedCancel","guess","found","indexOf","_m","_v","_s","title","_l","key","class","selected","$event","MyComponent","BackgroundMapOnTop","GeojsonLayer","viewId","fillColors","lineColors","lineWidths","fillHeights","calculatedValues","calculatedValueLabel","normalizedValues","opacity","pointRadii","screenshot","featureDataTable","featureFilter","Float32Array","tooltip","cbTooltip","setFeatures","useState","exports","setViewState","screenshotCount","setScreenshot","_mapRef","useRef","REACT_VIEW_HANDLES","features2","fullCopy","feature","f","parse","cbFillColor","isTakingScreenshot","color","rgb","g","b","o","index","isStroked","cbLineColor","cbLineWidth","cbPointRadius","cbFillHeight","_","_hide","truncateFractionalPart","precision","printValue","includes","lastIndexOf","test","substring","getFillColor","getPointRadius","getElevation","autoHighlight","highlightColor","OFFSET_DIRECTION","RIGHT","pickable","pointRadiusUnits","pointRadiusMinPixels","useDevicePixels","fp64","getFilterValue","parameters","depthTest","glOptions","preserveDrawingBuffer","extensions","DataFilterExtension","filterSize","filterRange","deckInstance","DeckGL","layers","controller","pickingRadius","getTooltip","object","propList","label","cLabel","datasetProps","featureTips","entries","tipKey","tipValue","keys","tip","featureProps","forEach","column","values","finalHTML","join","html","onClick","log","onViewStateChange","handleViewState","getCursor","isDragging","isHovering","onAfterRender","current","getMap","_canvas","StaticMap","mapStyle","getters","mapboxApiAccessToken","MAPBOX_TOKEN","ModalIdColumnPicker","VizConfigurator","ZoomButtons","DrawingTool","root","subfolder","datamanager","configFromDashboard","yamlConfig","thumbnail","Boolean","boundaries","centroids","cbDatasetJoined","legendStore","LegendStore","chosenNewFilterColumn","boundaryDataTable","dataFillColors","dataLineColors","dataLineWidths","dataPointRadii","dataFillHeights","dataCalculatedValues","dataNormalizedValues","constantLineWidth","dataCalculatedValueLabel","layerId","activeColumn","useCircles","sliderOpacity","maxValue","expColors","isLoaded","isAreaMode","statusText","filters","needsInitialMapExtent","datasetJoinColumn","featureJoinColumn","triggerScreenshot","datasetKeyToFilename","datasetJoinSelector","showJoiner","myDataManager","DashboardDataManager","config","currentUIFilterDefinitions","currentUIFillColorDefinitions","currentUILineColorDefinitions","filterDefinitions","isEmbedded","boundaryFilters","thumbnailUrl","boundaryJoinLookups","datasetValuesColumn","tooltipHtml","vizDetails","description","datasets","useSlider","showDifferences","shpFile","dbfFile","network","geojsonFile","projection","widthFactor","sum","shapes","fillHeight","lineColor","lineWidth","radius","fileApi","HTTPFileSystem","fileSystem","svnProject","svnProjects","filter","a","slug","configuratorSections","datasetChoices","generatedExportFilename","filename","_a","options","output","replaceAll","endsWith","urlThumbnail","takeScreenshot","setEmbeddedMode","$route","query","setupLogoMover","moveLogo","deckmap","logo","querySelector","right","clientWidth","columnsInDataset","datasetId","filterShapesNow","shapeFilters","dataset","isLTGT","spec","conditional","parseFloat","trim","split","v","isNaN","numericString","isArray","fullSpecification","invert","dataColumnValues","checkFilterValue","filterShapesNowOriginal","checkIsFiltered","actualValue","includeElement","filterValue","parseFilterDefinitions","filterDefs","filterSpecs","filterDefinition","honorQueryParameters","show","setupQueryFilters","datasetKeys","firstDatasetKey","firstDataset","columnNames","queryFilters","handleUserCreatedNewFilter","text","active","setFilter","activateFiltersForDataset","convertCommasToArray","thing","getVizDetails","emptyState","assign","toLocaleLowerCase","ycfg","loadYamlConfig","t","buildOldJoinLookups","oldJoinFieldPerDataset","colon","shapeJoinField","file","section","details","diff","buildThumbnail","blob","getFileBlob","buffer","readBlob","arraybuffer","base64","arrayBufferToBase64","getFileSystem","getFileText","YAML","err","message","vizes","findAllYamlConfigs","changeConfiguration","handleNewFillColor","handleNewFillHeight","handleNewLineColor","handleNewLineWidth","handleNewRadius","handleNewDataset","handleNewFilters","dataTable","datasetFilename","setPreloadedDataset","addFilterListener","processFiltersNow","setupJoin","dataJoinColumn","lookupColumn","DataType","LOOKUP","lookupValues","boundaryOffsets","getBoundaryOffsetLookup","relevantTips","Status","WARNING","msg","desc","featureOffset","joinColumn","boundaryLookupColumnValues","removeAnyOldFilters","oldFilters","Set","delete","deletedFilter","dot","$router","newDefinitions","datasetKey","handleColorDiffMode","diffDatasets","columnName","key1","dataset1","key2","dataset2","relative","lookup1","lookup2","dataCol1","dataCol2","normalColumn","normalLookup","normalize","array","legend","ColorWidthSymbologizer","getColorsForDataColumn","numFeatures","data2","lookup","setLegendSection","paintColorsWithFilter","currentDefinition","fillOrFilteredDataTable","isFillColorDefinition","isFilterTable","filteredRows","getFilteredDataset","fixedColors","clear","selectedDataset","warn","dataColumn","colorOrFilteredDataTable","isColorDefinition","colors","hasCategory","variableConstantWidth","parseInt","scaleFactor","getWidthsForDataColumn","heights","getHeightsBasedOnNumericValues","angledView","radiusOptions","getRadiusForDataColumn","handleMapClick","x","y","points","groupBy","figureOutFeatureIdColumn","featureDataset","availableColumns","boundaryProperties","add","join2","datasetName","filteredDataTable","columnId","UNKNOWN","_b","loadBoundaries","shapeConfig","featureProperties","fetch","json","loadShapefileFeatures","getFileJson","hasNoLines","hasNoPolygons","hasPoints","setFeaturePropertiesAsDataSource","generateCentroidsAndMapCenter","calculateAndMoveToCenter","setFeatureProperties","centerLong","centerLat","numCoords","idx","centroid","turf.centerOfMass","initial","$nextTick","idField","boundariesLabel","url","shpPromise","dbfFilename","dbfPromise","shpBlob","arrayBuffer","dbfBlob","shapefile.read","DEFAULT_PROJECTION","prjFilename","guessCRS","Coords","guessProjection","getFirstPoint","allEPSGs","firstPoint","abs","long","firstPoint2","reduce","loadDatasets","loadDataset","loaderConfig","getDataset","joiner","allRows","joinColumns","filterLabel","handleUserSelectedNewMetric","handleUserSelectedNewFilters","filter2","showCircles","selectedColumn","selection","alert","updateChart","joinShapesBy","datasetJoinCol","valueColumns","datasetValuesCol","joinCol","dataValues","groupLookup","group","arguments","zip","boundary","lookupValue","get","clearData","exponentColors","beforeDestroy","disconnect","removeFilterListener","background","oncontextmenu","directives","rawName","expression","_e","embedded","sections","update","domProps","innerHTML","scrollable","multiple","change","scopedSlots","_u","fn","_ref","model","$$v","$set","option"],"mappings":"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"}