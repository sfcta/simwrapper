{"version":3,"file":"tile.9e378f15.js","sources":["../../src/dash-panels/tile.vue","../../src/dash-panels/tile.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\n.content\r\n    .tiles-container(v-if=\"imagesAreLoaded\")\r\n      .tile(v-for=\"(value, index) in this.dataSet.data\" v-bind:style=\"{ 'background-color': colors[index % colors.length]}\")\r\n        p.tile-title {{ value[tileNameIndex] }}\r\n        p.tile-value {{ value[tileValueIndex] }}\r\n        .tile-image(v-if=\"value[tileImageIndex] != undefined && checkIfItIsACustomIcon(value[tileImageIndex])\" :style=\"{'background': base64Images[index], 'background-size': 'contain'}\")\r\n        img.tile-image(v-else-if=\"value[tileImageIndex] != undefined && checkIfIconIsInAssetsFolder(value[tileImageIndex])\" v-bind:src=\"'/src/assets/tile-icons/' + value[tileImageIndex].trim() + '.svg'\" :style=\"{'background': ''}\")\r\n        font-awesome-icon.tile-image(v-else-if=\"value[tileImageIndex] != undefined\" :icon=\"value[tileImageIndex].trim()\" size=\"2xl\" :style=\"{'background': '', 'color': 'black'}\")\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\nimport readBlob from 'read-blob'\r\nimport Papa from '@simwrapper/papaparse'\r\n\r\nimport DashboardDataManager from '@/js/DashboardDataManager'\r\nimport { FileSystemConfig, Status } from '@/Globals'\r\nimport HTTPFileSystem from '@/js/HTTPFileSystem'\r\nimport globalStore from '@/store'\r\nimport { arrayBufferToBase64 } from '@/js/util'\r\n\r\nexport default defineComponent({\r\n  name: 'OverviewPanel',\r\n  components: {},\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    files: { type: Array, required: true },\r\n    config: { type: Object as any, required: true },\r\n    cardTitle: { type: String, required: false },\r\n    cardId: String,\r\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\r\n  },\r\n  data: () => {\r\n    return {\r\n      globalState: globalStore.state,\r\n      id: ('tiles-' + Math.floor(1e12 * Math.random())) as any,\r\n      // dataSet is either x,y or allRows[]\r\n      dataSet: {} as { data?: any; x?: any[]; y?: any[]; allRows?: any },\r\n      YAMLrequirementsOverview: { dataset: '' },\r\n      colors: [\r\n        '#F08080', // Light coral pink\r\n        '#FFB6C1', // Pale pink\r\n        '#FFDAB9', // peach\r\n        '#FFECB3', // cream yellow\r\n        '#B0E0E6', // light blue\r\n        '#98FB98', // light green\r\n        '#FFD700', // golden yellow\r\n        '#FFA07A', // salmon pink\r\n        '#E0FFFF', // light turquoise\r\n        '#FFDAB9', // pink\r\n        '#FFC0CB', // pink\r\n        '#FFA500', // orange\r\n        '#FF8C00', // dark orange\r\n        '#FF7F50', // coral red\r\n        '#FFE4B5', // papaya\r\n        '#ADD8E6', // light blue\r\n        '#90EE90', // light green\r\n        '#FFD700', // golden yellow\r\n        '#FFC0CB', // pink\r\n        '#FFA500', // Orange\r\n      ],\r\n      colorsD3: [\r\n        '#1F77B4',\r\n        '#FF7F0E',\r\n        '#2CA02C',\r\n        '#D62728',\r\n        '#9467BD',\r\n        '#8C564B',\r\n        '#E377C2',\r\n        '#7F7F7F',\r\n        '#BCBD22',\r\n        '#17BECF',\r\n      ],\r\n\r\n      localTileIcons: [\r\n        'departure_board',\r\n        'directions_car',\r\n        'emoji_transportation',\r\n        'local_taxi',\r\n        'subway',\r\n        'directions_bike',\r\n        'directions_subway',\r\n        'ev_station',\r\n        'local_gas_station',\r\n        'motorcycle',\r\n        'train',\r\n        'directions_boat',\r\n        'electric_car',\r\n        'group',\r\n        'local_parking',\r\n        'person',\r\n        'transportation',\r\n        'directions_bus',\r\n        'electric_rickshaw',\r\n        'groups',\r\n        'local_shipping',\r\n        'route',\r\n        'two_wheeler',\r\n      ],\r\n      testImage: '',\r\n      base64Images: [] as any[],\r\n      imagesAreLoaded: false,\r\n      tileNameIndex: 0,\r\n      tileValueIndex: 1,\r\n      tileImageIndex: 2,\r\n    }\r\n  },\r\n  computed: {\r\n    fileApi(): HTTPFileSystem {\r\n      return new HTTPFileSystem(this.fileSystemConfig, globalStore)\r\n    },\r\n  },\r\n  async mounted() {\r\n    this.dataSet = await this.loadFile()\r\n    this.validateDataSet()\r\n    await this.loadImages()\r\n    this.$emit('isLoaded')\r\n  },\r\n  methods: {\r\n    forceRerender() {\r\n      // Removing my-component from the DOM\r\n      this.imagesAreLoaded = false\r\n\r\n      this.$nextTick(() => {\r\n        // Adding the component back in\r\n        this.imagesAreLoaded = true\r\n      })\r\n    },\r\n    async loadImages() {\r\n      this.imagesAreLoaded = false\r\n\r\n      for (let i = 0; i < this.dataSet.data.length; i++) {\r\n        const value = this.dataSet.data[i] as any\r\n        if (this.checkIfItIsACustomIcon(value[this.tileImageIndex])) {\r\n          try {\r\n            const blob = await this.fileApi.getFileBlob(\r\n              this.subfolder +\r\n                '/' +\r\n                this.config.dataset +\r\n                '/../' +\r\n                value[this.tileImageIndex].trim()\r\n            )\r\n            const buffer = await readBlob.arraybuffer(blob)\r\n            const base64 = arrayBufferToBase64(buffer)\r\n            if (base64)\r\n              this.base64Images[i] = `center / cover no-repeat url(data:image/png;base64,${base64})`\r\n          } catch (e) {\r\n            if (e instanceof Response) {\r\n              this.$store.commit('setStatus', {\r\n                type: Status.WARNING,\r\n                msg: e.statusText,\r\n                desc: `The file ${value[this.tileImageIndex]} was not found in this path ${\r\n                  this.subfolder + '/' + this.config.dataset + '/../' + value[this.tileImageIndex]\r\n                }.`,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        this.forceRerender()\r\n      }\r\n\r\n      this.imagesAreLoaded = true\r\n    },\r\n\r\n    async loadFile() {\r\n      const rawText = await this.fileApi.getFileText(this.subfolder + '/' + this.config.dataset)\r\n      const csv = Papa.parse(rawText, {\r\n        comments: '#',\r\n        delimitersToGuess: [';', '\\t', ',', ' '],\r\n        dynamicTyping: true,\r\n        header: false,\r\n        skipEmptyLines: true,\r\n      })\r\n\r\n      return csv\r\n    },\r\n\r\n    validateYAML() {\r\n      for (const key in this.YAMLrequirementsOverview) {\r\n        if (key in this.config === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    validateDataSet() {\r\n      // TODO: Update validation for new format\r\n    },\r\n\r\n    checkIfIconIsInAssetsFolder(name: string) {\r\n      return this.localTileIcons.includes(name.trim())\r\n    },\r\n\r\n    checkIfItIsACustomIcon(name: string) {\r\n      if (name == undefined) return\r\n      if (\r\n        name.includes('.png') ||\r\n        name.includes('.jpg') ||\r\n        name.includes('.svg') ||\r\n        name.includes('.jpeg')\r\n      ) {\r\n        return true\r\n      }\r\n      return false\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.content {\r\n  display: flex;\r\n  width: 100%;\r\n  font-family: $fancyFont;\r\n  flex-direction: row;\r\n}\r\n\r\n.elements {\r\n  display: flex;\r\n  flex-grow: 1;\r\n  flex-direction: column;\r\n  text-align: center;\r\n  color: var(--text);\r\n  font-weight: 700;\r\n  font-size: 25px;\r\n}\r\n\r\n.line {\r\n  border-top: 1px solid black;\r\n}\r\n\r\n.text {\r\n  margin-bottom: 0 !important;\r\n}\r\n\r\n.tiles-container {\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  flex-wrap: wrap;\r\n  position: relative;\r\n}\r\n\r\n.tile {\r\n  display: grid;\r\n  grid-auto-columns: 1fr;\r\n  grid-auto-flow: column;\r\n  background-color: #845ec2;\r\n  margin: 10px;\r\n  padding: 20px;\r\n  min-width: 250px;\r\n  font-family: $fancyFont;\r\n}\r\n\r\n.tile .tile-value {\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  width: 100%;\r\n  color: #363636; // var(--text) but always the color from the light mode.\r\n  grid-column-start: 2;\r\n  grid-column-end: 4;\r\n  text-align: center;\r\n  grid-row: 2;\r\n}\r\n\r\n.tile .tile-title {\r\n  width: 100%;\r\n  font-size: 1.4rem;\r\n  height: 5rem;\r\n  margin-bottom: 0;\r\n  color: #363636; // var(--text) but always the color from the light mode.\r\n  text-align: center;\r\n  grid-column-start: 1;\r\n  grid-column-end: 5;\r\n  grid-row: 1;\r\n}\r\n\r\n.tile .tile-image {\r\n  height: 4rem;\r\n  grid-row: 2;\r\n  align-items: baseline;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n}\r\n</style>\r\n","\r\n.content\r\n    .tiles-container(v-if=\"imagesAreLoaded\")\r\n      .tile(v-for=\"(value, index) in this.dataSet.data\" v-bind:style=\"{ 'background-color': colors[index % colors.length]}\")\r\n        p.tile-title {{ value[tileNameIndex] }}\r\n        p.tile-value {{ value[tileValueIndex] }}\r\n        .tile-image(v-if=\"value[tileImageIndex] != undefined && checkIfItIsACustomIcon(value[tileImageIndex])\" :style=\"{'background': base64Images[index], 'background-size': 'contain'}\")\r\n        img.tile-image(v-else-if=\"value[tileImageIndex] != undefined && checkIfIconIsInAssetsFolder(value[tileImageIndex])\" v-bind:src=\"'/src/assets/tile-icons/' + value[tileImageIndex].trim() + '.svg'\" :style=\"{'background': ''}\")\r\n        font-awesome-icon.tile-image(v-else-if=\"value[tileImageIndex] != undefined\" :icon=\"value[tileImageIndex].trim()\" size=\"2xl\" :style=\"{'background': '', 'color': 'black'}\")\r\n"],"names":["__vue2_script","defineComponent","name","components","props","fileSystemConfig","type","Object","required","subfolder","String","files","Array","config","cardTitle","cardId","datamanager","data","globalState","globalStore","state","id","Math","floor","random","dataSet","YAMLrequirementsOverview","dataset","colors","colorsD3","localTileIcons","testImage","base64Images","imagesAreLoaded","tileNameIndex","tileValueIndex","tileImageIndex","computed","fileApi","HTTPFileSystem","this","mounted","loadFile","validateDataSet","loadImages","$emit","methods","forceRerender","$nextTick","i","length","value","checkIfItIsACustomIcon","blob","getFileBlob","trim","buffer","readBlob","arraybuffer","base64","arrayBufferToBase64","e","Response","$store","commit","Status","WARNING","msg","statusText","desc","rawText","getFileText","Papa","parse","comments","delimitersToGuess","dynamicTyping","header","skipEmptyLines","validateYAML","key","ERROR","checkIfIconIsInAssetsFolder","includes","_vm","_h","$createElement","_c","_self","staticClass","_l","index","style","_v","_s","background","attrs","src","color","icon","size","_e"],"mappings":"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"}