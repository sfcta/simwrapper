{"version":3,"file":"pie.d813e43f.js","sources":["../../src/dash-panels/pie.vue","../../src/dash-panels/pie.vue?vue&type=template&lang.js"],"sourcesContent":["<template lang=\"pug\">\r\nVuePlotly.myplot(v-if=\"data[0].values.length\"\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport type { PropType } from 'vue'\r\n\r\nimport DashboardDataManager, { FilterDefinition } from '@/js/DashboardDataManager'\r\nimport VuePlotly from '@/components/VuePlotly.vue'\r\nimport { FileSystemConfig, Status, BG_COLOR_DASHBOARD, UI_FONT } from '@/Globals'\r\nimport globalStore from '@/store'\r\nimport { buildCleanTitle } from './_allPanels'\r\n\r\nexport default defineComponent({\r\n  name: 'PieChartPanel',\r\n  components: { VuePlotly },\r\n  props: {\r\n    fileSystemConfig: { type: Object as PropType<FileSystemConfig>, required: true },\r\n    subfolder: { type: String, required: true },\r\n    files: { type: Array, required: true },\r\n    config: { type: Object as any, required: true },\r\n    cardTitle: { type: String, required: true },\r\n    cardId: String,\r\n    datamanager: { type: Object as PropType<DashboardDataManager>, required: true },\r\n  },\r\n  data: () => {\r\n    return {\r\n      globalState: globalStore.state,\r\n      id: ('pie-' + Math.floor(1e12 * Math.random())) as any,\r\n      // dataSet is either x,y or allRows[]\r\n      dataSet: {} as { x?: any[]; y?: any[]; allRows?: any },\r\n      YAMLrequirementsPie: { dataset: '', useLastRow: '' },\r\n      layout: {\r\n        height: 300,\r\n        margin: { t: 8, b: 0, l: 0, r: 0, pad: 2 },\r\n        font: {\r\n          color: '#444444',\r\n          family: UI_FONT,\r\n        },\r\n        xaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 12 },\r\n          animate: true,\r\n        },\r\n        yaxis: {\r\n          automargin: true,\r\n          autorange: true,\r\n          title: { text: '', standoff: 16 },\r\n          animate: true,\r\n        },\r\n        legend: {\r\n          // yanchor: 'top',\r\n          // xanchor: 'center',\r\n          orientation: 'v',\r\n          x: 1,\r\n          y: 1,\r\n        },\r\n      },\r\n\r\n      data: [\r\n        {\r\n          sort: false, // to keep colors consistent across plots\r\n          labels: [] as any[],\r\n          values: [] as any[],\r\n          type: 'pie',\r\n          hole: 0.1,\r\n          textinfo: 'label+percent',\r\n          textposition: 'inside',\r\n          automargin: true,\r\n        },\r\n      ],\r\n      options: {\r\n        displaylogo: false,\r\n        responsive: true,\r\n        modeBarButtonsToRemove: [\r\n          'pan2d',\r\n          'zoom2d',\r\n          'select2d',\r\n          'lasso2d',\r\n          'zoomIn2d',\r\n          'zoomOut2d',\r\n          'autoScale2d',\r\n          'hoverClosestCartesian',\r\n          'hoverCompareCartesian',\r\n          'resetScale2d',\r\n          'toggleSpikelines',\r\n          'resetViewMapbox',\r\n        ],\r\n        toImageButtonOptions: {\r\n          format: 'png', // one of png, svg, jpeg, webp\r\n          filename: 'pie-chart',\r\n          width: null,\r\n          height: null,\r\n        },\r\n      },\r\n    }\r\n  },\r\n  async mounted() {\r\n    this.updateTheme()\r\n\r\n    this.options.toImageButtonOptions.filename = buildCleanTitle(this.cardTitle, this.subfolder)\r\n\r\n    this.dataSet = await this.loadData()\r\n    this.updateChart()\r\n\r\n    this.$emit('dimension-resizer', { id: this.cardId, resizer: this.changeDimensions })\r\n    this.$emit('isLoaded')\r\n  },\r\n  beforeDestroy() {\r\n    this.datamanager?.removeFilterListener(this.config, this.handleFilterChanged)\r\n  },\r\n\r\n  watch: {\r\n    'globalState.isDarkMode'() {\r\n      this.updateTheme()\r\n    },\r\n  },\r\n  methods: {\r\n    changeDimensions(dimensions: { width: number; height: number }) {\r\n      this.layout = Object.assign({}, this.layout, dimensions)\r\n    },\r\n\r\n    handleFilterChanged() {\r\n      if (!this.datamanager) return\r\n\r\n      const { filteredRows } = this.datamanager.getFilteredDataset(this.config) as any\r\n\r\n      if (!filteredRows || !filteredRows.length) {\r\n        this.dataSet = { allRows: {} }\r\n      } else {\r\n        const allRows = {} as any\r\n\r\n        const keys = Object.keys(filteredRows[0])\r\n        keys.forEach(key => (allRows[key] = { name: key, values: [] as any }))\r\n\r\n        filteredRows.forEach((row: any) => {\r\n          keys.forEach(key => allRows[key].values.push(row[key]))\r\n        })\r\n        this.dataSet = { allRows }\r\n      }\r\n\r\n      this.updateChart()\r\n    },\r\n\r\n    updateTheme() {\r\n      const colors = {\r\n        paper_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        plot_bgcolor: BG_COLOR_DASHBOARD[this.globalState.colorScheme],\r\n        font: { color: this.globalState.isDarkMode ? '#cccccc' : '#444444' },\r\n      }\r\n      this.layout = Object.assign({}, this.layout, colors)\r\n    },\r\n\r\n    async loadData() {\r\n      try {\r\n        this.validateYAML()\r\n        let dataset = await this.datamanager.getDataset(this.config)\r\n\r\n        // no filter? we are done\r\n        if (!this.config.filters) return dataset\r\n\r\n        // filter data before returning:\r\n        this.datamanager.addFilterListener(this.config, this.handleFilterChanged)\r\n\r\n        for (const [column, value] of Object.entries(this.config.filters)) {\r\n          const filter: FilterDefinition = {\r\n            dataset: this.config.dataset,\r\n            column: column,\r\n            value: value,\r\n            range: Array.isArray(value),\r\n          }\r\n          this.datamanager.setFilter(filter)\r\n        }\r\n        // empty for now; filtered data will come back later via handleFilterChanged async.\r\n        return { allRows: {} }\r\n      } catch (e) {\r\n        console.error('' + e)\r\n      }\r\n      return { allRows: {} }\r\n    },\r\n\r\n    validateYAML() {\r\n      for (const key in this.YAMLrequirementsPie) {\r\n        if (key in this.config === false) {\r\n          this.$store.commit('setStatus', {\r\n            type: Status.ERROR,\r\n            msg: `YAML file missing required key: ${key}`,\r\n            desc: 'Check this.YAMLrequirementsXY for required keys',\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    updateChart() {\r\n      try {\r\n        if (this.config.groupBy) this.updateChartWithGroupBy()\r\n        else this.updateChartSimple()\r\n      } catch (e) {\r\n        const msg = '' + e\r\n        this.$store.commit('setStatus', {\r\n          type: Status.ERROR,\r\n          msg,\r\n          desc: 'Add a desription...',\r\n        })\r\n      }\r\n    },\r\n\r\n    updateChartWithGroupBy() {\r\n      // tba\r\n    },\r\n\r\n    updateChartSimple() {\r\n      const allRows = this.dataSet.allRows || {}\r\n\r\n      this.data[0].labels = Object.keys(allRows)\r\n      this.data[0].values = Object.values(allRows)\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import '@/styles.scss';\r\n\r\n.myplot {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n\r\n@media only screen and (max-width: 640px) {\r\n}\r\n</style>\r\n","\r\nVuePlotly.myplot(v-if=\"data[0].values.length\"\r\n  :data=\"data\"\r\n  :layout=\"layout\"\r\n  :options=\"options\"\r\n  :id=\"id\"\r\n)\r\n"],"names":["__vue2_script","defineComponent","name","components","VuePlotly","props","fileSystemConfig","type","Object","required","subfolder","String","files","Array","config","cardTitle","cardId","datamanager","data","globalState","globalStore","state","id","Math","floor","random","dataSet","YAMLrequirementsPie","dataset","useLastRow","layout","height","margin","t","b","l","r","pad","font","color","family","UI_FONT","xaxis","automargin","autorange","title","text","standoff","animate","yaxis","legend","orientation","x","y","sort","labels","values","hole","textinfo","textposition","options","displaylogo","responsive","modeBarButtonsToRemove","toImageButtonOptions","format","filename","width","mounted","this","updateTheme","buildCleanTitle","loadData","updateChart","$emit","resizer","changeDimensions","beforeDestroy","_a","removeFilterListener","handleFilterChanged","watch","methods","dimensions","assign","filteredRows","getFilteredDataset","length","allRows","keys","forEach","key","row","push","colors","paper_bgcolor","BG_COLOR_DASHBOARD","colorScheme","plot_bgcolor","isDarkMode","validateYAML","getDataset","filters","addFilterListener","column","value","entries","filter","range","isArray","setFilter","e","console","error","$store","commit","Status","ERROR","msg","desc","groupBy","updateChartWithGroupBy","updateChartSimple","_vm","_h","$createElement","_c","_self","staticClass","attrs","_e"],"mappings":"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"}